
LAB4Btry2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  0000062c  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800222  00800222  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b4  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e60  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ae  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  000035a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065f  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093a  00000000  00000000  00003d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000046cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	29 c2       	rjmp	.+1106   	; 0x460 <__vector_3>
   e:	00 00       	nop
  10:	ef c1       	rjmp	.+990    	; 0x3f0 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	82 c1       	rjmp	.+772    	; 0x37a <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e2       	ldi	r26, 0x22	; 34
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 32       	cpi	r26, 0x25	; 37
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c1 d1       	rcall	.+898    	; 0x4a2 <main>
 120:	83 c2       	rjmp	.+1286   	; 0x628 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	80 68       	ori	r24, 0x80	; 128
 142:	88 b9       	out	0x08, r24	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 14c:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x30>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	9f 77       	andi	r25, 0x7F	; 127
 15e:	98 b9       	out	0x08, r25	; 8
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDBusyLoop+0x3e>
 166:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 168:	98 b1       	in	r25, 0x08	; 8
 16a:	90 68       	ori	r25, 0x80	; 128
 16c:	98 b9       	out	0x08, r25	; 8
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 176:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 178:	80 78       	andi	r24, 0x80	; 128
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	9a 95       	dec	r25
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDBusyLoop+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 182:	98 b1       	in	r25, 0x08	; 8
 184:	9f 77       	andi	r25, 0x7F	; 127
 186:	98 b9       	out	0x08, r25	; 8
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCDBusyLoop+0x66>
 18e:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 190:	81 11       	cpse	r24, r1
 192:	d5 cf       	rjmp	.-86     	; 0x13e <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 194:	88 b1       	in	r24, 0x08	; 8
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 19a:	87 b1       	in	r24, 0x07	; 7
 19c:	8f 60       	ori	r24, 0x0F	; 15
 19e:	87 b9       	out	0x07, r24	; 7
 1a0:	08 95       	ret

000001a2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 1a2:	28 2f       	mov	r18, r24
 1a4:	22 95       	swap	r18
 1a6:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 1a8:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <LCDByte+0x14>
	CLEAR_RS();
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 7b       	andi	r25, 0xBF	; 191
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCDByte+0x1a>
else
	SET_RS();
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	90 64       	ori	r25, 0x40	; 64
 1ba:	98 b9       	out	0x08, r25	; 8
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDByte+0x1c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	90 68       	ori	r25, 0x80	; 128
 1c8:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 1d0:	98 b9       	out	0x08, r25	; 8
 1d2:	95 e0       	ldi	r25, 0x05	; 5
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDByte+0x32>
 1d8:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1da:	98 b1       	in	r25, 0x08	; 8
 1dc:	9f 77       	andi	r25, 0x7F	; 127
 1de:	98 b9       	out	0x08, r25	; 8
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDByte+0x40>
 1e6:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	90 68       	ori	r25, 0x80	; 128
 1ec:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1ee:	98 b1       	in	r25, 0x08	; 8
 1f0:	90 7f       	andi	r25, 0xF0	; 240
 1f2:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCDByte+0x56>
 1fc:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	8f 77       	andi	r24, 0x7F	; 127
 202:	88 b9       	out	0x08, r24	; 8
 204:	95 e0       	ldi	r25, 0x05	; 5
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDByte+0x64>
 20a:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 20c:	8b cf       	rjmp	.-234    	; 0x124 <LCDBusyLoop>
 20e:	08 95       	ret

00000210 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 210:	cf 93       	push	r28
 212:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	86 e7       	ldi	r24, 0x76	; 118
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <InitLCD+0xa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <InitLCD+0x14>
 224:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 226:	87 b1       	in	r24, 0x07	; 7
 228:	8f 60       	ori	r24, 0x0F	; 15
 22a:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 22c:	87 b1       	in	r24, 0x07	; 7
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 232:	87 b1       	in	r24, 0x07	; 7
 234:	80 64       	ori	r24, 0x40	; 64
 236:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 238:	87 b1       	in	r24, 0x07	; 7
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	80 7f       	andi	r24, 0xF0	; 240
 242:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 244:	88 b1       	in	r24, 0x08	; 8
 246:	8f 77       	andi	r24, 0x7F	; 127
 248:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 24a:	88 b1       	in	r24, 0x08	; 8
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 250:	88 b1       	in	r24, 0x08	; 8
 252:	8f 7b       	andi	r24, 0xBF	; 191
 254:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	00 c0       	rjmp	.+0      	; 0x258 <InitLCD+0x48>
 258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x4a>
 25a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 25c:	88 b1       	in	r24, 0x08	; 8
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 262:	88 b1       	in	r24, 0x08	; 8
 264:	82 60       	ori	r24, 0x02	; 2
 266:	88 b9       	out	0x08, r24	; 8
 268:	25 e0       	ldi	r18, 0x05	; 5
 26a:	2a 95       	dec	r18
 26c:	f1 f7       	brne	.-4      	; 0x26a <InitLCD+0x5a>
 26e:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 270:	88 b1       	in	r24, 0x08	; 8
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	88 b9       	out	0x08, r24	; 8
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <InitLCD+0x68>
 27c:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 27e:	52 df       	rcall	.-348    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8c 2f       	mov	r24, r28
 284:	8c 60       	ori	r24, 0x0C	; 12
 286:	8d df       	rcall	.-230    	; 0x1a2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	8a df       	rcall	.-236    	; 0x1a2 <LCDByte>
}
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCDWriteString+0xe>
 {
	LCDData(*msg);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	82 df       	rcall	.-252    	; 0x1a2 <LCDByte>
	msg++;
 29e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2a0:	88 81       	ld	r24, Y
 2a2:	81 11       	cpse	r24, r1
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <LCDWriteInt+0xe>
 2ba:	1f 92       	push	r1
 2bc:	1f 92       	push	r1
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2c4:	fe 01       	movw	r30, r28
 2c6:	31 96       	adiw	r30, 0x01	; 1
 2c8:	25 e0       	ldi	r18, 0x05	; 5
 2ca:	df 01       	movw	r26, r30
 2cc:	1d 92       	st	X+, r1
 2ce:	2a 95       	dec	r18
 2d0:	e9 f7       	brne	.-6      	; 0x2cc <LCDWriteInt+0x20>
	int i=4,j=0;
 2d2:	24 e0       	ldi	r18, 0x04	; 4
 2d4:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 2d6:	0e c0       	rjmp	.+28     	; 0x2f4 <LCDWriteInt+0x48>
	{
	str[i]=val%10;
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	7e d1       	rcall	.+764    	; 0x5da <__divmodhi4>
 2de:	e1 e0       	ldi	r30, 0x01	; 1
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	ec 0f       	add	r30, r28
 2e4:	fd 1f       	adc	r31, r29
 2e6:	e2 0f       	add	r30, r18
 2e8:	f3 1f       	adc	r31, r19
 2ea:	80 83       	st	Z, r24
	val=val/10;
 2ec:	86 2f       	mov	r24, r22
 2ee:	97 2f       	mov	r25, r23
	i--;
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	81 f7       	brne	.-32     	; 0x2d8 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2f8:	bf ef       	ldi	r27, 0xFF	; 255
 2fa:	eb 16       	cp	r14, r27
 2fc:	fb 06       	cpc	r15, r27
 2fe:	81 f4       	brne	.+32     	; 0x320 <LCDWriteInt+0x74>
 300:	03 c0       	rjmp	.+6      	; 0x308 <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
 302:	0f 5f       	subi	r16, 0xFF	; 255
 304:	1f 4f       	sbci	r17, 0xFF	; 255
 306:	02 c0       	rjmp	.+4      	; 0x30c <LCDWriteInt+0x60>
 308:	00 e0       	ldi	r16, 0x00	; 0
 30a:	10 e0       	ldi	r17, 0x00	; 0
 30c:	e1 e0       	ldi	r30, 0x01	; 1
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ec 0f       	add	r30, r28
 312:	fd 1f       	adc	r31, r29
 314:	e0 0f       	add	r30, r16
 316:	f1 1f       	adc	r31, r17
 318:	20 81       	ld	r18, Z
 31a:	22 23       	and	r18, r18
 31c:	91 f3       	breq	.-28     	; 0x302 <LCDWriteInt+0x56>
 31e:	04 c0       	rjmp	.+8      	; 0x328 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 320:	05 e0       	ldi	r16, 0x05	; 5
 322:	10 e0       	ldi	r17, 0x00	; 0
 324:	0e 19       	sub	r16, r14
 326:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 328:	99 23       	and	r25, r25
 32a:	84 f4       	brge	.+32     	; 0x34c <LCDWriteInt+0xa0>
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	8d e2       	ldi	r24, 0x2D	; 45
 330:	38 df       	rcall	.-400    	; 0x1a2 <LCDByte>
 332:	0c c0       	rjmp	.+24     	; 0x34c <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 334:	e1 e0       	ldi	r30, 0x01	; 1
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ec 0f       	add	r30, r28
 33a:	fd 1f       	adc	r31, r29
 33c:	e0 0f       	add	r30, r16
 33e:	f1 1f       	adc	r31, r17
 340:	80 81       	ld	r24, Z
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	2d df       	rcall	.-422    	; 0x1a2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 348:	0f 5f       	subi	r16, 0xFF	; 255
 34a:	1f 4f       	sbci	r17, 0xFF	; 255
 34c:	05 30       	cpi	r16, 0x05	; 5
 34e:	11 05       	cpc	r17, r1
 350:	8c f3       	brlt	.-30     	; 0x334 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	08 95       	ret

0000036a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 36a:	88 32       	cpi	r24, 0x28	; 40
 36c:	28 f4       	brcc	.+10     	; 0x378 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 36e:	61 11       	cpse	r22, r1
 370:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	80 68       	ori	r24, 0x80	; 128
 376:	15 cf       	rjmp	.-470    	; 0x1a2 <LCDByte>
 378:	08 95       	ret

0000037a <__vector_29>:
	}
	//disable interrupts;
}
// the interrupt will be trigured if the ADC is done ========================
ISR(ADC_vect)
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
	ADC_result = ADCH; //global variable for high bite (where the data is)
 388:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 38c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	OCR0A = ADC_result;//duty cycle
 390:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 394:	87 bd       	out	0x27, r24	; 39
	ADC_result_flag = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <ADC_result_flag+0x1>
 39e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <ADC_result_flag>
}
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <mTimer>:
   i = 0;

   //TCCR1B |= _BV (CS11);  // Set prescaler (/8) clock 16MHz/8 -> 2MHz
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 3b0:	e1 e8       	ldi	r30, 0x81	; 129
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	20 81       	ld	r18, Z
 3b6:	28 60       	ori	r18, 0x08	; 8
 3b8:	20 83       	st	Z, r18

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 3ba:	28 ee       	ldi	r18, 0xE8	; 232
 3bc:	33 e0       	ldi	r19, 0x03	; 3
 3be:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3c2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 
   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
 3c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 3ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

   /* Enable the output compare interrupt */
   //TIMSK1 = TIMSK1 | 0b00000010;

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 3ce:	26 b3       	in	r18, 0x16	; 22
 3d0:	22 60       	ori	r18, 0x02	; 2
 3d2:	26 bb       	out	0x16, r18	; 22
	  Using polling method not Interrupt Driven
   ***/
	  
   int i;

   i = 0;
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <mTimer+0x38>
      if((TIFR1 & 0x02) == 0x02){
 3da:	b1 9b       	sbis	0x16, 1	; 22
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <mTimer+0x38>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 3de:	46 b3       	in	r20, 0x16	; 22
 3e0:	42 60       	ori	r20, 0x02	; 2
 3e2:	46 bb       	out	0x16, r20	; 22
	   i++;
 3e4:	2f 5f       	subi	r18, 0xFF	; 255
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
 3ec:	b4 f3       	brlt	.-20     	; 0x3da <mTimer+0x2a>
	   TIFR1 |= _BV(OCF1A);
	   i++;
	   }
	 } 
   return;
}  /* mTimer */
 3ee:	08 95       	ret

000003f0 <__vector_4>:
	
    }
}// end main

// change direction
ISR(INT3_vect){
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	0b b6       	in	r0, 0x3b	; 59
 3fc:	0f 92       	push	r0
 3fe:	2f 93       	push	r18
 400:	3f 93       	push	r19
 402:	4f 93       	push	r20
 404:	5f 93       	push	r21
 406:	6f 93       	push	r22
 408:	7f 93       	push	r23
 40a:	8f 93       	push	r24
 40c:	9f 93       	push	r25
 40e:	af 93       	push	r26
 410:	bf 93       	push	r27
 412:	cf 93       	push	r28
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
	mTimer(20); //debounce
 418:	84 e1       	ldi	r24, 0x14	; 20
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	c9 df       	rcall	.-110    	; 0x3b0 <mTimer>
	//ADCSRA |= _BV(ADSC); //start bit - start conversion?
	int prev = PORTB;
 41e:	c5 b1       	in	r28, 0x05	; 5
	//brake DC motor to Vcc; need to set INA (PB3), INB(PB4), DIAGA/ENA(PB5), and DIAGB/ENB(PB6) to high
	PORTB = brake; //set INA (PB3),INB(PB4),DIAGA/ENA(PB5),and DIAGB/ENB(PB6) to high
 420:	88 e7       	ldi	r24, 0x78	; 120
 422:	85 b9       	out	0x05, r24	; 5
	mTimer(5);
 424:	85 e0       	ldi	r24, 0x05	; 5
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	c3 df       	rcall	.-122    	; 0x3b0 <mTimer>
	//change moving direction;
	if(prev == CW){
 42a:	c8 36       	cpi	r28, 0x68	; 104
 42c:	19 f4       	brne	.+6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		PORTB = CCW; //set INB (PB4) to low
 42e:	80 e7       	ldi	r24, 0x70	; 112
 430:	85 b9       	out	0x05, r24	; 5
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		}else{
		PORTB = CW; //set INB (PB4) to high
 434:	88 e6       	ldi	r24, 0x68	; 104
 436:	85 b9       	out	0x05, r24	; 5
	}
}
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	cf 91       	pop	r28
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0b be       	out	0x3b, r0	; 59
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <__vector_3>:

// sensor switch: Active HIGH starts AD converstion =======
// kill switch
ISR(INT2_vect)
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
	mTimer(20); //debounce
 46a:	84 e1       	ldi	r24, 0x14	; 20
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	a0 df       	rcall	.-192    	; 0x3b0 <mTimer>
	//brake DC motor to Vcc; need to set INA (PB3), INB(PB4), DIAGA/ENA(PB5), and DIAGB/ENB(PB6) to high
	PORTB = brake; //set INA (PB3),INB(PB4),DIAGA/ENA(PB5),and DIAGB/ENB(PB6) to high
 470:	88 e7       	ldi	r24, 0x78	; 120
 472:	85 b9       	out	0x05, r24	; 5
	mTimer(5);
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	9b df       	rcall	.-202    	; 0x3b0 <mTimer>
	//disable drive by setting EA and EB make zeros use #define
	PORTB = disable;
 47a:	15 b8       	out	0x05, r1	; 5
	LCDClear();
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 de       	rcall	.-736    	; 0x1a2 <LCDByte>
	LCDWriteString("KILL ACTIVATED");//write to display and flash kill switch has been activated
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	05 df       	rcall	.-502    	; 0x292 <LCDWriteString>
 488:	ff cf       	rjmp	.-2      	; 0x488 <__vector_3+0x28>

0000048a <PWM>:
 48a:	84 b5       	in	r24, 0x24	; 36
	 } 
   return;
}  /* mTimer */

void PWM(){
	TCCR0A |= _BV(WGM01)|_BV(WGM00); //selecting Fast PWN mode 3
 48c:	83 60       	ori	r24, 0x03	; 3
 48e:	84 bd       	out	0x24, r24	; 36
	//TIMSK0 |= _BV(OCIE0A); //enable output compare interrupt for timer0
	TCCR0A |= _BV(COM0A1);//set compare match output mode to clear and set output compare A when timer reaches TOP
 490:	84 b5       	in	r24, 0x24	; 36
 492:	80 68       	ori	r24, 0x80	; 128
 494:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);//sets prescale factor to 8
 496:	85 b5       	in	r24, 0x25	; 37
 498:	82 60       	ori	r24, 0x02	; 2
 49a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0x80;//default duty cycle
 49c:	80 e8       	ldi	r24, 0x80	; 128
 49e:	87 bd       	out	0x27, r24	; 39
 4a0:	08 95       	ret

000004a2 <main>:
void mTimer(int count);
void PWM();

int main(void)
{
	CLKPR = 0x80;
 4a2:	e1 e6       	ldi	r30, 0x61	; 97
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	80 83       	st	Z, r24
	CLKPR = 0x01;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	80 83       	st	Z, r24
	
	TCCR1B = _BV(CS11);
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	DDRA = 0x00; //sets PORTA to input
 4b4:	11 b8       	out	0x01, r1	; 1
	DDRF = 0x00; //sets PORTF to input
 4b6:	10 ba       	out	0x10, r1	; 16
	DDRC=0xFF; //sets PORTC to output
 4b8:	cf ef       	ldi	r28, 0xFF	; 255
 4ba:	c7 b9       	out	0x07, r28	; 7
	PWM();
 4bc:	e6 df       	rcall	.-52     	; 0x48a <PWM>
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	a7 de       	rcall	.-690    	; 0x210 <InitLCD>

	//Clear the screen
	LCDClear();
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	6d de       	rcall	.-806    	; 0x1a2 <LCDByte>
	//LCDWriteString("Congrats ");				
	cli(); // disable all of the interrupt ==========================
 4c8:	f8 94       	cli
	// config the external interrupt ======================================
	EIMSK |= (_BV(INT2)); // enable INT2
 4ca:	8d b3       	in	r24, 0x1d	; 29
 4cc:	84 60       	ori	r24, 0x04	; 4
 4ce:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC21)); // falling edge interrupt
 4d0:	e9 e6       	ldi	r30, 0x69	; 105
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	80 62       	ori	r24, 0x20	; 32
 4d8:	80 83       	st	Z, r24
	EIMSK |= (_BV(INT3)); // enable INT3
 4da:	8d b3       	in	r24, 0x1d	; 29
 4dc:	88 60       	ori	r24, 0x08	; 8
 4de:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC31) | _BV(ISC30)); //rising edge interrupt
 4e0:	80 81       	ld	r24, Z
 4e2:	80 6c       	ori	r24, 0xC0	; 192
 4e4:	80 83       	st	Z, r24
	// config ADC =========================================================
	// by default, the ADC input (analog input is set to be ADC0 / PORTF0
	ADCSRA |= _BV(ADEN); // enable ADC
 4e6:	ea e7       	ldi	r30, 0x7A	; 122
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	80 68       	ori	r24, 0x80	; 128
 4ee:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE); // enable interrupt of ADC
 4f0:	80 81       	ld	r24, Z
 4f2:	88 60       	ori	r24, 0x08	; 8
 4f4:	80 83       	st	Z, r24
	ADMUX |= _BV(ADLAR) | _BV(REFS0); //REFS0 to 1 selects voltage for ADC (AVCC with external capacitor at AREF pin)
 4f6:	ac e7       	ldi	r26, 0x7C	; 124
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	8c 91       	ld	r24, X
 4fc:	80 66       	ori	r24, 0x60	; 96
 4fe:	8c 93       	st	X, r24
	//ADLAR to 1 left adjusts the result - to be able to read 8 bit mode (shoves it to the high bite)
	//set the PORTC as output to display the ADC result ==================
	//LCDWriteString("Congrats ");
	DDRC = 0xff;
 500:	c7 b9       	out	0x07, r28	; 7
	
	//set the PORTB as output to display the ADC result ==================
	DDRB = 0xff;
 502:	c4 b9       	out	0x04, r28	; 4
	PORTB = CW;
 504:	88 e6       	ldi	r24, 0x68	; 104
 506:	85 b9       	out	0x05, r24	; 5
	
	// sets the Global Enable for all interrupts ==========================
	sei(); //enables all of the interrupts
 508:	78 94       	sei
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC); //starts conversion and grabs value
 50a:	80 81       	ld	r24, Z
 50c:	80 64       	ori	r24, 0x40	; 64
	//set up driver to turn the motor (still needs to be done)

    while (1) 
    {	
		mTimer(20);
 50e:	80 83       	st	Z, r24
 510:	84 e1       	ldi	r24, 0x14	; 20
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	4d df       	rcall	.-358    	; 0x3b0 <mTimer>
		if (ADC_result_flag)
 516:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <ADC_result_flag>
 51a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <ADC_result_flag+0x1>
 51e:	89 2b       	or	r24, r25
 520:	09 f4       	brne	.+2      	; 0x524 <main+0x82>
 522:	55 c0       	rjmp	.+170    	; 0x5ce <main+0x12c>
		{
			//PORTC = ADC_result; //output data on LED
			ADC_result_flag = 0x00; //flag is rest to 0 therefore, it fails the if statement
 524:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <ADC_result_flag+0x1>
 528:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <ADC_result_flag>
			//write to LCD - display the ADC value 1st line forward or revers, 2nd percentage of speed, 3rd ADC result
			if(PORTB == CW){
 52c:	85 b1       	in	r24, 0x05	; 5
 52e:	88 36       	cpi	r24, 0x68	; 104
				LCDClear();
 530:	49 f5       	brne	.+82     	; 0x584 <main+0xe2>
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	81 e0       	ldi	r24, 0x01	; 1
				LCDWriteStringXY(0,0,"FORWARD");
 536:	35 de       	rcall	.-918    	; 0x1a2 <LCDByte>
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	16 df       	rcall	.-468    	; 0x36a <LCDGotoXY>
 53e:	8f e0       	ldi	r24, 0x0F	; 15
 540:	92 e0       	ldi	r25, 0x02	; 2
				LCDWriteIntXY(0,1,ADC_result*100/255,3);
 542:	a7 de       	rcall	.-690    	; 0x292 <LCDWriteString>
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	10 df       	rcall	.-480    	; 0x36a <LCDGotoXY>
 54a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 54e:	24 e6       	ldi	r18, 0x64	; 100
 550:	82 9f       	mul	r24, r18
 552:	c0 01       	movw	r24, r0
 554:	11 24       	eor	r1, r1
 556:	6f ef       	ldi	r22, 0xFF	; 255
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	3f d0       	rcall	.+126    	; 0x5da <__divmodhi4>
 55c:	cb 01       	movw	r24, r22
 55e:	63 e0       	ldi	r22, 0x03	; 3
				LCDWriteStringXY(3,1,"%");
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	a4 de       	rcall	.-696    	; 0x2ac <LCDWriteInt>
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	00 df       	rcall	.-512    	; 0x36a <LCDGotoXY>
 56a:	87 e1       	ldi	r24, 0x17	; 23
 56c:	92 e0       	ldi	r25, 0x02	; 2
				LCDWriteIntXY(13,1,ADC_result,3);
 56e:	91 de       	rcall	.-734    	; 0x292 <LCDWriteString>
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	8d e0       	ldi	r24, 0x0D	; 13
 574:	fa de       	rcall	.-524    	; 0x36a <LCDGotoXY>
 576:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 57a:	63 e0       	ldi	r22, 0x03	; 3
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
				}else{
				LCDClear();
 580:	95 de       	rcall	.-726    	; 0x2ac <LCDWriteInt>
 582:	25 c0       	rjmp	.+74     	; 0x5ce <main+0x12c>
 584:	60 e0       	ldi	r22, 0x00	; 0
				LCDWriteString("REVERSE");
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0c de       	rcall	.-1000   	; 0x1a2 <LCDByte>
 58a:	89 e1       	ldi	r24, 0x19	; 25
				LCDWriteIntXY(0,1,ADC_result*100/255,3);
 58c:	92 e0       	ldi	r25, 0x02	; 2
 58e:	81 de       	rcall	.-766    	; 0x292 <LCDWriteString>
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	ea de       	rcall	.-556    	; 0x36a <LCDGotoXY>
 596:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 59a:	24 e6       	ldi	r18, 0x64	; 100
 59c:	82 9f       	mul	r24, r18
 59e:	c0 01       	movw	r24, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	6f ef       	ldi	r22, 0xFF	; 255
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	19 d0       	rcall	.+50     	; 0x5da <__divmodhi4>
 5a8:	cb 01       	movw	r24, r22
				LCDWriteStringXY(3,1,"%");
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	7e de       	rcall	.-772    	; 0x2ac <LCDWriteInt>
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	da de       	rcall	.-588    	; 0x36a <LCDGotoXY>
 5b6:	87 e1       	ldi	r24, 0x17	; 23
 5b8:	92 e0       	ldi	r25, 0x02	; 2
				LCDWriteIntXY(13,1,ADC_result,3);
 5ba:	6b de       	rcall	.-810    	; 0x292 <LCDWriteString>
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	8d e0       	ldi	r24, 0x0D	; 13
 5c0:	d4 de       	rcall	.-600    	; 0x36a <LCDGotoXY>
 5c2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 5c6:	63 e0       	ldi	r22, 0x03	; 3
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	6f de       	rcall	.-802    	; 0x2ac <LCDWriteInt>
 5ce:	ea e7       	ldi	r30, 0x7A	; 122
				}
		}
		ADCSRA |= _BV(ADSC);//starts conversion and grabs value
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	80 64       	ori	r24, 0x40	; 64
 5d6:	80 83       	st	Z, r24
 5d8:	9b cf       	rjmp	.-202    	; 0x510 <main+0x6e>

000005da <__divmodhi4>:
	
    }
 5da:	97 fb       	bst	r25, 7
 5dc:	07 2e       	mov	r0, r23
 5de:	16 f4       	brtc	.+4      	; 0x5e4 <__divmodhi4+0xa>
 5e0:	00 94       	com	r0
 5e2:	06 d0       	rcall	.+12     	; 0x5f0 <__divmodhi4_neg1>
 5e4:	77 fd       	sbrc	r23, 7
 5e6:	08 d0       	rcall	.+16     	; 0x5f8 <__divmodhi4_neg2>
 5e8:	0b d0       	rcall	.+22     	; 0x600 <__udivmodhi4>
 5ea:	07 fc       	sbrc	r0, 7
 5ec:	05 d0       	rcall	.+10     	; 0x5f8 <__divmodhi4_neg2>
 5ee:	3e f4       	brtc	.+14     	; 0x5fe <__divmodhi4_exit>

000005f0 <__divmodhi4_neg1>:
 5f0:	90 95       	com	r25
 5f2:	81 95       	neg	r24
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__divmodhi4_neg2>:
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255

000005fe <__divmodhi4_exit>:
 5fe:	08 95       	ret

00000600 <__udivmodhi4>:
 600:	aa 1b       	sub	r26, r26
 602:	bb 1b       	sub	r27, r27
 604:	51 e1       	ldi	r21, 0x11	; 17
 606:	07 c0       	rjmp	.+14     	; 0x616 <__udivmodhi4_ep>

00000608 <__udivmodhi4_loop>:
 608:	aa 1f       	adc	r26, r26
 60a:	bb 1f       	adc	r27, r27
 60c:	a6 17       	cp	r26, r22
 60e:	b7 07       	cpc	r27, r23
 610:	10 f0       	brcs	.+4      	; 0x616 <__udivmodhi4_ep>
 612:	a6 1b       	sub	r26, r22
 614:	b7 0b       	sbc	r27, r23

00000616 <__udivmodhi4_ep>:
 616:	88 1f       	adc	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	5a 95       	dec	r21
 61c:	a9 f7       	brne	.-22     	; 0x608 <__udivmodhi4_loop>
 61e:	80 95       	com	r24
 620:	90 95       	com	r25
 622:	bc 01       	movw	r22, r24
 624:	cd 01       	movw	r24, r26
 626:	08 95       	ret

00000628 <_exit>:
 628:	f8 94       	cli

0000062a <__stop_program>:
 62a:	ff cf       	rjmp	.-2      	; 0x62a <__stop_program>
