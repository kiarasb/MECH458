
Lab4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800210  00800210  000004a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001480  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e43  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000848  00000000  00000000  0000286b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d6  00000000  00000000  000038d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000042a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	83 c1       	rjmp	.+774    	; 0x314 <__vector_3>
   e:	00 00       	nop
  10:	49 c1       	rjmp	.+658    	; 0x2a4 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	da c0       	rjmp	.+436    	; 0x22a <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 31       	cpi	r26, 0x13	; 19
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	3f d1       	rcall	.+638    	; 0x39e <main>
 120:	6f c1       	rjmp	.+734    	; 0x400 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <LCDBusyLoop>:

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	88 b9       	out	0x08, r24	; 8
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	88 b9       	out	0x08, r24	; 8
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDBusyLoop+0x1a>
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	80 68       	ori	r24, 0x80	; 128
 142:	88 b9       	out	0x08, r24	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>
 14c:	86 b1       	in	r24, 0x06	; 6
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x30>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCDBusyLoop+0x36>
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	9f 77       	andi	r25, 0x7F	; 127
 15e:	98 b9       	out	0x08, r25	; 8
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDBusyLoop+0x3e>
 166:	00 00       	nop
 168:	98 b1       	in	r25, 0x08	; 8
 16a:	90 68       	ori	r25, 0x80	; 128
 16c:	98 b9       	out	0x08, r25	; 8
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDBusyLoop+0x52>
 176:	96 b1       	in	r25, 0x06	; 6
 178:	80 78       	andi	r24, 0x80	; 128
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	9a 95       	dec	r25
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDBusyLoop+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCDBusyLoop+0x5e>
 182:	98 b1       	in	r25, 0x08	; 8
 184:	9f 77       	andi	r25, 0x7F	; 127
 186:	98 b9       	out	0x08, r25	; 8
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCDBusyLoop+0x66>
 18e:	00 00       	nop
 190:	81 11       	cpse	r24, r1
 192:	d5 cf       	rjmp	.-86     	; 0x13e <LCDBusyLoop+0x1a>
 194:	88 b1       	in	r24, 0x08	; 8
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	88 b9       	out	0x08, r24	; 8
 19a:	87 b1       	in	r24, 0x07	; 7
 19c:	8f 60       	ori	r24, 0x0F	; 15
 19e:	87 b9       	out	0x07, r24	; 7
 1a0:	08 95       	ret

000001a2 <LCDByte>:
 1a2:	28 2f       	mov	r18, r24
 1a4:	22 95       	swap	r18
 1a6:	2f 70       	andi	r18, 0x0F	; 15
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <LCDByte+0x14>
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 7b       	andi	r25, 0xBF	; 191
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCDByte+0x1a>
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	90 64       	ori	r25, 0x40	; 64
 1ba:	98 b9       	out	0x08, r25	; 8
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDByte+0x1c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCDByte+0x22>
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	90 68       	ori	r25, 0x80	; 128
 1c8:	98 b9       	out	0x08, r25	; 8
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	92 2b       	or	r25, r18
 1d0:	98 b9       	out	0x08, r25	; 8
 1d2:	95 e0       	ldi	r25, 0x05	; 5
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDByte+0x32>
 1d8:	00 00       	nop
 1da:	98 b1       	in	r25, 0x08	; 8
 1dc:	9f 77       	andi	r25, 0x7F	; 127
 1de:	98 b9       	out	0x08, r25	; 8
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDByte+0x40>
 1e6:	00 00       	nop
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	90 68       	ori	r25, 0x80	; 128
 1ec:	98 b9       	out	0x08, r25	; 8
 1ee:	98 b1       	in	r25, 0x08	; 8
 1f0:	90 7f       	andi	r25, 0xF0	; 240
 1f2:	89 2b       	or	r24, r25
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCDByte+0x56>
 1fc:	00 00       	nop
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	8f 77       	andi	r24, 0x7F	; 127
 202:	88 b9       	out	0x08, r24	; 8
 204:	95 e0       	ldi	r25, 0x05	; 5
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDByte+0x64>
 20a:	00 00       	nop
 20c:	8b cf       	rjmp	.-234    	; 0x124 <LCDBusyLoop>
 20e:	08 95       	ret

00000210 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 216:	03 c0       	rjmp	.+6      	; 0x21e <LCDWriteString+0xe>
 {
	LCDData(*msg);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	c3 df       	rcall	.-122    	; 0x1a2 <LCDByte>
	msg++;
 21c:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 21e:	88 81       	ld	r24, Y
 220:	81 11       	cpse	r24, r1
 222:	fa cf       	rjmp	.-12     	; 0x218 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <__vector_29>:
	LCDWriteString("KILL ACTIVATED");//write to display and flash kill switch has been activated
	//disable interrupts;
}
// the interrupt will be trigured if the ADC is done ========================
ISR(ADC_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
	ADC_result = ADCH; //global variable for high bite (where the data is)
 238:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 23c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
	ADC_result_flag = 1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <ADC_result_flag+0x1>
 248:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ADC_result_flag>
}
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <mTimer>:
   i = 0;

   //TCCR1B |= _BV (CS11);  // Set prescaler (/8) clock 16MHz/8 -> 2MHz
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 25a:	e1 e8       	ldi	r30, 0x81	; 129
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	20 81       	ld	r18, Z
 260:	28 60       	ori	r18, 0x08	; 8
 262:	20 83       	st	Z, r18

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 264:	28 ee       	ldi	r18, 0xE8	; 232
 266:	33 e0       	ldi	r19, 0x03	; 3
 268:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 26c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 
   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
 270:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 274:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

   /* Enable the output compare interrupt */
   TIMSK1 = TIMSK1 | 0b00000010;
 278:	ef e6       	ldi	r30, 0x6F	; 111
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	20 81       	ld	r18, Z
 27e:	22 60       	ori	r18, 0x02	; 2
 280:	20 83       	st	Z, r18

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 282:	26 b3       	in	r18, 0x16	; 22
 284:	22 60       	ori	r18, 0x02	; 2
 286:	26 bb       	out	0x16, r18	; 22
	  Using polling method not Interrupt Driven
   ***/
	  
   int i;

   i = 0;
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 28c:	07 c0       	rjmp	.+14     	; 0x29c <mTimer+0x42>
      if((TIFR1 & 0x02) == 0x02){
 28e:	b1 9b       	sbis	0x16, 1	; 22
 290:	05 c0       	rjmp	.+10     	; 0x29c <mTimer+0x42>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 292:	46 b3       	in	r20, 0x16	; 22
 294:	42 60       	ori	r20, 0x02	; 2
 296:	46 bb       	out	0x16, r20	; 22
	   i++;
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 29c:	28 17       	cp	r18, r24
 29e:	39 07       	cpc	r19, r25
 2a0:	b4 f3       	brlt	.-20     	; 0x28e <mTimer+0x34>
	   TIFR1 |= _BV(OCF1A);
	   i++;
	   }
	 } 
   return;
}  /* mTimer */
 2a2:	08 95       	ret

000002a4 <__vector_4>:
	}
	
} // end main

// change direction 
ISR(INT3_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	0b b6       	in	r0, 0x3b	; 59
 2b0:	0f 92       	push	r0
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	cf 93       	push	r28
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	mTimer(20); //debounce
 2cc:	84 e1       	ldi	r24, 0x14	; 20
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	c4 df       	rcall	.-120    	; 0x25a <mTimer>
	//ADCSRA |= _BV(ADSC); //start bit - start conversion?
	int prev = PORTB;
 2d2:	c5 b1       	in	r28, 0x05	; 5
	//brake DC motor to Vcc; need to set INA (PB3), INB(PB4), DIAGA/ENA(PB5), and DIAGB/ENB(PB6) to high
	PORTB = brake; //set INA (PB3),INB(PB4),DIAGA/ENA(PB5),and DIAGB/ENB(PB6) to high
 2d4:	8c e3       	ldi	r24, 0x3C	; 60
 2d6:	85 b9       	out	0x05, r24	; 5
	mTimer(5);
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	be df       	rcall	.-132    	; 0x25a <mTimer>
	//change moving direction;
	if(prev == CW){
 2de:	c8 33       	cpi	r28, 0x38	; 56
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <__vector_4+0x44>
		PORTB = CCW; //set INB (PB4) to low
 2e2:	80 e3       	ldi	r24, 0x30	; 48
 2e4:	85 b9       	out	0x05, r24	; 5
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__vector_4+0x48>
	}else{
		PORTB = CW; //set INB (PB4) to high
 2e8:	88 e3       	ldi	r24, 0x38	; 56
 2ea:	85 b9       	out	0x05, r24	; 5
	}
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	cf 91       	pop	r28
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0b be       	out	0x3b, r0	; 59
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__vector_3>:

// sensor switch: Active HIGH starts AD converstion =======
// kill switch 
ISR(INT2_vect)
{ 		
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	0b b6       	in	r0, 0x3b	; 59
 320:	0f 92       	push	r0
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	mTimer(20); //debounce
 33a:	84 e1       	ldi	r24, 0x14	; 20
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	8d df       	rcall	.-230    	; 0x25a <mTimer>
	//brake DC motor to Vcc; need to set INA (PB3), INB(PB4), DIAGA/ENA(PB5), and DIAGB/ENB(PB6) to high
	PORTB = brake; //set INA (PB3),INB(PB4),DIAGA/ENA(PB5),and DIAGB/ENB(PB6) to high
 340:	8c e3       	ldi	r24, 0x3C	; 60
 342:	85 b9       	out	0x05, r24	; 5
	mTimer(5);
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	88 df       	rcall	.-240    	; 0x25a <mTimer>
	//disable drive by setting EA and EB make zeros use #define
	PORTB = disable;
 34a:	15 b8       	out	0x05, r1	; 5
	LCDWriteString("KILL ACTIVATED");//write to display and flash kill switch has been activated
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	5f df       	rcall	.-322    	; 0x210 <LCDWriteString>
	//disable interrupts;
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0b be       	out	0x3b, r0	; 59
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <PWM>:
	 } 
   return;
}  /* mTimer */

void PWM(){
	TCCR0A |= _BV(WGM01)|_BV(WGM00); //selecting Fast PWN mode 3
 378:	84 b5       	in	r24, 0x24	; 36
 37a:	83 60       	ori	r24, 0x03	; 3
 37c:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(OCIE0A); //enable output compare interrupt for timer0
 37e:	ee e6       	ldi	r30, 0x6E	; 110
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	82 60       	ori	r24, 0x02	; 2
 386:	80 83       	st	Z, r24
	TCCR0A |= _BV(COM0A1);//set compare match output mode to clear and set output compare A when timer reaches TOP
 388:	84 b5       	in	r24, 0x24	; 36
 38a:	80 68       	ori	r24, 0x80	; 128
 38c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);//sets prescale factor to 8
 38e:	85 b5       	in	r24, 0x25	; 37
 390:	82 60       	ori	r24, 0x02	; 2
 392:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0x80;//set  output compare register A to TOP
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	87 bd       	out	0x27, r24	; 39
	DDRB = 0b11111111; //set all PORTB to output
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	84 b9       	out	0x04, r24	; 4
 39c:	08 95       	ret

0000039e <main>:
void mTimer(int count);
void PWM();

int main(void)
{
	CLKPR = 0x80;
 39e:	e1 e6       	ldi	r30, 0x61	; 97
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	80 83       	st	Z, r24
	CLKPR = 0x01;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 83       	st	Z, r24
	
	TCCR1B = _BV(CS11);
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	DDRA = 0x00; //sets PORTA to input
 3b0:	11 b8       	out	0x01, r1	; 1
	DDRF = 0x00; //sets PORTF to input
 3b2:	10 ba       	out	0x10, r1	; 16
	PWM();//calls PMW
 3b4:	e1 df       	rcall	.-62     	; 0x378 <PWM>
	//Initialize LCD module
	//InitLCD(LS_BLINK|LS_ULINE);
	//Clear the screen
	//LCDClear();
	
	cli(); // disable all of the interrupt ==========================
 3b6:	f8 94       	cli
	// config the external interrupt ======================================
	EIMSK |= (_BV(INT2)); // enable INT2
 3b8:	8d b3       	in	r24, 0x1d	; 29
 3ba:	84 60       	ori	r24, 0x04	; 4
 3bc:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC21)); // falling edge interrupt
 3be:	e9 e6       	ldi	r30, 0x69	; 105
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	80 62       	ori	r24, 0x20	; 32
 3c6:	80 83       	st	Z, r24
	EIMSK |= (_BV(INT3)); // enable INT3
 3c8:	8d b3       	in	r24, 0x1d	; 29
 3ca:	88 60       	ori	r24, 0x08	; 8
 3cc:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC31) | _BV(ISC30)); //rising edge interrupt
 3ce:	80 81       	ld	r24, Z
 3d0:	80 6c       	ori	r24, 0xC0	; 192
 3d2:	80 83       	st	Z, r24
	// config ADC =========================================================
	// by default, the ADC input (analog input is set to be ADC0 / PORTF0
	ADCSRA |= _BV(ADEN); // enable ADC
 3d4:	ea e7       	ldi	r30, 0x7A	; 122
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE); // enable interrupt of ADC
 3de:	80 81       	ld	r24, Z
 3e0:	88 60       	ori	r24, 0x08	; 8
 3e2:	80 83       	st	Z, r24
	ADMUX |= _BV(ADLAR) | _BV(REFS0); //REFS0 to 1 selects voltage for ADC (AVCC with external capacitor at AREF pin)
 3e4:	ac e7       	ldi	r26, 0x7C	; 124
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	8c 91       	ld	r24, X
 3ea:	80 66       	ori	r24, 0x60	; 96
 3ec:	8c 93       	st	X, r24
	//ADLAR to 1 left adjusts the result - to be able to read 8 bit mode (shoves it to the high bite)
	//set the PORTC as output to display the ADC result ==================
	DDRC = 0xff;
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	87 b9       	out	0x07, r24	; 7
	//set the PORTB as output to display the ADC result ==================
	DDRB = 0xff;
 3f2:	84 b9       	out	0x04, r24	; 4
	// sets the Global Enable for all interrupts ==========================
	sei(); //enables all of the interrupts
 3f4:	78 94       	sei
	// initialize the ADC, start one conversion at the beginning ==========
	ADCSRA |= _BV(ADSC); //starts conversion and grabs value
 3f6:	90 81       	ld	r25, Z
 3f8:	90 64       	ori	r25, 0x40	; 64
 3fa:	90 83       	st	Z, r25
//LCDWriteString("Congrats ");

//A string on line 2
//LCDWriteStringXY(0,1,"Loading ");

PORTC = 0xFF;
 3fc:	88 b9       	out	0x08, r24	; 8
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <main+0x60>

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
