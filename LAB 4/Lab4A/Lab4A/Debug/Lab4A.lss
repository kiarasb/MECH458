
Lab4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800208  00800208  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee0  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c42  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046c  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000563  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016a  00000000  00000000  000029a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002b0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a0 d0       	rcall	.+320    	; 0x260 <main>
 120:	d9 c0       	rjmp	.+434    	; 0x2d4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <mTimer>:
   i = 0;

   //TCCR1B |= _BV (CS11);  // Set prescaler (/8) clock 16MHz/8 -> 2MHz
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 124:	e1 e8       	ldi	r30, 0x81	; 129
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	20 81       	ld	r18, Z
 12a:	28 60       	ori	r18, 0x08	; 8
 12c:	20 83       	st	Z, r18

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 12e:	28 ee       	ldi	r18, 0xE8	; 232
 130:	33 e0       	ldi	r19, 0x03	; 3
 132:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 136:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 
   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
 13a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 13e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

   /* Enable the output compare interrupt */
   TIMSK1 = TIMSK1 | 0b00000010;
 142:	ef e6       	ldi	r30, 0x6F	; 111
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	20 81       	ld	r18, Z
 148:	22 60       	ori	r18, 0x02	; 2
 14a:	20 83       	st	Z, r18

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 14c:	26 b3       	in	r18, 0x16	; 22
 14e:	22 60       	ori	r18, 0x02	; 2
 150:	26 bb       	out	0x16, r18	; 22
	  Using polling method not Interrupt Driven
   ***/
	  
   int i;

   i = 0;
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 156:	07 c0       	rjmp	.+14     	; 0x166 <mTimer+0x42>
      if((TIFR1 & 0x02) == 0x02){
 158:	b1 9b       	sbis	0x16, 1	; 22
 15a:	05 c0       	rjmp	.+10     	; 0x166 <mTimer+0x42>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 15c:	46 b3       	in	r20, 0x16	; 22
 15e:	42 60       	ori	r20, 0x02	; 2
 160:	46 bb       	out	0x16, r20	; 22
	   i++;
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 166:	28 17       	cp	r18, r24
 168:	39 07       	cpc	r19, r25
 16a:	b4 f3       	brlt	.-20     	; 0x158 <mTimer+0x34>
	   TIFR1 |= _BV(OCF1A);
	   i++;
	   }
	 } 
   return;
}  /* mTimer */
 16c:	08 95       	ret

0000016e <CW>:
		CCW(100);
		mTimer(2000);
    }
}

void CW (int NumSteps){
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	int i =0;
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	10 e0       	ldi	r17, 0x00	; 0
	while(i<NumSteps){
 17c:	22 c0       	rjmp	.+68     	; 0x1c2 <CW+0x54>
		CurrentPosition = CurrentPosition +1;
 17e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 182:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 18c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		if(CurrentPosition == 4){
 190:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 194:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 198:	04 97       	sbiw	r24, 0x04	; 4
 19a:	21 f4       	brne	.+8      	; 0x1a4 <CW+0x36>
			CurrentPosition = 0;
 19c:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x1>
 1a0:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
		}
		PORTA = Table[CurrentPosition];
 1a4:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__data_end>
 1a8:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__data_end+0x1>
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	e0 50       	subi	r30, 0x00	; 0
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	80 81       	ld	r24, Z
 1b6:	82 b9       	out	0x02, r24	; 2
		mTimer(20);
 1b8:	84 e1       	ldi	r24, 0x14	; 20
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	b3 df       	rcall	.-154    	; 0x124 <mTimer>
		i++;
 1be:	0f 5f       	subi	r16, 0xFF	; 255
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
    }
}

void CW (int NumSteps){
	int i =0;
	while(i<NumSteps){
 1c2:	0c 17       	cp	r16, r28
 1c4:	1d 07       	cpc	r17, r29
 1c6:	dc f2       	brlt	.-74     	; 0x17e <CW+0x10>
		PORTA = Table[CurrentPosition];
		mTimer(20);
		i++;
	}
	
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <CCW>:

void CCW (int NumSteps){
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
	int i =0;
 1dc:	00 e0       	ldi	r16, 0x00	; 0
 1de:	10 e0       	ldi	r17, 0x00	; 0
	while(i<NumSteps){
 1e0:	24 c0       	rjmp	.+72     	; 0x22a <CCW+0x58>
		CurrentPosition = CurrentPosition - 1;
 1e2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 1e6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 1f0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		if(CurrentPosition == -1){
 1f4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 1f8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	31 f4       	brne	.+12     	; 0x20c <CCW+0x3a>
			CurrentPosition = 3;
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 208:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		}
		PORTA = Table[CurrentPosition];
 20c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__data_end>
 210:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__data_end+0x1>
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e0 50       	subi	r30, 0x00	; 0
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	80 81       	ld	r24, Z
 21e:	82 b9       	out	0x02, r24	; 2
		mTimer(20);
 220:	84 e1       	ldi	r24, 0x14	; 20
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	7f df       	rcall	.-258    	; 0x124 <mTimer>
		i++;
 226:	0f 5f       	subi	r16, 0xFF	; 255
 228:	1f 4f       	sbci	r17, 0xFF	; 255
	
}

void CCW (int NumSteps){
	int i =0;
	while(i<NumSteps){
 22a:	0c 17       	cp	r16, r28
 22c:	1d 07       	cpc	r17, r29
 22e:	cc f2       	brlt	.-78     	; 0x1e2 <CCW+0x10>
		PORTA = Table[CurrentPosition];
		mTimer(20);
		i++;
	}
	
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	08 95       	ret

0000023a <PWM>:
   return;
}  /* mTimer */

//one line of code for each step (no more than 7)
void PWM(){
	TCCR0A |= _BV(WGM01)|_BV(WGM00); //selecting Fast PWN mode 3
 23a:	84 b5       	in	r24, 0x24	; 36
 23c:	83 60       	ori	r24, 0x03	; 3
 23e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(OCIE0A); //enable output compare interrupt for timer0
 240:	ee e6       	ldi	r30, 0x6E	; 110
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	82 60       	ori	r24, 0x02	; 2
 248:	80 83       	st	Z, r24
	TCCR0A |= _BV(COM0A1);//set compare match output mode to clear and set output compare A when timer reaches TOP
 24a:	84 b5       	in	r24, 0x24	; 36
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);//sets prescale factor to 8
 250:	85 b5       	in	r24, 0x25	; 37
 252:	82 60       	ori	r24, 0x02	; 2
 254:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0x80;//set  output compare register A to TOP
 256:	80 e8       	ldi	r24, 0x80	; 128
 258:	87 bd       	out	0x27, r24	; 39
	DDRB = 0b11111111; //set all PORTB to output
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	84 b9       	out	0x04, r24	; 4
 25e:	08 95       	ret

00000260 <main>:
void CW (int NumSteps);
void CCW (int NumSteps);
void PWM();

int main(void){
	CLKPR = 0x80;
 260:	e1 e6       	ldi	r30, 0x61	; 97
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	80 83       	st	Z, r24
	CLKPR = 0x01;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 83       	st	Z, r24
	
	TCCR1B = _BV(CS11);
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	DDRA = 0x00; //sets PORTA to input
 272:	11 b8       	out	0x01, r1	; 1
	
	CurrentPosition = 0; //initializes position
 274:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x1>
 278:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
	
	PWM();//calls PMW
 27c:	de df       	rcall	.-68     	; 0x23a <PWM>
	
    while (1) 
    {
		//initialize current position using 90 deg
		CW(60);
 27e:	8c e3       	ldi	r24, 0x3C	; 60
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	75 df       	rcall	.-278    	; 0x16e <CW>
		mTimer(2000);
 284:	80 ed       	ldi	r24, 0xD0	; 208
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	4d df       	rcall	.-358    	; 0x124 <mTimer>
		
		//CW check
		CW(17);
 28a:	81 e1       	ldi	r24, 0x11	; 17
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	6f df       	rcall	.-290    	; 0x16e <CW>
		mTimer(2000);
 290:	80 ed       	ldi	r24, 0xD0	; 208
 292:	97 e0       	ldi	r25, 0x07	; 7
 294:	47 df       	rcall	.-370    	; 0x124 <mTimer>
		CW(33);
 296:	81 e2       	ldi	r24, 0x21	; 33
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	69 df       	rcall	.-302    	; 0x16e <CW>
		mTimer(2000);
 29c:	80 ed       	ldi	r24, 0xD0	; 208
 29e:	97 e0       	ldi	r25, 0x07	; 7
 2a0:	41 df       	rcall	.-382    	; 0x124 <mTimer>
		CW(100);
 2a2:	84 e6       	ldi	r24, 0x64	; 100
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	63 df       	rcall	.-314    	; 0x16e <CW>
		mTimer(2000);
 2a8:	80 ed       	ldi	r24, 0xD0	; 208
 2aa:	97 e0       	ldi	r25, 0x07	; 7
 2ac:	3b df       	rcall	.-394    	; 0x124 <mTimer>
		
		//CCW check
		CCW(17);
 2ae:	81 e1       	ldi	r24, 0x11	; 17
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	8f df       	rcall	.-226    	; 0x1d2 <CCW>
		mTimer(2000);
 2b4:	80 ed       	ldi	r24, 0xD0	; 208
 2b6:	97 e0       	ldi	r25, 0x07	; 7
 2b8:	35 df       	rcall	.-406    	; 0x124 <mTimer>
		CCW(33);
 2ba:	81 e2       	ldi	r24, 0x21	; 33
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	89 df       	rcall	.-238    	; 0x1d2 <CCW>
		mTimer(2000);
 2c0:	80 ed       	ldi	r24, 0xD0	; 208
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	2f df       	rcall	.-418    	; 0x124 <mTimer>
 2c6:	84 e6       	ldi	r24, 0x64	; 100
		CCW(100);
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	83 df       	rcall	.-250    	; 0x1d2 <CCW>
 2cc:	80 ed       	ldi	r24, 0xD0	; 208
 2ce:	97 e0       	ldi	r25, 0x07	; 7
		mTimer(2000);
 2d0:	29 df       	rcall	.-430    	; 0x124 <mTimer>
 2d2:	d5 cf       	rjmp	.-86     	; 0x27e <main+0x1e>

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
