
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  000013de  00001472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000167  0080024a  0080024a  000014bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000255b  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109d  00000000  00000000  00003ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f1e  00000000  00000000  00004c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00005b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000840  00000000  00000000  00005f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109f  00000000  00000000  000067a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00007847  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	1b c2       	rjmp	.+1078   	; 0x440 <__vector_2>
       a:	00 00       	nop
       c:	12 c4       	rjmp	.+2084   	; 0x832 <__vector_3>
       e:	00 00       	nop
      10:	df c3       	rjmp	.+1982   	; 0x7d0 <__vector_4>
      12:	00 00       	nop
      14:	06 c2       	rjmp	.+1036   	; 0x422 <__vector_5>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c2       	rjmp	.+1176   	; 0x50e <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	17 c2       	rjmp	.+1070   	; 0x4b0 <__vector_32>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ed       	ldi	r30, 0xDE	; 222
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 3b       	cpi	r26, 0xB1	; 177
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	57 d4       	rcall	.+2222   	; 0x9ce <main>
     120:	0c 94 ed 09 	jmp	0x13da	; 0x13da <_exit>

00000124 <__bad_interrupt>:
     124:	1c c3       	rjmp	.+1592   	; 0x75e <__vector_default>

00000126 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     132:	88 b1       	in	r24, 0x08	; 8
     134:	8f 7b       	andi	r24, 0xBF	; 191
     136:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     140:	88 b1       	in	r24, 0x08	; 8
     142:	80 68       	ori	r24, 0x80	; 128
     144:	88 b9       	out	0x08, r24	; 8
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x22>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     14e:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9a 95       	dec	r25
     158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x30>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15c:	98 b1       	in	r25, 0x08	; 8
     15e:	9f 77       	andi	r25, 0x7F	; 127
     160:	98 b9       	out	0x08, r25	; 8
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	9a 95       	dec	r25
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x3e>
     168:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16a:	98 b1       	in	r25, 0x08	; 8
     16c:	90 68       	ori	r25, 0x80	; 128
     16e:	98 b9       	out	0x08, r25	; 8
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     178:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17a:	80 78       	andi	r24, 0x80	; 128
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9a 95       	dec	r25
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x58>
     182:	00 c0       	rjmp	.+0      	; 0x184 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 b9       	out	0x08, r25	; 8
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	9a 95       	dec	r25
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x66>
     190:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     192:	81 11       	cpse	r24, r1
     194:	d5 cf       	rjmp	.-86     	; 0x140 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     196:	88 b1       	in	r24, 0x08	; 8
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 60       	ori	r24, 0x0F	; 15
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a4:	28 2f       	mov	r18, r24
     1a6:	22 95       	swap	r18
     1a8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1aa:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ac:	61 11       	cpse	r22, r1
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <LCDByte+0x14>
	CLEAR_RS();
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 7b       	andi	r25, 0xBF	; 191
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCDByte+0x1a>
else
	SET_RS();
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	90 64       	ori	r25, 0x40	; 64
     1bc:	98 b9       	out	0x08, r25	; 8
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x1c>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	90 7f       	andi	r25, 0xF0	; 240
     1d0:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d2:	98 b9       	out	0x08, r25	; 8
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDByte+0x32>
     1da:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	9f 77       	andi	r25, 0x7F	; 127
     1e0:	98 b9       	out	0x08, r25	; 8
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x40>
     1e8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDByte+0x56>
     1fe:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     200:	88 b1       	in	r24, 0x08	; 8
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	88 b9       	out	0x08, r24	; 8
     206:	95 e0       	ldi	r25, 0x05	; 5
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x64>
     20c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     20e:	8b cf       	rjmp	.-234    	; 0x126 <LCDBusyLoop>
     210:	08 95       	ret

00000212 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	86 e7       	ldi	r24, 0x76	; 118
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <InitLCD+0xa>
     224:	00 c0       	rjmp	.+0      	; 0x226 <InitLCD+0x14>
     226:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     228:	87 b1       	in	r24, 0x07	; 7
     22a:	8f 60       	ori	r24, 0x0F	; 15
     22c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     22e:	87 b1       	in	r24, 0x07	; 7
     230:	80 68       	ori	r24, 0x80	; 128
     232:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     234:	87 b1       	in	r24, 0x07	; 7
     236:	80 64       	ori	r24, 0x40	; 64
     238:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     240:	88 b1       	in	r24, 0x08	; 8
     242:	80 7f       	andi	r24, 0xF0	; 240
     244:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     246:	88 b1       	in	r24, 0x08	; 8
     248:	8f 77       	andi	r24, 0x7F	; 127
     24a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	8f 7d       	andi	r24, 0xDF	; 223
     250:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     252:	88 b1       	in	r24, 0x08	; 8
     254:	8f 7b       	andi	r24, 0xBF	; 191
     256:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x48>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x4a>
     25c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     25e:	88 b1       	in	r24, 0x08	; 8
     260:	80 68       	ori	r24, 0x80	; 128
     262:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     264:	88 b1       	in	r24, 0x08	; 8
     266:	82 60       	ori	r24, 0x02	; 2
     268:	88 b9       	out	0x08, r24	; 8
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	2a 95       	dec	r18
     26e:	f1 f7       	brne	.-4      	; 0x26c <InitLCD+0x5a>
     270:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     272:	88 b1       	in	r24, 0x08	; 8
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	88 b9       	out	0x08, r24	; 8
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	8a 95       	dec	r24
     27c:	f1 f7       	brne	.-4      	; 0x27a <InitLCD+0x68>
     27e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     280:	52 df       	rcall	.-348    	; 0x126 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8c 2f       	mov	r24, r28
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	8d df       	rcall	.-230    	; 0x1a4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	8a df       	rcall	.-236    	; 0x1a4 <LCDByte>
}
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 df       	rcall	.-252    	; 0x1a4 <LCDByte>
	msg++;
     2a0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a2:	88 81       	ld	r24, Y
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <LCDWriteInt+0xe>
     2bc:	1f 92       	push	r1
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c6:	fe 01       	movw	r30, r28
     2c8:	31 96       	adiw	r30, 0x01	; 1
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	df 01       	movw	r26, r30
     2ce:	1d 92       	st	X+, r1
     2d0:	2a 95       	dec	r18
     2d2:	e9 f7       	brne	.-6      	; 0x2ce <LCDWriteInt+0x20>
	int i=4,j=0;
     2d4:	24 e0       	ldi	r18, 0x04	; 4
     2d6:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <LCDWriteInt+0x48>
	{
	str[i]=val%10;
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	35 d7       	rcall	.+3690   	; 0x114a <__divmodhi4>
     2e0:	e1 e0       	ldi	r30, 0x01	; 1
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 0f       	add	r30, r28
     2e6:	fd 1f       	adc	r31, r29
     2e8:	e2 0f       	add	r30, r18
     2ea:	f3 1f       	adc	r31, r19
     2ec:	80 83       	st	Z, r24
	val=val/10;
     2ee:	86 2f       	mov	r24, r22
     2f0:	97 2f       	mov	r25, r23
	i--;
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	81 f7       	brne	.-32     	; 0x2da <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fa:	bf ef       	ldi	r27, 0xFF	; 255
     2fc:	eb 16       	cp	r14, r27
     2fe:	fb 06       	cpc	r15, r27
     300:	81 f4       	brne	.+32     	; 0x322 <LCDWriteInt+0x74>
     302:	03 c0       	rjmp	.+6      	; 0x30a <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	02 c0       	rjmp	.+4      	; 0x30e <LCDWriteInt+0x60>
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	e1 e0       	ldi	r30, 0x01	; 1
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ec 0f       	add	r30, r28
     314:	fd 1f       	adc	r31, r29
     316:	e0 0f       	add	r30, r16
     318:	f1 1f       	adc	r31, r17
     31a:	20 81       	ld	r18, Z
     31c:	22 23       	and	r18, r18
     31e:	91 f3       	breq	.-28     	; 0x304 <LCDWriteInt+0x56>
     320:	04 c0       	rjmp	.+8      	; 0x32a <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     322:	05 e0       	ldi	r16, 0x05	; 5
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	0e 19       	sub	r16, r14
     328:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32a:	99 23       	and	r25, r25
     32c:	84 f4       	brge	.+32     	; 0x34e <LCDWriteInt+0xa0>
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	8d e2       	ldi	r24, 0x2D	; 45
     332:	38 df       	rcall	.-400    	; 0x1a4 <LCDByte>
     334:	0c c0       	rjmp	.+24     	; 0x34e <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     336:	e1 e0       	ldi	r30, 0x01	; 1
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ec 0f       	add	r30, r28
     33c:	fd 1f       	adc	r31, r29
     33e:	e0 0f       	add	r30, r16
     340:	f1 1f       	adc	r31, r17
     342:	80 81       	ld	r24, Z
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	80 5d       	subi	r24, 0xD0	; 208
     348:	2d df       	rcall	.-422    	; 0x1a4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34a:	0f 5f       	subi	r16, 0xFF	; 255
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	05 30       	cpi	r16, 0x05	; 5
     350:	11 05       	cpc	r17, r1
     352:	8c f3       	brlt	.-30     	; 0x336 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	08 95       	ret

0000036c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     36c:	88 32       	cpi	r24, 0x28	; 40
     36e:	28 f4       	brcc	.+10     	; 0x37a <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     370:	61 11       	cpse	r22, r1
     372:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	80 68       	ori	r24, 0x80	; 128
     378:	15 cf       	rjmp	.-470    	; 0x1a4 <LCDByte>
     37a:	08 95       	ret

0000037c <setup>:
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		

	return;
}/*clearQueue*/
     37c:	fc 01       	movw	r30, r24
     37e:	11 82       	std	Z+1, r1	; 0x01
     380:	10 82       	st	Z, r1
     382:	fb 01       	movw	r30, r22
     384:	11 82       	std	Z+1, r1	; 0x01
     386:	10 82       	st	Z, r1
     388:	08 95       	ret

0000038a <initLink>:
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	ec 01       	movw	r28, r24
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	01 d7       	rcall	.+3586   	; 0x1198 <malloc>
     396:	99 83       	std	Y+1, r25	; 0x01
     398:	88 83       	st	Y, r24
     39a:	fc 01       	movw	r30, r24
     39c:	13 82       	std	Z+3, r1	; 0x03
     39e:	12 82       	std	Z+2, r1	; 0x02
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <enqueue>:
     3a6:	db 01       	movw	r26, r22
     3a8:	ed 91       	ld	r30, X+
     3aa:	fc 91       	ld	r31, X
     3ac:	30 97       	sbiw	r30, 0x00	; 0
     3ae:	61 f0       	breq	.+24     	; 0x3c8 <enqueue+0x22>
     3b0:	da 01       	movw	r26, r20
     3b2:	8d 91       	ld	r24, X+
     3b4:	9c 91       	ld	r25, X
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	93 83       	std	Z+3, r25	; 0x03
     3ba:	82 83       	std	Z+2, r24	; 0x02
     3bc:	8d 91       	ld	r24, X+
     3be:	9c 91       	ld	r25, X
     3c0:	fb 01       	movw	r30, r22
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
     3c6:	08 95       	ret
     3c8:	da 01       	movw	r26, r20
     3ca:	2d 91       	ld	r18, X+
     3cc:	3c 91       	ld	r19, X
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	fc 01       	movw	r30, r24
     3d2:	31 83       	std	Z+1, r19	; 0x01
     3d4:	20 83       	st	Z, r18
     3d6:	8d 91       	ld	r24, X+
     3d8:	9c 91       	ld	r25, X
     3da:	db 01       	movw	r26, r22
     3dc:	8d 93       	st	X+, r24
     3de:	9c 93       	st	X, r25
     3e0:	08 95       	ret

000003e2 <dequeue>:
     3e2:	fc 01       	movw	r30, r24
     3e4:	80 81       	ld	r24, Z
     3e6:	91 81       	ldd	r25, Z+1	; 0x01
     3e8:	da 01       	movw	r26, r20
     3ea:	8d 93       	st	X+, r24
     3ec:	9c 93       	st	X, r25
     3ee:	a0 81       	ld	r26, Z
     3f0:	b1 81       	ldd	r27, Z+1	; 0x01
     3f2:	10 97       	sbiw	r26, 0x00	; 0
     3f4:	31 f0       	breq	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f6:	12 96       	adiw	r26, 0x02	; 2
     3f8:	8d 91       	ld	r24, X+
     3fa:	9c 91       	ld	r25, X
     3fc:	13 97       	sbiw	r26, 0x03	; 3
     3fe:	91 83       	std	Z+1, r25	; 0x01
     400:	80 83       	st	Z, r24
     402:	80 81       	ld	r24, Z
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	89 2b       	or	r24, r25
     408:	19 f4       	brne	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40a:	fb 01       	movw	r30, r22
     40c:	11 82       	std	Z+1, r1	; 0x01
     40e:	10 82       	st	Z, r1
     410:	08 95       	ret

00000412 <isEmpty>:
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
     412:	fc 01       	movw	r30, r24
     414:	20 81       	ld	r18, Z
     416:	31 81       	ldd	r19, Z+1	; 0x01
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	23 2b       	or	r18, r19
     41c:	09 f0       	breq	.+2      	; 0x420 <isEmpty+0xe>
     41e:	80 e0       	ldi	r24, 0x00	; 0
}/*isEmpty*/
     420:	08 95       	ret

00000422 <__vector_5>:
	cli( ); //disable interrupts
	return 0;

} //end main

ISR(INT4_vect){
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	8f 93       	push	r24
	STATE = 2;
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <STATE>
} //end ISR
     434:	8f 91       	pop	r24
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_2>:

ISR(INT1_vect){
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	0b b6       	in	r0, 0x3b	; 59
     44c:	0f 92       	push	r0
     44e:	2f 93       	push	r18
     450:	3f 93       	push	r19
     452:	4f 93       	push	r20
     454:	5f 93       	push	r21
     456:	6f 93       	push	r22
     458:	7f 93       	push	r23
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
     45e:	af 93       	push	r26
     460:	bf 93       	push	r27
     462:	ef 93       	push	r30
     464:	ff 93       	push	r31
	if(isEmpty(&head)==1){
     466:	84 e6       	ldi	r24, 0x64	; 100
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	d3 df       	rcall	.-90     	; 0x412 <isEmpty>
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	19 f4       	brne	.+6      	; 0x476 <__vector_2+0x36>
		STATE = 0;
     470:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <STATE>
     474:	0a c0       	rjmp	.+20     	; 0x48a <__vector_2+0x4a>
	}else if(isEmpty(&head)==0){
     476:	84 e6       	ldi	r24, 0x64	; 100
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	cb df       	rcall	.-106    	; 0x412 <isEmpty>
     47c:	81 11       	cpse	r24, r1
     47e:	05 c0       	rjmp	.+10     	; 0x48a <__vector_2+0x4a>
		PORTB = brake; // stop belt
     480:	88 e7       	ldi	r24, 0x78	; 120
     482:	85 b9       	out	0x05, r24	; 5
		STATE = 3;
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <STATE>
	}
} //end ISR*/
     48a:	ff 91       	pop	r31
     48c:	ef 91       	pop	r30
     48e:	bf 91       	pop	r27
     490:	af 91       	pop	r26
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	7f 91       	pop	r23
     498:	6f 91       	pop	r22
     49a:	5f 91       	pop	r21
     49c:	4f 91       	pop	r20
     49e:	3f 91       	pop	r19
     4a0:	2f 91       	pop	r18
     4a2:	0f 90       	pop	r0
     4a4:	0b be       	out	0x3b, r0	; 59
     4a6:	0f 90       	pop	r0
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	0f 90       	pop	r0
     4ac:	1f 90       	pop	r1
     4ae:	18 95       	reti

000004b0 <__vector_32>:
	//while((PIND&0x04)==0x04);
	//mTimer(20000); //debounce
	STATE = 0; // go to polling state
} //end ISR*/
	
ISR(TIMER3_COMPA_vect){
     4b0:	1f 92       	push	r1
     4b2:	0f 92       	push	r0
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	0f 92       	push	r0
     4b8:	11 24       	eor	r1, r1
     4ba:	0b b6       	in	r0, 0x3b	; 59
     4bc:	0f 92       	push	r0
     4be:	2f 93       	push	r18
     4c0:	3f 93       	push	r19
     4c2:	4f 93       	push	r20
     4c4:	5f 93       	push	r21
     4c6:	6f 93       	push	r22
     4c8:	7f 93       	push	r23
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27
     4d2:	ef 93       	push	r30
     4d4:	ff 93       	push	r31
	LCDClear();
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	64 de       	rcall	.-824    	; 0x1a4 <LCDByte>
	LCDWriteString("TIMER END");
     4dc:	8e e0       	ldi	r24, 0x0E	; 14
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	d9 de       	rcall	.-590    	; 0x294 <LCDWriteString>
	STATE = 5;
     4e2:	85 e0       	ldi	r24, 0x05	; 5
     4e4:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <STATE>
}//end ISR
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <__vector_29>:

ISR(ADC_vect){
     50e:	1f 92       	push	r1
     510:	0f 92       	push	r0
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	0f 92       	push	r0
     516:	11 24       	eor	r1, r1
     518:	0b b6       	in	r0, 0x3b	; 59
     51a:	0f 92       	push	r0
     51c:	2f 93       	push	r18
     51e:	3f 93       	push	r19
     520:	4f 93       	push	r20
     522:	5f 93       	push	r21
     524:	6f 93       	push	r22
     526:	7f 93       	push	r23
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
     52c:	af 93       	push	r26
     52e:	bf 93       	push	r27
     530:	ef 93       	push	r30
     532:	ff 93       	push	r31
	//pick lowest voltage reading (center of piece)
	ADC_low = ADCL;
     534:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <ADC_low+0x1>
     53e:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <ADC_low>
	ADC_high = ADCH;
     542:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ADC_high+0x1>
     54c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ADC_high>
	ADC_result = (ADC_high << 8) | ADC_low;//assign value to global variable
     550:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <ADC_high>
     554:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <ADC_high+0x1>
     558:	98 2f       	mov	r25, r24
     55a:	88 27       	eor	r24, r24
     55c:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <ADC_low>
     560:	30 91 e2 02 	lds	r19, 0x02E2	; 0x8002e2 <ADC_low+0x1>
     564:	82 2b       	or	r24, r18
     566:	93 2b       	or	r25, r19
     568:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <ADC_result+0x1>
     56c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <ADC_result>
	if(ADC_result<lowest){
     570:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <ADC_result>
     574:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <ADC_result+0x1>
     578:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
     57c:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     580:	28 17       	cp	r18, r24
     582:	39 07       	cpc	r19, r25
     584:	40 f4       	brcc	.+16     	; 0x596 <__vector_29+0x88>
		lowest = ADC_result;
     586:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <ADC_result>
     58a:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <ADC_result+0x1>
     58e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <lowest+0x1>
     592:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <lowest>
	}// end if
	if((PINE&0x10)==0x10){
     596:	64 9b       	sbis	0x0c, 4	; 12
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <__vector_29+0x98>
		ADCSRA |= _BV(ADSC);
     59a:	ea e7       	ldi	r30, 0x7A	; 122
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	80 64       	ori	r24, 0x40	; 64
     5a2:	80 83       	st	Z, r24
     5a4:	c9 c0       	rjmp	.+402    	; 0x738 <__vector_29+0x22a>
	}else{
		if(100>lowest){
     5a6:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
     5aa:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     5ae:	84 36       	cpi	r24, 0x64	; 100
     5b0:	91 05       	cpc	r25, r1
     5b2:	60 f5       	brcc	.+88     	; 0x60c <__vector_29+0xfe>
			LCDClear();
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	f5 dd       	rcall	.-1046   	; 0x1a4 <LCDByte>
			LCDWriteStringXY(0,0,"ALUMINUM");
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	d6 de       	rcall	.-596    	; 0x36c <LCDGotoXY>
     5c0:	88 e1       	ldi	r24, 0x18	; 24
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	67 de       	rcall	.-818    	; 0x294 <LCDWriteString>
			LCDWriteIntXY(0,1,lowest,4);
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	d0 de       	rcall	.-608    	; 0x36c <LCDGotoXY>
     5cc:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
     5d0:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     5d4:	64 e0       	ldi	r22, 0x04	; 4
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	6a de       	rcall	.-812    	; 0x2ae <LCDWriteInt>
     5da:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <newLink>
			newLink->p.cur_pos = 3; //alu
     5de:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <newLink+0x1>
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	91 83       	std	Z+1, r25	; 0x01
     5e8:	80 83       	st	Z, r24
     5ea:	4f ed       	ldi	r20, 0xDF	; 223
			enqueue(&head,&tail,&newLink);
     5ec:	52 e0       	ldi	r21, 0x02	; 2
     5ee:	60 e6       	ldi	r22, 0x60	; 96
     5f0:	72 e0       	ldi	r23, 0x02	; 2
     5f2:	84 e6       	ldi	r24, 0x64	; 100
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	d7 de       	rcall	.-594    	; 0x3a6 <enqueue>
     5f8:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num_belt>
			num_belt++;
     5fc:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <num_belt+0x1>
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <num_belt+0x1>
     606:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <num_belt>
     60a:	96 c0       	rjmp	.+300    	; 0x738 <__vector_29+0x22a>
			return;
     60c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
		}else if(650>lowest){
     610:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     614:	8a 38       	cpi	r24, 0x8A	; 138
     616:	92 40       	sbci	r25, 0x02	; 2
     618:	60 f5       	brcc	.+88     	; 0x672 <__vector_29+0x164>
			LCDClear();
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	c2 dd       	rcall	.-1148   	; 0x1a4 <LCDByte>
			LCDWriteStringXY(0,0,"STEEL");
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	a3 de       	rcall	.-698    	; 0x36c <LCDGotoXY>
     626:	81 e2       	ldi	r24, 0x21	; 33
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	34 de       	rcall	.-920    	; 0x294 <LCDWriteString>
     62c:	61 e0       	ldi	r22, 0x01	; 1
			LCDWriteIntXY(0,1,lowest,4);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	9d de       	rcall	.-710    	; 0x36c <LCDGotoXY>
     632:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
     636:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     63a:	64 e0       	ldi	r22, 0x04	; 4
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	37 de       	rcall	.-914    	; 0x2ae <LCDWriteInt>
     640:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <newLink>
			newLink->p.cur_pos = 1; //stl
     644:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <newLink+0x1>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	91 83       	std	Z+1, r25	; 0x01
     64e:	80 83       	st	Z, r24
     650:	4f ed       	ldi	r20, 0xDF	; 223
			enqueue(&head,&tail,&newLink);
     652:	52 e0       	ldi	r21, 0x02	; 2
     654:	60 e6       	ldi	r22, 0x60	; 96
     656:	72 e0       	ldi	r23, 0x02	; 2
     658:	84 e6       	ldi	r24, 0x64	; 100
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	a4 de       	rcall	.-696    	; 0x3a6 <enqueue>
     65e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num_belt>
			num_belt++;
     662:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <num_belt+0x1>
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <num_belt+0x1>
     66c:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <num_belt>
     670:	63 c0       	rjmp	.+198    	; 0x738 <__vector_29+0x22a>
			return;
     672:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
		}else if(930>lowest){
     676:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     67a:	82 3a       	cpi	r24, 0xA2	; 162
     67c:	93 40       	sbci	r25, 0x03	; 3
				LCDClear();
     67e:	60 f5       	brcc	.+88     	; 0x6d8 <__vector_29+0x1ca>
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	8f dd       	rcall	.-1250   	; 0x1a4 <LCDByte>
				LCDWriteStringXY(0,0,"WHITE");
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	70 de       	rcall	.-800    	; 0x36c <LCDGotoXY>
     68c:	87 e2       	ldi	r24, 0x27	; 39
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	01 de       	rcall	.-1022   	; 0x294 <LCDWriteString>
     692:	61 e0       	ldi	r22, 0x01	; 1
				LCDWriteIntXY(0,1,lowest,4);
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	6a de       	rcall	.-812    	; 0x36c <LCDGotoXY>
     698:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
     69c:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     6a0:	64 e0       	ldi	r22, 0x04	; 4
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	04 de       	rcall	.-1016   	; 0x2ae <LCDWriteInt>
     6a6:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <newLink>
				newLink->p.cur_pos = 2; //wht
     6aa:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <newLink+0x1>
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	91 83       	std	Z+1, r25	; 0x01
     6b4:	80 83       	st	Z, r24
     6b6:	4f ed       	ldi	r20, 0xDF	; 223
     6b8:	52 e0       	ldi	r21, 0x02	; 2
				enqueue(&head,&tail,&newLink);
     6ba:	60 e6       	ldi	r22, 0x60	; 96
     6bc:	72 e0       	ldi	r23, 0x02	; 2
     6be:	84 e6       	ldi	r24, 0x64	; 100
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	71 de       	rcall	.-798    	; 0x3a6 <enqueue>
     6c4:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num_belt>
     6c8:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <num_belt+0x1>
				num_belt++;
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <num_belt+0x1>
     6d2:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <num_belt>
     6d6:	30 c0       	rjmp	.+96     	; 0x738 <__vector_29+0x22a>
				return;
     6d8:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
		}else if(1024>lowest){
     6dc:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     6e0:	81 15       	cp	r24, r1
     6e2:	94 40       	sbci	r25, 0x04	; 4
     6e4:	48 f5       	brcc	.+82     	; 0x738 <__vector_29+0x22a>
			LCDClear();
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	5c dd       	rcall	.-1352   	; 0x1a4 <LCDByte>
			LCDWriteStringXY(0,0,"BLACK");
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	3d de       	rcall	.-902    	; 0x36c <LCDGotoXY>
     6f2:	8d e2       	ldi	r24, 0x2D	; 45
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	ce dd       	rcall	.-1124   	; 0x294 <LCDWriteString>
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	80 e0       	ldi	r24, 0x00	; 0
			LCDWriteIntXY(0,1,lowest,4);
     6fc:	37 de       	rcall	.-914    	; 0x36c <LCDGotoXY>
     6fe:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lowest>
     702:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <lowest+0x1>
     706:	64 e0       	ldi	r22, 0x04	; 4
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	d1 dd       	rcall	.-1118   	; 0x2ae <LCDWriteInt>
     70c:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <newLink>
     710:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <newLink+0x1>
			newLink->p.cur_pos = 0; //blk
     714:	11 82       	std	Z+1, r1	; 0x01
     716:	10 82       	st	Z, r1
     718:	4f ed       	ldi	r20, 0xDF	; 223
     71a:	52 e0       	ldi	r21, 0x02	; 2
     71c:	60 e6       	ldi	r22, 0x60	; 96
			enqueue(&head,&tail,&newLink);
     71e:	72 e0       	ldi	r23, 0x02	; 2
     720:	84 e6       	ldi	r24, 0x64	; 100
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	40 de       	rcall	.-896    	; 0x3a6 <enqueue>
     726:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num_belt>
     72a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <num_belt+0x1>
			num_belt++;
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <num_belt+0x1>
     734:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <num_belt>
     738:	ff 91       	pop	r31
     73a:	ef 91       	pop	r30
     73c:	bf 91       	pop	r27
     73e:	af 91       	pop	r26
			return;
		}
	}// end if/else
} //end ISR
     740:	9f 91       	pop	r25
     742:	8f 91       	pop	r24
     744:	7f 91       	pop	r23
     746:	6f 91       	pop	r22
     748:	5f 91       	pop	r21
     74a:	4f 91       	pop	r20
     74c:	3f 91       	pop	r19
     74e:	2f 91       	pop	r18
     750:	0f 90       	pop	r0
     752:	0b be       	out	0x3b, r0	; 59
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0
     75a:	1f 90       	pop	r1
     75c:	18 95       	reti

0000075e <__vector_default>:
     75e:	1f 92       	push	r1
     760:	0f 92       	push	r0
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	0f 92       	push	r0

ISR(BADISR_vect){
     766:	11 24       	eor	r1, r1
	//handle bad ISR triggers
} //end ISR
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <stopTimer>:
void stopTimer (){
	/***
      Setup Timer3 as a s timer
	  Using Interrupt Driven Method
   ***/
	TCCR3B |= _BV(WGM32); //set to CTC mode
     772:	e1 e9       	ldi	r30, 0x91	; 145
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	88 60       	ori	r24, 0x08	; 8
     77a:	80 83       	st	Z, r24
	
	//set prescale clock /1024
	TCCR3B |=_BV (CS30)|_BV (CS32);
     77c:	80 81       	ld	r24, Z
     77e:	85 60       	ori	r24, 0x05	; 5
     780:	80 83       	st	Z, r24
	
	//set compare register to 46875 cycles, 6s
	OCR3A = 0xB71B;
     782:	8b e1       	ldi	r24, 0x1B	; 27
     784:	97 eb       	ldi	r25, 0xB7	; 183
     786:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     78a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	
	/* Initialize Timer2 to zero */
	TCNT3 = 0x0000;
     78e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     792:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	//turn on timer compare A interrupt flag
	TIMSK3 = TIMSK3 | 0b00000010;
     796:	e1 e7       	ldi	r30, 0x71	; 113
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	82 60       	ori	r24, 0x02	; 2
     79e:	80 83       	st	Z, r24
     7a0:	08 95       	ret

000007a2 <mTimer>:
}


void mTimer(unsigned int count){
     7a2:	9c 01       	movw	r18, r24
	  Using polling method not Interrupt Driven
   ***/
  
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12); 
     7a4:	e1 e8       	ldi	r30, 0x81	; 129
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	90 81       	ld	r25, Z
     7aa:	98 60       	ori	r25, 0x08	; 8
     7ac:	90 83       	st	Z, r25

   OCR1A =count; // Timer value for 0.001ms resolution
     7ae:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     7b2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
   
   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
     7b6:	86 b3       	in	r24, 0x16	; 22
     7b8:	82 60       	ori	r24, 0x02	; 2
     7ba:	86 bb       	out	0x16, r24	; 22

   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
     7bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     7c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>



   /* Poll the timer to determine when the timer has reached 1ms */
   
   while((TIFR1 & 0x02) != 0x02);
     7c4:	b1 9b       	sbis	0x16, 1	; 22
     7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <mTimer+0x22>
   TIFR1 |= _BV(OCF1A);
     7c8:	86 b3       	in	r24, 0x16	; 22
     7ca:	82 60       	ori	r24, 0x02	; 2
     7cc:	86 bb       	out	0x16, r24	; 22
     7ce:	08 95       	ret

000007d0 <__vector_4>:
		PORTB = brake; // stop belt
		STATE = 3;
	}
} //end ISR*/

ISR(INT3_vect){
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	0b b6       	in	r0, 0x3b	; 59
     7dc:	0f 92       	push	r0
     7de:	2f 93       	push	r18
     7e0:	3f 93       	push	r19
     7e2:	4f 93       	push	r20
     7e4:	5f 93       	push	r21
     7e6:	6f 93       	push	r22
     7e8:	7f 93       	push	r23
     7ea:	8f 93       	push	r24
     7ec:	9f 93       	push	r25
     7ee:	af 93       	push	r26
     7f0:	bf 93       	push	r27
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31
	mTimer(20000); //debounce
     7f6:	80 e2       	ldi	r24, 0x20	; 32
     7f8:	9e e4       	ldi	r25, 0x4E	; 78
     7fa:	d3 df       	rcall	.-90     	; 0x7a2 <mTimer>
	STATE = 4;
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <STATE>
	while((PIND&0x08)==0x08);
     802:	4b 99       	sbic	0x09, 3	; 9
     804:	fe cf       	rjmp	.-4      	; 0x802 <__vector_4+0x32>
	mTimer(20000); //debounce
     806:	80 e2       	ldi	r24, 0x20	; 32
     808:	9e e4       	ldi	r25, 0x4E	; 78
     80a:	cb df       	rcall	.-106    	; 0x7a2 <mTimer>
} //end ISR
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0b be       	out	0x3b, r0	; 59
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <__vector_3>:

ISR(INT2_vect){ //rampdown
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	0b b6       	in	r0, 0x3b	; 59
     83e:	0f 92       	push	r0
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	4f 93       	push	r20
     846:	5f 93       	push	r21
     848:	6f 93       	push	r22
     84a:	7f 93       	push	r23
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	af 93       	push	r26
     852:	bf 93       	push	r27
     854:	ef 93       	push	r30
     856:	ff 93       	push	r31
	mTimer(20000); //debounce
     858:	80 e2       	ldi	r24, 0x20	; 32
     85a:	9e e4       	ldi	r25, 0x4E	; 78
     85c:	a2 df       	rcall	.-188    	; 0x7a2 <mTimer>
	//call timer function to start rampdown count
	stopTimer();
     85e:	89 df       	rcall	.-238    	; 0x772 <stopTimer>
     860:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <STATE>
	//while((PIND&0x04)==0x04);
	//mTimer(20000); //debounce
	STATE = 0; // go to polling state
     864:	ff 91       	pop	r31
} //end ISR*/
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0b be       	out	0x3b, r0	; 59
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <PWM>:
     88a:	84 b5       	in	r24, 0x24	; 36
	   
   return;
} //end mTimer

void PWM( ){
	TCCR0A |= _BV(WGM01)|_BV(WGM00); //selecting Fast PWN mode 3
     88c:	83 60       	ori	r24, 0x03	; 3
     88e:	84 bd       	out	0x24, r24	; 36
	//TIMSK0 |= _BV(OCIE0A); //enable output compare interrupt for timer0
	TCCR0A |= _BV(COM0A1);//set compare match output mode to clear and set output compare A when timer reaches TOP
     890:	84 b5       	in	r24, 0x24	; 36
     892:	80 68       	ori	r24, 0x80	; 128
     894:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);//sets prescale factor to 8
     896:	85 b5       	in	r24, 0x25	; 37
     898:	82 60       	ori	r24, 0x02	; 2
     89a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 196;//default duty cycle
     89c:	84 ec       	ldi	r24, 0xC4	; 196
     89e:	87 bd       	out	0x27, r24	; 39
     8a0:	08 95       	ret

000008a2 <CW>:
//i++
//slopes will be the same for 50 steps and for 100 steps
//must find the max speed of the stepper, this is when the stepper shuts down
//the max speed is not 0ms, 1ms, or 2ms, the min speed is 20ms

void CW(int NumSteps ){
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	8c 01       	movw	r16, r24
	int i = 0;
     8ac:	c0 e0       	ldi	r28, 0x00	; 0
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
	while(i<NumSteps){
     8b0:	35 c0       	rjmp	.+106    	; 0x91c <CW+0x7a>
		cur_pos++;
     8b2:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <cur_pos>
     8b6:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <cur_pos+0x1>
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <cur_pos+0x1>
     8c0:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <cur_pos>
		if(cur_pos==4){
     8c4:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <cur_pos>
     8c8:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <cur_pos+0x1>
     8cc:	04 97       	sbiw	r24, 0x04	; 4
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <CW+0x36>
			cur_pos=0;
     8d0:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <cur_pos+0x1>
     8d4:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <cur_pos>
		}
		PORTA = StepperTable[cur_pos];
     8d8:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <cur_pos>
     8dc:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <cur_pos+0x1>
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	ea 5f       	subi	r30, 0xFA	; 250
     8e6:	fd 4f       	sbci	r31, 0xFD	; 253
     8e8:	80 81       	ld	r24, Z
     8ea:	82 b9       	out	0x02, r24	; 2
		if(NumSteps==50){
     8ec:	02 33       	cpi	r16, 0x32	; 50
     8ee:	11 05       	cpc	r17, r1
     8f0:	49 f4       	brne	.+18     	; 0x904 <CW+0x62>
			mTimer(prof_50[i]);
     8f2:	fe 01       	movw	r30, r28
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	e8 59       	subi	r30, 0x98	; 152
     8fa:	fd 4f       	sbci	r31, 0xFD	; 253
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	50 df       	rcall	.-352    	; 0x7a2 <mTimer>
     902:	0b c0       	rjmp	.+22     	; 0x91a <CW+0x78>
		}else if(NumSteps==100){
     904:	04 36       	cpi	r16, 0x64	; 100
     906:	11 05       	cpc	r17, r1
     908:	41 f4       	brne	.+16     	; 0x91a <CW+0x78>
			mTimer(prof_100[i]);
     90a:	fe 01       	movw	r30, r28
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ed 51       	subi	r30, 0x1D	; 29
     912:	fd 4f       	sbci	r31, 0xFD	; 253
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	44 df       	rcall	.-376    	; 0x7a2 <mTimer>
		}
		i++;
     91a:	21 96       	adiw	r28, 0x01	; 1
//must find the max speed of the stepper, this is when the stepper shuts down
//the max speed is not 0ms, 1ms, or 2ms, the min speed is 20ms

void CW(int NumSteps ){
	int i = 0;
	while(i<NumSteps){
     91c:	c0 17       	cp	r28, r16
     91e:	d1 07       	cpc	r29, r17
     920:	44 f2       	brlt	.-112    	; 0x8b2 <CW+0x10>
		}else if(NumSteps==100){
			mTimer(prof_100[i]);
		}
		i++;
	} //end while
	cur_step_dir =0;
     922:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <cur_step_dir+0x1>
     926:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <cur_step_dir>
} //end CW
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	08 95       	ret

00000934 <CCW>:

void CCW(int NumSteps ){
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	8c 01       	movw	r16, r24
	int i = 0;
     93e:	c0 e0       	ldi	r28, 0x00	; 0
     940:	d0 e0       	ldi	r29, 0x00	; 0
	while(i<NumSteps){
     942:	37 c0       	rjmp	.+110    	; 0x9b2 <CCW+0x7e>
		cur_pos--;
     944:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <cur_pos>
     948:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <cur_pos+0x1>
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <cur_pos+0x1>
     952:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <cur_pos>
		if(cur_pos==-1){
     956:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <cur_pos>
     95a:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <cur_pos+0x1>
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	31 f4       	brne	.+12     	; 0x96e <CCW+0x3a>
			cur_pos=3;
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <cur_pos+0x1>
     96a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <cur_pos>
		}
		PORTA = StepperTable[cur_pos];
     96e:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <cur_pos>
     972:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <cur_pos+0x1>
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	ea 5f       	subi	r30, 0xFA	; 250
     97c:	fd 4f       	sbci	r31, 0xFD	; 253
     97e:	80 81       	ld	r24, Z
     980:	82 b9       	out	0x02, r24	; 2
		if(NumSteps==50){
     982:	02 33       	cpi	r16, 0x32	; 50
     984:	11 05       	cpc	r17, r1
     986:	49 f4       	brne	.+18     	; 0x99a <CCW+0x66>
			mTimer(prof_50[i]);
     988:	fe 01       	movw	r30, r28
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	e8 59       	subi	r30, 0x98	; 152
     990:	fd 4f       	sbci	r31, 0xFD	; 253
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	05 df       	rcall	.-502    	; 0x7a2 <mTimer>
     998:	0b c0       	rjmp	.+22     	; 0x9b0 <CCW+0x7c>
			}else if(NumSteps==100){
     99a:	04 36       	cpi	r16, 0x64	; 100
     99c:	11 05       	cpc	r17, r1
     99e:	41 f4       	brne	.+16     	; 0x9b0 <CCW+0x7c>
			mTimer(prof_100[i]);
     9a0:	fe 01       	movw	r30, r28
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	ed 51       	subi	r30, 0x1D	; 29
     9a8:	fd 4f       	sbci	r31, 0xFD	; 253
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	f9 de       	rcall	.-526    	; 0x7a2 <mTimer>
		}
		i++;
     9b0:	21 96       	adiw	r28, 0x01	; 1
	cur_step_dir =0;
} //end CW

void CCW(int NumSteps ){
	int i = 0;
	while(i<NumSteps){
     9b2:	c0 17       	cp	r28, r16
     9b4:	d1 07       	cpc	r29, r17
     9b6:	34 f2       	brlt	.-116    	; 0x944 <CCW+0x10>
			}else if(NumSteps==100){
			mTimer(prof_100[i]);
		}
		i++;
	}
	cur_step_dir =1;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <cur_step_dir+0x1>
     9c0:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <cur_step_dir>
} //end CCW
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <main>:
void stopTimer(); // initialize stopTimer
void PWM( ); //initialize PWM
void CW(int NumSteps); //initialize CW for stepper
void CCW(int NumSteps); //initialize CCW for stepper

int main(void){
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
	CLKPR = 0x80;
     9d6:	e1 e6       	ldi	r30, 0x61	; 97
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 e8       	ldi	r24, 0x80	; 128
     9dc:	80 83       	st	Z, r24
	CLKPR = 0x01; //set systems clock to 8 MHz
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 83       	st	Z, r24
	TCCR1B = _BV(CS11);
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	STATE = 0;
     9e8:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <STATE>
	
	//define stepper profiles
	prof_50[0]= 20000;
     9ec:	80 e2       	ldi	r24, 0x20	; 32
     9ee:	9e e4       	ldi	r25, 0x4E	; 78
     9f0:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <prof_50+0x1>
     9f4:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <prof_50>
	prof_100[0]= 20000;
     9f8:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <prof_100+0x1>
     9fc:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <prof_100>
	float slope_50 = 1500;
	float slope_100= 750;
	for(int i=1;i<51;i++){
     a00:	c1 e0       	ldi	r28, 0x01	; 1
     a02:	d0 e0       	ldi	r29, 0x00	; 0
     a04:	51 c0       	rjmp	.+162    	; 0xaa8 <main+0xda>
		if(i<11){
     a06:	cb 30       	cpi	r28, 0x0B	; 11
     a08:	d1 05       	cpc	r29, r1
     a0a:	e4 f4       	brge	.+56     	; 0xa44 <main+0x76>
			prof_50[i]= prof_50[i-1]-slope_50;
     a0c:	fe 01       	movw	r30, r28
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e8 59       	subi	r30, 0x98	; 152
     a16:	fd 4f       	sbci	r31, 0xFD	; 253
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	07 2e       	mov	r0, r23
     a1e:	00 0c       	add	r0, r0
     a20:	88 0b       	sbc	r24, r24
     a22:	99 0b       	sbc	r25, r25
     a24:	06 d3       	rcall	.+1548   	; 0x1032 <__floatsisf>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e8       	ldi	r19, 0x80	; 128
     a2a:	4b eb       	ldi	r20, 0xBB	; 187
     a2c:	54 e4       	ldi	r21, 0x44	; 68
     a2e:	69 d2       	rcall	.+1234   	; 0xf02 <__subsf3>
     a30:	8e 01       	movw	r16, r28
     a32:	00 0f       	add	r16, r16
     a34:	11 1f       	adc	r17, r17
     a36:	08 59       	subi	r16, 0x98	; 152
     a38:	1d 4f       	sbci	r17, 0xFD	; 253
     a3a:	c8 d2       	rcall	.+1424   	; 0xfcc <__fixsfsi>
     a3c:	f8 01       	movw	r30, r16
     a3e:	71 83       	std	Z+1, r23	; 0x01
     a40:	60 83       	st	Z, r22
     a42:	31 c0       	rjmp	.+98     	; 0xaa6 <main+0xd8>
		}else if(i<40){
     a44:	c8 32       	cpi	r28, 0x28	; 40
     a46:	d1 05       	cpc	r29, r1
     a48:	84 f4       	brge	.+32     	; 0xa6a <main+0x9c>
			prof_50[i]= prof_50[i-1];
     a4a:	fe 01       	movw	r30, r28
     a4c:	31 97       	sbiw	r30, 0x01	; 1
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	e8 59       	subi	r30, 0x98	; 152
     a54:	fd 4f       	sbci	r31, 0xFD	; 253
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	fe 01       	movw	r30, r28
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	e8 59       	subi	r30, 0x98	; 152
     a62:	fd 4f       	sbci	r31, 0xFD	; 253
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
     a68:	1e c0       	rjmp	.+60     	; 0xaa6 <main+0xd8>
		}else if(i>39){
     a6a:	c8 32       	cpi	r28, 0x28	; 40
     a6c:	d1 05       	cpc	r29, r1
     a6e:	dc f0       	brlt	.+54     	; 0xaa6 <main+0xd8>
		prof_50[i]= prof_50[i-1]+slope_50;
     a70:	fe 01       	movw	r30, r28
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	e8 59       	subi	r30, 0x98	; 152
     a7a:	fd 4f       	sbci	r31, 0xFD	; 253
     a7c:	60 81       	ld	r22, Z
     a7e:	71 81       	ldd	r23, Z+1	; 0x01
     a80:	07 2e       	mov	r0, r23
     a82:	00 0c       	add	r0, r0
     a84:	88 0b       	sbc	r24, r24
     a86:	99 0b       	sbc	r25, r25
     a88:	d4 d2       	rcall	.+1448   	; 0x1032 <__floatsisf>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e8       	ldi	r19, 0x80	; 128
     a8e:	4b eb       	ldi	r20, 0xBB	; 187
     a90:	54 e4       	ldi	r21, 0x44	; 68
     a92:	38 d2       	rcall	.+1136   	; 0xf04 <__addsf3>
     a94:	8e 01       	movw	r16, r28
     a96:	00 0f       	add	r16, r16
     a98:	11 1f       	adc	r17, r17
     a9a:	08 59       	subi	r16, 0x98	; 152
     a9c:	1d 4f       	sbci	r17, 0xFD	; 253
     a9e:	96 d2       	rcall	.+1324   	; 0xfcc <__fixsfsi>
     aa0:	f8 01       	movw	r30, r16
     aa2:	71 83       	std	Z+1, r23	; 0x01
     aa4:	60 83       	st	Z, r22
	//define stepper profiles
	prof_50[0]= 20000;
	prof_100[0]= 20000;
	float slope_50 = 1500;
	float slope_100= 750;
	for(int i=1;i<51;i++){
     aa6:	21 96       	adiw	r28, 0x01	; 1
     aa8:	c3 33       	cpi	r28, 0x33	; 51
     aaa:	d1 05       	cpc	r29, r1
     aac:	0c f4       	brge	.+2      	; 0xab0 <main+0xe2>
     aae:	ab cf       	rjmp	.-170    	; 0xa06 <main+0x38>
     ab0:	c1 e0       	ldi	r28, 0x01	; 1
     ab2:	d0 e0       	ldi	r29, 0x00	; 0
     ab4:	51 c0       	rjmp	.+162    	; 0xb58 <main+0x18a>
		}else if(i>39){
		prof_50[i]= prof_50[i-1]+slope_50;
		}
	}
	for(int i=1;i<101;i++){
		if(i<21){
     ab6:	c5 31       	cpi	r28, 0x15	; 21
     ab8:	d1 05       	cpc	r29, r1
     aba:	e4 f4       	brge	.+56     	; 0xaf4 <main+0x126>
			prof_100[i]= prof_100[i-1]-slope_100;
     abc:	fe 01       	movw	r30, r28
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	ed 51       	subi	r30, 0x1D	; 29
     ac6:	fd 4f       	sbci	r31, 0xFD	; 253
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	07 2e       	mov	r0, r23
     ace:	00 0c       	add	r0, r0
     ad0:	88 0b       	sbc	r24, r24
     ad2:	99 0b       	sbc	r25, r25
     ad4:	ae d2       	rcall	.+1372   	; 0x1032 <__floatsisf>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e8       	ldi	r19, 0x80	; 128
     ada:	4b e3       	ldi	r20, 0x3B	; 59
     adc:	54 e4       	ldi	r21, 0x44	; 68
     ade:	11 d2       	rcall	.+1058   	; 0xf02 <__subsf3>
     ae0:	8e 01       	movw	r16, r28
     ae2:	00 0f       	add	r16, r16
     ae4:	11 1f       	adc	r17, r17
     ae6:	0d 51       	subi	r16, 0x1D	; 29
     ae8:	1d 4f       	sbci	r17, 0xFD	; 253
     aea:	70 d2       	rcall	.+1248   	; 0xfcc <__fixsfsi>
     aec:	f8 01       	movw	r30, r16
     aee:	71 83       	std	Z+1, r23	; 0x01
     af0:	60 83       	st	Z, r22
     af2:	31 c0       	rjmp	.+98     	; 0xb56 <main+0x188>
			}else if(i<80){
     af4:	c0 35       	cpi	r28, 0x50	; 80
     af6:	d1 05       	cpc	r29, r1
     af8:	84 f4       	brge	.+32     	; 0xb1a <main+0x14c>
			prof_100[i]= prof_100[i-1];
     afa:	fe 01       	movw	r30, r28
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	ed 51       	subi	r30, 0x1D	; 29
     b04:	fd 4f       	sbci	r31, 0xFD	; 253
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	fe 01       	movw	r30, r28
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	ed 51       	subi	r30, 0x1D	; 29
     b12:	fd 4f       	sbci	r31, 0xFD	; 253
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
     b18:	1e c0       	rjmp	.+60     	; 0xb56 <main+0x188>
			}else if(i>79){
     b1a:	c0 35       	cpi	r28, 0x50	; 80
     b1c:	d1 05       	cpc	r29, r1
     b1e:	dc f0       	brlt	.+54     	; 0xb56 <main+0x188>
			prof_100[i]= prof_100[i-1]+slope_100;
     b20:	fe 01       	movw	r30, r28
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ed 51       	subi	r30, 0x1D	; 29
     b2a:	fd 4f       	sbci	r31, 0xFD	; 253
     b2c:	60 81       	ld	r22, Z
     b2e:	71 81       	ldd	r23, Z+1	; 0x01
     b30:	07 2e       	mov	r0, r23
     b32:	00 0c       	add	r0, r0
     b34:	88 0b       	sbc	r24, r24
     b36:	99 0b       	sbc	r25, r25
     b38:	7c d2       	rcall	.+1272   	; 0x1032 <__floatsisf>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e8       	ldi	r19, 0x80	; 128
     b3e:	4b e3       	ldi	r20, 0x3B	; 59
     b40:	54 e4       	ldi	r21, 0x44	; 68
     b42:	e0 d1       	rcall	.+960    	; 0xf04 <__addsf3>
     b44:	8e 01       	movw	r16, r28
     b46:	00 0f       	add	r16, r16
     b48:	11 1f       	adc	r17, r17
     b4a:	0d 51       	subi	r16, 0x1D	; 29
     b4c:	1d 4f       	sbci	r17, 0xFD	; 253
     b4e:	3e d2       	rcall	.+1148   	; 0xfcc <__fixsfsi>
     b50:	f8 01       	movw	r30, r16
     b52:	71 83       	std	Z+1, r23	; 0x01
     b54:	60 83       	st	Z, r22
			prof_50[i]= prof_50[i-1];
		}else if(i>39){
		prof_50[i]= prof_50[i-1]+slope_50;
		}
	}
	for(int i=1;i<101;i++){
     b56:	21 96       	adiw	r28, 0x01	; 1
     b58:	c5 36       	cpi	r28, 0x65	; 101
     b5a:	d1 05       	cpc	r29, r1
     b5c:	0c f4       	brge	.+2      	; 0xb60 <main+0x192>
			prof_100[i]= prof_100[i-1]+slope_100;
		}
	}
	
	//set ports to input or output
	DDRA = 0x00; //sets PORTA to input
     b5e:	ab cf       	rjmp	.-170    	; 0xab6 <main+0xe8>
	DDRF = 0x00; //sets PORTF to input
     b60:	11 b8       	out	0x01, r1	; 1
	DDRC = 0xff; //set the PORTC as output
     b62:	10 ba       	out	0x10, r1	; 16
	DDRB = 0xff; //set the PORTB as output
     b64:	8f ef       	ldi	r24, 0xFF	; 255
	DDRD = 0x00; //set the PORTD as input
     b66:	87 b9       	out	0x07, r24	; 7
	
	PWM( ); //generate PWM
     b68:	84 b9       	out	0x04, r24	; 4
     b6a:	1a b8       	out	0x0a, r1	; 10
	InitLCD(LS_BLINK|LS_ULINE); //Initialize LCD module
     b6c:	8e de       	rcall	.-740    	; 0x88a <PWM>
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	50 db       	rcall	.-2400   	; 0x212 <InitLCD>
	LCDClear();//Clear the screen
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	16 db       	rcall	.-2516   	; 0x1a4 <LCDByte>
     b78:	83 e3       	ldi	r24, 0x33	; 51
	LCDWriteString("hello");
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	8b db       	rcall	.-2282   	; 0x294 <LCDWriteString>
     b7e:	f8 94       	cli
     b80:	8d b3       	in	r24, 0x1d	; 29
	cli( ); //disable interrupts
     b82:	84 60       	ori	r24, 0x04	; 4
	// config the external interrupt ======================================
	EIMSK |= (_BV(INT2)); // enable INT2 (LEFT button - RAMP DOWN SYSTEM)
     b84:	8d bb       	out	0x1d, r24	; 29
     b86:	e9 e6       	ldi	r30, 0x69	; 105
     b88:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (_BV(ISC21)); // falling edge interrupt
     b8a:	80 81       	ld	r24, Z
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	80 83       	st	Z, r24
     b90:	8d b3       	in	r24, 0x1d	; 29
     b92:	88 60       	ori	r24, 0x08	; 8
	EIMSK |= (_BV(INT3)); // enable INT3 (RIGHT button - PAUSE SYSTEM)
     b94:	8d bb       	out	0x1d, r24	; 29
     b96:	80 81       	ld	r24, Z
     b98:	80 6c       	ori	r24, 0xC0	; 192
	EICRA |= (_BV(ISC31) | _BV(ISC30)); //rising edge interrupt
     b9a:	80 83       	st	Z, r24
     b9c:	8d b3       	in	r24, 0x1d	; 29
     b9e:	82 60       	ori	r24, 0x02	; 2
	EIMSK |= (_BV(INT1)); // enable INT1 (EX Sensor)
     ba0:	8d bb       	out	0x1d, r24	; 29
     ba2:	80 81       	ld	r24, Z
     ba4:	88 60       	ori	r24, 0x08	; 8
	EICRA |= (_BV(ISC11)); //falling edge interrupt
     ba6:	80 83       	st	Z, r24
     ba8:	8d b3       	in	r24, 0x1d	; 29
     baa:	80 61       	ori	r24, 0x10	; 16
	EIMSK |= (_BV(INT4)); // enable INT4 (OR Sensor)
     bac:	8d bb       	out	0x1d, r24	; 29
     bae:	ea e6       	ldi	r30, 0x6A	; 106
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
	EICRB |= (_BV(ISC41) | _BV(ISC40)); // rising edge interrupt
     bb2:	80 81       	ld	r24, Z
     bb4:	83 60       	ori	r24, 0x03	; 3
     bb6:	80 83       	st	Z, r24
     bb8:	ea e7       	ldi	r30, 0x7A	; 122
     bba:	f0 e0       	ldi	r31, 0x00	; 0

	
	//configure RL sensor interrupt
	ADCSRA |= _BV(ADEN); //enable ADC (RL sensor)
     bbc:	80 81       	ld	r24, Z
     bbe:	80 68       	ori	r24, 0x80	; 128
     bc0:	80 83       	st	Z, r24
     bc2:	80 81       	ld	r24, Z
     bc4:	88 60       	ori	r24, 0x08	; 8
	ADCSRA |= _BV(ADIE); //configure ADC interrupt
     bc6:	80 83       	st	Z, r24
     bc8:	ec e7       	ldi	r30, 0x7C	; 124
     bca:	f0 e0       	ldi	r31, 0x00	; 0
	ADMUX |= _BV(REFS0); //set REFS0 to 1, selects voltage for ADC, ADLAR = 0 
     bcc:	80 81       	ld	r24, Z
     bce:	80 64       	ori	r24, 0x40	; 64
     bd0:	80 83       	st	Z, r24
     bd2:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <rtnLink+0x1>
	
	rtnLink = NULL;
     bd6:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <rtnLink>
     bda:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <newLink+0x1>
	newLink = NULL;
     bde:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <newLink>
     be2:	60 e6       	ldi	r22, 0x60	; 96
	setup(&head,&tail);
     be4:	72 e0       	ldi	r23, 0x02	; 2
     be6:	84 e6       	ldi	r24, 0x64	; 100
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	c8 db       	rcall	.-2160   	; 0x37c <setup>
     bec:	8f ed       	ldi	r24, 0xDF	; 223
     bee:	92 e0       	ldi	r25, 0x02	; 2
	initLink(&newLink);
     bf0:	cc db       	rcall	.-2152   	; 0x38a <initLink>
     bf2:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <step_pos+0x1>
     bf6:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <step_pos>
	
	step_pos = 0; //inital stepper position
     bfa:	78 94       	sei
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <STATE>
	
	sei( ); //enable all interrupts
	
	STATE=1;
     c02:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <STATE>
     c06:	83 30       	cpi	r24, 0x03	; 3
	
	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	switch(STATE){
     c08:	09 f4       	brne	.+2      	; 0xc0c <main+0x23e>
     c0a:	43 c0       	rjmp	.+134    	; 0xc92 <main+0x2c4>
     c0c:	28 f4       	brcc	.+10     	; 0xc18 <main+0x24a>
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	51 f0       	breq	.+20     	; 0xc26 <main+0x258>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	69 f1       	breq	.+90     	; 0xc70 <main+0x2a2>
     c16:	f5 cf       	rjmp	.-22     	; 0xc02 <main+0x234>
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	09 f4       	brne	.+2      	; 0xc1e <main+0x250>
     c1c:	b8 c0       	rjmp	.+368    	; 0xd8e <main+0x3c0>
     c1e:	85 30       	cpi	r24, 0x05	; 5
     c20:	09 f4       	brne	.+2      	; 0xc24 <main+0x256>
     c22:	1b c1       	rjmp	.+566    	; 0xe5a <main+0x48c>
     c24:	ee cf       	rjmp	.-36     	; 0xc02 <main+0x234>
     c26:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <cur_pos+0x1>
		default :
		goto POLLING_STAGE;
	}//switch STATE

	HOMING_STAGE: //for homing stepper
	cur_pos = 0;
     c2a:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <cur_pos>
     c2e:	81 e0       	ldi	r24, 0x01	; 1
	cur_step_dir = 1;//CCW
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <cur_step_dir+0x1>
     c36:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <cur_step_dir>
	while((PIND&0b10000000)==0b10000000){
     c3a:	06 c0       	rjmp	.+12     	; 0xc48 <main+0x27a>
		CCW(1);
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	79 de       	rcall	.-782    	; 0x934 <CCW>
     c42:	80 e2       	ldi	r24, 0x20	; 32
		mTimer(20000);
     c44:	9e e4       	ldi	r25, 0x4E	; 78
     c46:	ad dd       	rcall	.-1190   	; 0x7a2 <mTimer>
     c48:	4f 99       	sbic	0x09, 7	; 9
     c4a:	f8 cf       	rjmp	.-16     	; 0xc3c <main+0x26e>
	}//switch STATE

	HOMING_STAGE: //for homing stepper
	cur_pos = 0;
	cur_step_dir = 1;//CCW
	while((PIND&0b10000000)==0b10000000){
     c4c:	c0 e0       	ldi	r28, 0x00	; 0
     c4e:	d0 e0       	ldi	r29, 0x00	; 0
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <main+0x292>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
		CCW(1);
		mTimer(20000);
	}
	int center = 0;
	while(center < 4){
		CCW(1);
     c56:	6e de       	rcall	.-804    	; 0x934 <CCW>
     c58:	80 e2       	ldi	r24, 0x20	; 32
     c5a:	9e e4       	ldi	r25, 0x4E	; 78
		mTimer(20000);
     c5c:	a2 dd       	rcall	.-1212   	; 0x7a2 <mTimer>
     c5e:	21 96       	adiw	r28, 0x01	; 1
     c60:	c4 30       	cpi	r28, 0x04	; 4
     c62:	d1 05       	cpc	r29, r1
		center++;
     c64:	b4 f3       	brlt	.-20     	; 0xc52 <main+0x284>
	while((PIND&0b10000000)==0b10000000){
		CCW(1);
		mTimer(20000);
	}
	int center = 0;
	while(center < 4){
     c66:	80 e7       	ldi	r24, 0x70	; 112
     c68:	85 b9       	out	0x05, r24	; 5
     c6a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <STATE>
		CCW(1);
		mTimer(20000);
		center++;
	}
	PORTB = DC_CCW;
     c6e:	c9 cf       	rjmp	.-110    	; 0xc02 <main+0x234>
	//Reset the state variable
	STATE = 0;
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	93 e0       	ldi	r25, 0x03	; 3
	goto POLLING_STAGE;
     c74:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <lowest+0x1>

	REFLECTIVE_STAGE:
	// Do whatever is necessary HERE
	lowest = 1023;
     c78:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <lowest>
     c7c:	8f ed       	ldi	r24, 0xDF	; 223
     c7e:	92 e0       	ldi	r25, 0x02	; 2
	initLink(&newLink);
     c80:	84 db       	rcall	.-2296   	; 0x38a <initLink>
     c82:	ea e7       	ldi	r30, 0x7A	; 122
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
	ADCSRA |= _BV(ADSC); //starts conversion
     c88:	80 64       	ori	r24, 0x40	; 64
     c8a:	80 83       	st	Z, r24
     c8c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <STATE>
     c90:	b8 cf       	rjmp	.-144    	; 0xc02 <main+0x234>
	//Reset the state variable
	STATE = 0;
     c92:	4c e5       	ldi	r20, 0x5C	; 92
     c94:	52 e0       	ldi	r21, 0x02	; 2
	goto POLLING_STAGE;
     c96:	60 e6       	ldi	r22, 0x60	; 96
	
	BUCKET_STAGE:
	//must initialize with black and then turn to next
	dequeue(&head,&tail,&rtnLink);
     c98:	72 e0       	ldi	r23, 0x02	; 2
     c9a:	84 e6       	ldi	r24, 0x64	; 100
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	a1 db       	rcall	.-2238   	; 0x3e2 <dequeue>
     ca0:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num_belt>
     ca4:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <num_belt+0x1>
	num_belt--;
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <num_belt+0x1>
     cae:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <num_belt>
     cb2:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <rtnLink>
     cb6:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <rtnLink+0x1>
	nxt = rtnLink->p.cur_pos;
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
     cbe:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <nxt+0x1>
     cc2:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <nxt>
     cc6:	01 90       	ld	r0, Z+
     cc8:	f0 81       	ld	r31, Z
     cca:	e0 2d       	mov	r30, r0
     ccc:	ee 0f       	add	r30, r30
	sorted[rtnLink->p.cur_pos]++;
     cce:	ff 1f       	adc	r31, r31
     cd0:	e6 5b       	subi	r30, 0xB6	; 182
     cd2:	fd 4f       	sbci	r31, 0xFD	; 253
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
     cde:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <step_pos>
	int diff = step_pos-nxt;
     ce2:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <step_pos+0x1>
     ce6:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <nxt>
     cea:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <nxt+0x1>
     cee:	82 1b       	sub	r24, r18
     cf0:	93 0b       	sbc	r25, r19
     cf2:	81 30       	cpi	r24, 0x01	; 1
	if(diff == 1|| diff==-3){
     cf4:	91 05       	cpc	r25, r1
     cf6:	21 f0       	breq	.+8      	; 0xd00 <main+0x332>
     cf8:	8d 3f       	cpi	r24, 0xFD	; 253
     cfa:	ff ef       	ldi	r31, 0xFF	; 255
     cfc:	9f 07       	cpc	r25, r31
     cfe:	39 f4       	brne	.+14     	; 0xd0e <main+0x340>
		CW(50);
     d00:	82 e3       	ldi	r24, 0x32	; 50
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	ce dd       	rcall	.-1124   	; 0x8a2 <CW>
     d06:	80 e1       	ldi	r24, 0x10	; 16
		mTimer(10000); 
     d08:	97 e2       	ldi	r25, 0x27	; 39
     d0a:	4b dd       	rcall	.-1386   	; 0x7a2 <mTimer>
     d0c:	2c c0       	rjmp	.+88     	; 0xd66 <main+0x398>
     d0e:	8f 3f       	cpi	r24, 0xFF	; 255
     d10:	2f ef       	ldi	r18, 0xFF	; 255
	}else if(diff == -1|| diff == 3){
     d12:	92 07       	cpc	r25, r18
     d14:	19 f0       	breq	.+6      	; 0xd1c <main+0x34e>
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	91 05       	cpc	r25, r1
     d1a:	39 f4       	brne	.+14     	; 0xd2a <main+0x35c>
		CCW(50);
     d1c:	82 e3       	ldi	r24, 0x32	; 50
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	09 de       	rcall	.-1006   	; 0x934 <CCW>
     d22:	80 e1       	ldi	r24, 0x10	; 16
		mTimer(10000);  
     d24:	97 e2       	ldi	r25, 0x27	; 39
     d26:	3d dd       	rcall	.-1414   	; 0x7a2 <mTimer>
     d28:	1e c0       	rjmp	.+60     	; 0xd66 <main+0x398>
     d2a:	82 30       	cpi	r24, 0x02	; 2
	}else if(diff==2||diff==-2){
     d2c:	91 05       	cpc	r25, r1
     d2e:	11 f0       	breq	.+4      	; 0xd34 <main+0x366>
     d30:	02 96       	adiw	r24, 0x02	; 2
     d32:	c9 f4       	brne	.+50     	; 0xd66 <main+0x398>
		if(cur_step_dir==1){
     d34:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <cur_step_dir>
     d38:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <cur_step_dir+0x1>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	39 f4       	brne	.+14     	; 0xd4e <main+0x380>
			CCW(100);
     d40:	84 e6       	ldi	r24, 0x64	; 100
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	f7 dd       	rcall	.-1042   	; 0x934 <CCW>
     d46:	80 e1       	ldi	r24, 0x10	; 16
			mTimer(10000); 
     d48:	97 e2       	ldi	r25, 0x27	; 39
     d4a:	2b dd       	rcall	.-1450   	; 0x7a2 <mTimer>
     d4c:	0c c0       	rjmp	.+24     	; 0xd66 <main+0x398>
     d4e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <cur_step_dir>
		}else if(cur_step_dir==0){
     d52:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <cur_step_dir+0x1>
     d56:	89 2b       	or	r24, r25
     d58:	31 f4       	brne	.+12     	; 0xd66 <main+0x398>
     d5a:	84 e6       	ldi	r24, 0x64	; 100
			CW(100);
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a1 dd       	rcall	.-1214   	; 0x8a2 <CW>
     d60:	80 e1       	ldi	r24, 0x10	; 16
     d62:	97 e2       	ldi	r25, 0x27	; 39
			mTimer(10000);
     d64:	1e dd       	rcall	.-1476   	; 0x7a2 <mTimer>
     d66:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <rtnLink>
     d6a:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <rtnLink+0x1>
		} 
	}else if(diff == 0){
		//stay in the same position
	}
	step_pos = rtnLink->p.cur_pos;
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <step_pos+0x1>
     d76:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <step_pos>
     d7a:	80 e7       	ldi	r24, 0x70	; 112
     d7c:	85 b9       	out	0x05, r24	; 5
	PORTB=DC_CCW; //start belt
     d7e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <rtnLink>
	//Reset the state variable
	free(rtnLink);
     d82:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <rtnLink+0x1>
     d86:	a0 d2       	rcall	.+1344   	; 0x12c8 <free>
     d88:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <STATE>
	STATE = 0;
	goto POLLING_STAGE;
     d8c:	3a cf       	rjmp	.-396    	; 0xc02 <main+0x234>
	
	PAUSE_STAGE:
	prev = PORTB;
     d8e:	85 b1       	in	r24, 0x05	; 5
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <prev+0x1>
	if(prev==DC_CCW){
     d96:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <prev>
     d9a:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <prev>
     d9e:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <prev+0x1>
		PORTB = brake;
     da2:	80 37       	cpi	r24, 0x70	; 112
		LCDClear();
     da4:	91 05       	cpc	r25, r1
     da6:	09 f0       	breq	.+2      	; 0xdaa <main+0x3dc>
     da8:	50 c0       	rjmp	.+160    	; 0xe4a <main+0x47c>
		LCDWriteStringXY(0,0,"BELT");
     daa:	88 e7       	ldi	r24, 0x78	; 120
     dac:	85 b9       	out	0x05, r24	; 5
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	f8 d9       	rcall	.-3088   	; 0x1a4 <LCDByte>
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
		LCDWriteStringXY(5,0,"BL");
     db8:	d9 da       	rcall	.-2638   	; 0x36c <LCDGotoXY>
     dba:	89 e3       	ldi	r24, 0x39	; 57
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	6a da       	rcall	.-2860   	; 0x294 <LCDWriteString>
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	85 e0       	ldi	r24, 0x05	; 5
     dc4:	d3 da       	rcall	.-2650   	; 0x36c <LCDGotoXY>
		LCDWriteStringXY(8,0,"ST");
     dc6:	8e e3       	ldi	r24, 0x3E	; 62
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	64 da       	rcall	.-2872   	; 0x294 <LCDWriteString>
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	cd da       	rcall	.-2662   	; 0x36c <LCDGotoXY>
     dd2:	81 e4       	ldi	r24, 0x41	; 65
		LCDWriteStringXY(11,0,"AL");
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	5e da       	rcall	.-2884   	; 0x294 <LCDWriteString>
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	8b e0       	ldi	r24, 0x0B	; 11
     ddc:	c7 da       	rcall	.-2674   	; 0x36c <LCDGotoXY>
     dde:	84 e4       	ldi	r24, 0x44	; 68
     de0:	92 e0       	ldi	r25, 0x02	; 2
		LCDWriteStringXY(14,0,"WT");
     de2:	58 da       	rcall	.-2896   	; 0x294 <LCDWriteString>
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	8e e0       	ldi	r24, 0x0E	; 14
     de8:	c1 da       	rcall	.-2686   	; 0x36c <LCDGotoXY>
     dea:	87 e4       	ldi	r24, 0x47	; 71
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	52 da       	rcall	.-2908   	; 0x294 <LCDWriteString>
		LCDWriteIntXY(0,1,num_belt,2);
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	bb da       	rcall	.-2698   	; 0x36c <LCDGotoXY>
     df6:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <num_belt>
     dfa:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <num_belt+0x1>
     dfe:	62 e0       	ldi	r22, 0x02	; 2
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	55 da       	rcall	.-2902   	; 0x2ae <LCDWriteInt>
     e04:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteIntXY(5,1,sorted[0],2);
     e06:	85 e0       	ldi	r24, 0x05	; 5
     e08:	b1 da       	rcall	.-2718   	; 0x36c <LCDGotoXY>
     e0a:	ca e4       	ldi	r28, 0x4A	; 74
     e0c:	d2 e0       	ldi	r29, 0x02	; 2
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	88 81       	ld	r24, Y
     e14:	99 81       	ldd	r25, Y+1	; 0x01
     e16:	4b da       	rcall	.-2922   	; 0x2ae <LCDWriteInt>
		LCDWriteIntXY(8,1,sorted[1],2);
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	a7 da       	rcall	.-2738   	; 0x36c <LCDGotoXY>
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	9b 81       	ldd	r25, Y+3	; 0x03
		LCDWriteIntXY(11,1,sorted[3],2);
     e26:	43 da       	rcall	.-2938   	; 0x2ae <LCDWriteInt>
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	8b e0       	ldi	r24, 0x0B	; 11
     e2c:	9f da       	rcall	.-2754   	; 0x36c <LCDGotoXY>
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	9f 81       	ldd	r25, Y+7	; 0x07
		LCDWriteIntXY(14,1,sorted[2],2);
     e36:	3b da       	rcall	.-2954   	; 0x2ae <LCDWriteInt>
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	8e e0       	ldi	r24, 0x0E	; 14
     e3c:	97 da       	rcall	.-2770   	; 0x36c <LCDGotoXY>
     e3e:	62 e0       	ldi	r22, 0x02	; 2
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	9d 81       	ldd	r25, Y+5	; 0x05
     e46:	33 da       	rcall	.-2970   	; 0x2ae <LCDWriteInt>
		
		}else{
		PORTB=DC_CCW;
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <main+0x486>
     e4a:	80 e7       	ldi	r24, 0x70	; 112
		LCDClear();
     e4c:	85 b9       	out	0x05, r24	; 5
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
	}//end of if
	//Reset the state variable
	
	STATE = 0;
     e52:	a8 d9       	rcall	.-3248   	; 0x1a4 <LCDByte>
     e54:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <STATE>
	goto POLLING_STAGE;
	
	END:
	PORTB = disable;
	LCDClear();
     e58:	d4 ce       	rjmp	.-600    	; 0xc02 <main+0x234>
     e5a:	15 b8       	out	0x05, r1	; 5
     e5c:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteStringXY(0,0,"BELT");
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	a1 d9       	rcall	.-3262   	; 0x1a4 <LCDByte>
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	82 da       	rcall	.-2812   	; 0x36c <LCDGotoXY>
     e68:	89 e3       	ldi	r24, 0x39	; 57
     e6a:	92 e0       	ldi	r25, 0x02	; 2
	LCDWriteStringXY(5,0,"BL");
     e6c:	13 da       	rcall	.-3034   	; 0x294 <LCDWriteString>
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	85 e0       	ldi	r24, 0x05	; 5
     e72:	7c da       	rcall	.-2824   	; 0x36c <LCDGotoXY>
     e74:	8e e3       	ldi	r24, 0x3E	; 62
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	0d da       	rcall	.-3046   	; 0x294 <LCDWriteString>
	LCDWriteStringXY(8,0,"ST");
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	76 da       	rcall	.-2836   	; 0x36c <LCDGotoXY>
     e80:	81 e4       	ldi	r24, 0x41	; 65
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	07 da       	rcall	.-3058   	; 0x294 <LCDWriteString>
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	8b e0       	ldi	r24, 0x0B	; 11
	LCDWriteStringXY(11,0,"AL");
     e8a:	70 da       	rcall	.-2848   	; 0x36c <LCDGotoXY>
     e8c:	84 e4       	ldi	r24, 0x44	; 68
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	01 da       	rcall	.-3070   	; 0x294 <LCDWriteString>
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	8e e0       	ldi	r24, 0x0E	; 14
     e96:	6a da       	rcall	.-2860   	; 0x36c <LCDGotoXY>
     e98:	87 e4       	ldi	r24, 0x47	; 71
	LCDWriteStringXY(14,0,"WT");
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	fb d9       	rcall	.-3082   	; 0x294 <LCDWriteString>
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	64 da       	rcall	.-2872   	; 0x36c <LCDGotoXY>
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	80 e0       	ldi	r24, 0x00	; 0
	LCDWriteIntXY(0,1,0,2);
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	00 da       	rcall	.-3072   	; 0x2ae <LCDWriteInt>
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	85 e0       	ldi	r24, 0x05	; 5
     eb2:	5c da       	rcall	.-2888   	; 0x36c <LCDGotoXY>
     eb4:	ca e4       	ldi	r28, 0x4A	; 74
     eb6:	d2 e0       	ldi	r29, 0x02	; 2
     eb8:	62 e0       	ldi	r22, 0x02	; 2
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	88 81       	ld	r24, Y
	LCDWriteIntXY(5,1,sorted[0],2);
     ebe:	99 81       	ldd	r25, Y+1	; 0x01
     ec0:	f6 d9       	rcall	.-3092   	; 0x2ae <LCDWriteInt>
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	52 da       	rcall	.-2908   	; 0x36c <LCDGotoXY>
     ec8:	62 e0       	ldi	r22, 0x02	; 2
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	ee d9       	rcall	.-3108   	; 0x2ae <LCDWriteInt>
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	8b e0       	ldi	r24, 0x0B	; 11
	LCDWriteIntXY(8,1,sorted[1],2);
     ed6:	4a da       	rcall	.-2924   	; 0x36c <LCDGotoXY>
     ed8:	62 e0       	ldi	r22, 0x02	; 2
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	e6 d9       	rcall	.-3124   	; 0x2ae <LCDWriteInt>
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	8e e0       	ldi	r24, 0x0E	; 14
     ee6:	42 da       	rcall	.-2940   	; 0x36c <LCDGotoXY>
     ee8:	62 e0       	ldi	r22, 0x02	; 2
	LCDWriteIntXY(11,1,sorted[3],2);
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	9d 81       	ldd	r25, Y+5	; 0x05
     ef0:	de d9       	rcall	.-3140   	; 0x2ae <LCDWriteInt>
     ef2:	f8 94       	cli
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
	LCDWriteIntXY(14,1,sorted[2],2);
     efe:	0f 91       	pop	r16
     f00:	08 95       	ret

00000f02 <__subsf3>:
     f02:	50 58       	subi	r21, 0x80	; 128

00000f04 <__addsf3>:
     f04:	bb 27       	eor	r27, r27
     f06:	aa 27       	eor	r26, r26
     f08:	0e d0       	rcall	.+28     	; 0xf26 <__addsf3x>
     f0a:	e5 c0       	rjmp	.+458    	; 0x10d6 <__fp_round>
     f0c:	d6 d0       	rcall	.+428    	; 0x10ba <__fp_pscA>
     f0e:	30 f0       	brcs	.+12     	; 0xf1c <__addsf3+0x18>
     f10:	db d0       	rcall	.+438    	; 0x10c8 <__fp_pscB>
	
	cli( ); //disable interrupts
     f12:	20 f0       	brcs	.+8      	; 0xf1c <__addsf3+0x18>
	return 0;

} //end main
     f14:	31 f4       	brne	.+12     	; 0xf22 <__addsf3+0x1e>
     f16:	9f 3f       	cpi	r25, 0xFF	; 255
     f18:	11 f4       	brne	.+4      	; 0xf1e <__addsf3+0x1a>
     f1a:	1e f4       	brtc	.+6      	; 0xf22 <__addsf3+0x1e>
     f1c:	cb c0       	rjmp	.+406    	; 0x10b4 <__fp_nan>
     f1e:	0e f4       	brtc	.+2      	; 0xf22 <__addsf3+0x1e>
     f20:	e0 95       	com	r30
     f22:	e7 fb       	bst	r30, 7
     f24:	c1 c0       	rjmp	.+386    	; 0x10a8 <__fp_inf>

00000f26 <__addsf3x>:
     f26:	e9 2f       	mov	r30, r25
     f28:	e7 d0       	rcall	.+462    	; 0x10f8 <__fp_split3>
     f2a:	80 f3       	brcs	.-32     	; 0xf0c <__addsf3+0x8>
     f2c:	ba 17       	cp	r27, r26
     f2e:	62 07       	cpc	r22, r18
     f30:	73 07       	cpc	r23, r19
     f32:	84 07       	cpc	r24, r20
     f34:	95 07       	cpc	r25, r21
     f36:	18 f0       	brcs	.+6      	; 0xf3e <__addsf3x+0x18>
     f38:	71 f4       	brne	.+28     	; 0xf56 <__addsf3x+0x30>
     f3a:	9e f5       	brtc	.+102    	; 0xfa2 <__addsf3x+0x7c>
     f3c:	ff c0       	rjmp	.+510    	; 0x113c <__fp_zero>
     f3e:	0e f4       	brtc	.+2      	; 0xf42 <__addsf3x+0x1c>
     f40:	e0 95       	com	r30
     f42:	0b 2e       	mov	r0, r27
     f44:	ba 2f       	mov	r27, r26
     f46:	a0 2d       	mov	r26, r0
     f48:	0b 01       	movw	r0, r22
     f4a:	b9 01       	movw	r22, r18
     f4c:	90 01       	movw	r18, r0
     f4e:	0c 01       	movw	r0, r24
     f50:	ca 01       	movw	r24, r20
     f52:	a0 01       	movw	r20, r0
     f54:	11 24       	eor	r1, r1
     f56:	ff 27       	eor	r31, r31
     f58:	59 1b       	sub	r21, r25
     f5a:	99 f0       	breq	.+38     	; 0xf82 <__addsf3x+0x5c>
     f5c:	59 3f       	cpi	r21, 0xF9	; 249
     f5e:	50 f4       	brcc	.+20     	; 0xf74 <__addsf3x+0x4e>
     f60:	50 3e       	cpi	r21, 0xE0	; 224
     f62:	68 f1       	brcs	.+90     	; 0xfbe <__addsf3x+0x98>
     f64:	1a 16       	cp	r1, r26
     f66:	f0 40       	sbci	r31, 0x00	; 0
     f68:	a2 2f       	mov	r26, r18
     f6a:	23 2f       	mov	r18, r19
     f6c:	34 2f       	mov	r19, r20
     f6e:	44 27       	eor	r20, r20
     f70:	58 5f       	subi	r21, 0xF8	; 248
     f72:	f3 cf       	rjmp	.-26     	; 0xf5a <__addsf3x+0x34>
     f74:	46 95       	lsr	r20
     f76:	37 95       	ror	r19
     f78:	27 95       	ror	r18
     f7a:	a7 95       	ror	r26
     f7c:	f0 40       	sbci	r31, 0x00	; 0
     f7e:	53 95       	inc	r21
     f80:	c9 f7       	brne	.-14     	; 0xf74 <__addsf3x+0x4e>
     f82:	7e f4       	brtc	.+30     	; 0xfa2 <__addsf3x+0x7c>
     f84:	1f 16       	cp	r1, r31
     f86:	ba 0b       	sbc	r27, r26
     f88:	62 0b       	sbc	r22, r18
     f8a:	73 0b       	sbc	r23, r19
     f8c:	84 0b       	sbc	r24, r20
     f8e:	ba f0       	brmi	.+46     	; 0xfbe <__addsf3x+0x98>
     f90:	91 50       	subi	r25, 0x01	; 1
     f92:	a1 f0       	breq	.+40     	; 0xfbc <__addsf3x+0x96>
     f94:	ff 0f       	add	r31, r31
     f96:	bb 1f       	adc	r27, r27
     f98:	66 1f       	adc	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	c2 f7       	brpl	.-16     	; 0xf90 <__addsf3x+0x6a>
     fa0:	0e c0       	rjmp	.+28     	; 0xfbe <__addsf3x+0x98>
     fa2:	ba 0f       	add	r27, r26
     fa4:	62 1f       	adc	r22, r18
     fa6:	73 1f       	adc	r23, r19
     fa8:	84 1f       	adc	r24, r20
     faa:	48 f4       	brcc	.+18     	; 0xfbe <__addsf3x+0x98>
     fac:	87 95       	ror	r24
     fae:	77 95       	ror	r23
     fb0:	67 95       	ror	r22
     fb2:	b7 95       	ror	r27
     fb4:	f7 95       	ror	r31
     fb6:	9e 3f       	cpi	r25, 0xFE	; 254
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <__addsf3x+0x96>
     fba:	b3 cf       	rjmp	.-154    	; 0xf22 <__addsf3+0x1e>
     fbc:	93 95       	inc	r25
     fbe:	88 0f       	add	r24, r24
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <__addsf3x+0x9e>
     fc2:	99 27       	eor	r25, r25
     fc4:	ee 0f       	add	r30, r30
     fc6:	97 95       	ror	r25
     fc8:	87 95       	ror	r24
     fca:	08 95       	ret

00000fcc <__fixsfsi>:
     fcc:	04 d0       	rcall	.+8      	; 0xfd6 <__fixunssfsi>
     fce:	68 94       	set
     fd0:	b1 11       	cpse	r27, r1
     fd2:	b5 c0       	rjmp	.+362    	; 0x113e <__fp_szero>
     fd4:	08 95       	ret

00000fd6 <__fixunssfsi>:
     fd6:	98 d0       	rcall	.+304    	; 0x1108 <__fp_splitA>
     fd8:	88 f0       	brcs	.+34     	; 0xffc <__fixunssfsi+0x26>
     fda:	9f 57       	subi	r25, 0x7F	; 127
     fdc:	90 f0       	brcs	.+36     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     fde:	b9 2f       	mov	r27, r25
     fe0:	99 27       	eor	r25, r25
     fe2:	b7 51       	subi	r27, 0x17	; 23
     fe4:	a0 f0       	brcs	.+40     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fe6:	d1 f0       	breq	.+52     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
     fe8:	66 0f       	add	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	88 1f       	adc	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	1a f0       	brmi	.+6      	; 0xff8 <__fixunssfsi+0x22>
     ff2:	ba 95       	dec	r27
     ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__fixunssfsi+0x12>
     ff6:	12 c0       	rjmp	.+36     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
     ff8:	b1 30       	cpi	r27, 0x01	; 1
     ffa:	81 f0       	breq	.+32     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
     ffc:	9f d0       	rcall	.+318    	; 0x113c <__fp_zero>
     ffe:	b1 e0       	ldi	r27, 0x01	; 1
    1000:	08 95       	ret
    1002:	9c c0       	rjmp	.+312    	; 0x113c <__fp_zero>
    1004:	67 2f       	mov	r22, r23
    1006:	78 2f       	mov	r23, r24
    1008:	88 27       	eor	r24, r24
    100a:	b8 5f       	subi	r27, 0xF8	; 248
    100c:	39 f0       	breq	.+14     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    100e:	b9 3f       	cpi	r27, 0xF9	; 249
    1010:	cc f3       	brlt	.-14     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b3 95       	inc	r27
    101a:	d9 f7       	brne	.-10     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    101c:	3e f4       	brtc	.+14     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    101e:	90 95       	com	r25
    1020:	80 95       	com	r24
    1022:	70 95       	com	r23
    1024:	61 95       	neg	r22
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	08 95       	ret

0000102e <__floatunsisf>:
    102e:	e8 94       	clt
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <__floatsisf+0x12>

00001032 <__floatsisf>:
    1032:	97 fb       	bst	r25, 7
    1034:	3e f4       	brtc	.+14     	; 0x1044 <__floatsisf+0x12>
    1036:	90 95       	com	r25
    1038:	80 95       	com	r24
    103a:	70 95       	com	r23
    103c:	61 95       	neg	r22
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	8f 4f       	sbci	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	99 23       	and	r25, r25
    1046:	a9 f0       	breq	.+42     	; 0x1072 <__floatsisf+0x40>
    1048:	f9 2f       	mov	r31, r25
    104a:	96 e9       	ldi	r25, 0x96	; 150
    104c:	bb 27       	eor	r27, r27
    104e:	93 95       	inc	r25
    1050:	f6 95       	lsr	r31
    1052:	87 95       	ror	r24
    1054:	77 95       	ror	r23
    1056:	67 95       	ror	r22
    1058:	b7 95       	ror	r27
    105a:	f1 11       	cpse	r31, r1
    105c:	f8 cf       	rjmp	.-16     	; 0x104e <__floatsisf+0x1c>
    105e:	fa f4       	brpl	.+62     	; 0x109e <__floatsisf+0x6c>
    1060:	bb 0f       	add	r27, r27
    1062:	11 f4       	brne	.+4      	; 0x1068 <__floatsisf+0x36>
    1064:	60 ff       	sbrs	r22, 0
    1066:	1b c0       	rjmp	.+54     	; 0x109e <__floatsisf+0x6c>
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	8f 4f       	sbci	r24, 0xFF	; 255
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	16 c0       	rjmp	.+44     	; 0x109e <__floatsisf+0x6c>
    1072:	88 23       	and	r24, r24
    1074:	11 f0       	breq	.+4      	; 0x107a <__floatsisf+0x48>
    1076:	96 e9       	ldi	r25, 0x96	; 150
    1078:	11 c0       	rjmp	.+34     	; 0x109c <__floatsisf+0x6a>
    107a:	77 23       	and	r23, r23
    107c:	21 f0       	breq	.+8      	; 0x1086 <__floatsisf+0x54>
    107e:	9e e8       	ldi	r25, 0x8E	; 142
    1080:	87 2f       	mov	r24, r23
    1082:	76 2f       	mov	r23, r22
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <__floatsisf+0x5e>
    1086:	66 23       	and	r22, r22
    1088:	71 f0       	breq	.+28     	; 0x10a6 <__floatsisf+0x74>
    108a:	96 e8       	ldi	r25, 0x86	; 134
    108c:	86 2f       	mov	r24, r22
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	2a f0       	brmi	.+10     	; 0x109e <__floatsisf+0x6c>
    1094:	9a 95       	dec	r25
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	da f7       	brpl	.-10     	; 0x1094 <__floatsisf+0x62>
    109e:	88 0f       	add	r24, r24
    10a0:	96 95       	lsr	r25
    10a2:	87 95       	ror	r24
    10a4:	97 f9       	bld	r25, 7
    10a6:	08 95       	ret

000010a8 <__fp_inf>:
    10a8:	97 f9       	bld	r25, 7
    10aa:	9f 67       	ori	r25, 0x7F	; 127
    10ac:	80 e8       	ldi	r24, 0x80	; 128
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	08 95       	ret

000010b4 <__fp_nan>:
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
    10b6:	80 ec       	ldi	r24, 0xC0	; 192
    10b8:	08 95       	ret

000010ba <__fp_pscA>:
    10ba:	00 24       	eor	r0, r0
    10bc:	0a 94       	dec	r0
    10be:	16 16       	cp	r1, r22
    10c0:	17 06       	cpc	r1, r23
    10c2:	18 06       	cpc	r1, r24
    10c4:	09 06       	cpc	r0, r25
    10c6:	08 95       	ret

000010c8 <__fp_pscB>:
    10c8:	00 24       	eor	r0, r0
    10ca:	0a 94       	dec	r0
    10cc:	12 16       	cp	r1, r18
    10ce:	13 06       	cpc	r1, r19
    10d0:	14 06       	cpc	r1, r20
    10d2:	05 06       	cpc	r0, r21
    10d4:	08 95       	ret

000010d6 <__fp_round>:
    10d6:	09 2e       	mov	r0, r25
    10d8:	03 94       	inc	r0
    10da:	00 0c       	add	r0, r0
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <__fp_round+0xc>
    10de:	88 23       	and	r24, r24
    10e0:	52 f0       	brmi	.+20     	; 0x10f6 <__fp_round+0x20>
    10e2:	bb 0f       	add	r27, r27
    10e4:	40 f4       	brcc	.+16     	; 0x10f6 <__fp_round+0x20>
    10e6:	bf 2b       	or	r27, r31
    10e8:	11 f4       	brne	.+4      	; 0x10ee <__fp_round+0x18>
    10ea:	60 ff       	sbrs	r22, 0
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <__fp_round+0x20>
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8f 4f       	sbci	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	08 95       	ret

000010f8 <__fp_split3>:
    10f8:	57 fd       	sbrc	r21, 7
    10fa:	90 58       	subi	r25, 0x80	; 128
    10fc:	44 0f       	add	r20, r20
    10fe:	55 1f       	adc	r21, r21
    1100:	59 f0       	breq	.+22     	; 0x1118 <__fp_splitA+0x10>
    1102:	5f 3f       	cpi	r21, 0xFF	; 255
    1104:	71 f0       	breq	.+28     	; 0x1122 <__fp_splitA+0x1a>
    1106:	47 95       	ror	r20

00001108 <__fp_splitA>:
    1108:	88 0f       	add	r24, r24
    110a:	97 fb       	bst	r25, 7
    110c:	99 1f       	adc	r25, r25
    110e:	61 f0       	breq	.+24     	; 0x1128 <__fp_splitA+0x20>
    1110:	9f 3f       	cpi	r25, 0xFF	; 255
    1112:	79 f0       	breq	.+30     	; 0x1132 <__fp_splitA+0x2a>
    1114:	87 95       	ror	r24
    1116:	08 95       	ret
    1118:	12 16       	cp	r1, r18
    111a:	13 06       	cpc	r1, r19
    111c:	14 06       	cpc	r1, r20
    111e:	55 1f       	adc	r21, r21
    1120:	f2 cf       	rjmp	.-28     	; 0x1106 <__fp_split3+0xe>
    1122:	46 95       	lsr	r20
    1124:	f1 df       	rcall	.-30     	; 0x1108 <__fp_splitA>
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <__fp_splitA+0x30>
    1128:	16 16       	cp	r1, r22
    112a:	17 06       	cpc	r1, r23
    112c:	18 06       	cpc	r1, r24
    112e:	99 1f       	adc	r25, r25
    1130:	f1 cf       	rjmp	.-30     	; 0x1114 <__fp_splitA+0xc>
    1132:	86 95       	lsr	r24
    1134:	71 05       	cpc	r23, r1
    1136:	61 05       	cpc	r22, r1
    1138:	08 94       	sec
    113a:	08 95       	ret

0000113c <__fp_zero>:
    113c:	e8 94       	clt

0000113e <__fp_szero>:
    113e:	bb 27       	eor	r27, r27
    1140:	66 27       	eor	r22, r22
    1142:	77 27       	eor	r23, r23
    1144:	cb 01       	movw	r24, r22
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret

0000114a <__divmodhi4>:
    114a:	97 fb       	bst	r25, 7
    114c:	07 2e       	mov	r0, r23
    114e:	16 f4       	brtc	.+4      	; 0x1154 <__divmodhi4+0xa>
    1150:	00 94       	com	r0
    1152:	06 d0       	rcall	.+12     	; 0x1160 <__divmodhi4_neg1>
    1154:	77 fd       	sbrc	r23, 7
    1156:	08 d0       	rcall	.+16     	; 0x1168 <__divmodhi4_neg2>
    1158:	0b d0       	rcall	.+22     	; 0x1170 <__udivmodhi4>
    115a:	07 fc       	sbrc	r0, 7
    115c:	05 d0       	rcall	.+10     	; 0x1168 <__divmodhi4_neg2>
    115e:	3e f4       	brtc	.+14     	; 0x116e <__divmodhi4_exit>

00001160 <__divmodhi4_neg1>:
    1160:	90 95       	com	r25
    1162:	81 95       	neg	r24
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	08 95       	ret

00001168 <__divmodhi4_neg2>:
    1168:	70 95       	com	r23
    116a:	61 95       	neg	r22
    116c:	7f 4f       	sbci	r23, 0xFF	; 255

0000116e <__divmodhi4_exit>:
    116e:	08 95       	ret

00001170 <__udivmodhi4>:
    1170:	aa 1b       	sub	r26, r26
    1172:	bb 1b       	sub	r27, r27
    1174:	51 e1       	ldi	r21, 0x11	; 17
    1176:	07 c0       	rjmp	.+14     	; 0x1186 <__udivmodhi4_ep>

00001178 <__udivmodhi4_loop>:
    1178:	aa 1f       	adc	r26, r26
    117a:	bb 1f       	adc	r27, r27
    117c:	a6 17       	cp	r26, r22
    117e:	b7 07       	cpc	r27, r23
    1180:	10 f0       	brcs	.+4      	; 0x1186 <__udivmodhi4_ep>
    1182:	a6 1b       	sub	r26, r22
    1184:	b7 0b       	sbc	r27, r23

00001186 <__udivmodhi4_ep>:
    1186:	88 1f       	adc	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	5a 95       	dec	r21
    118c:	a9 f7       	brne	.-22     	; 0x1178 <__udivmodhi4_loop>
    118e:	80 95       	com	r24
    1190:	90 95       	com	r25
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	08 95       	ret

00001198 <malloc>:
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	91 05       	cpc	r25, r1
    11a4:	10 f4       	brcc	.+4      	; 0x11aa <malloc+0x12>
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	e0 91 af 03 	lds	r30, 0x03AF	; 0x8003af <__flp>
    11ae:	f0 91 b0 03 	lds	r31, 0x03B0	; 0x8003b0 <__flp+0x1>
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	19 f1       	breq	.+70     	; 0x1204 <malloc+0x6c>
    11be:	40 81       	ld	r20, Z
    11c0:	51 81       	ldd	r21, Z+1	; 0x01
    11c2:	02 81       	ldd	r16, Z+2	; 0x02
    11c4:	13 81       	ldd	r17, Z+3	; 0x03
    11c6:	48 17       	cp	r20, r24
    11c8:	59 07       	cpc	r21, r25
    11ca:	c8 f0       	brcs	.+50     	; 0x11fe <malloc+0x66>
    11cc:	84 17       	cp	r24, r20
    11ce:	95 07       	cpc	r25, r21
    11d0:	69 f4       	brne	.+26     	; 0x11ec <malloc+0x54>
    11d2:	10 97       	sbiw	r26, 0x00	; 0
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <malloc+0x4a>
    11d6:	12 96       	adiw	r26, 0x02	; 2
    11d8:	0c 93       	st	X, r16
    11da:	12 97       	sbiw	r26, 0x02	; 2
    11dc:	13 96       	adiw	r26, 0x03	; 3
    11de:	1c 93       	st	X, r17
    11e0:	27 c0       	rjmp	.+78     	; 0x1230 <malloc+0x98>
    11e2:	00 93 af 03 	sts	0x03AF, r16	; 0x8003af <__flp>
    11e6:	10 93 b0 03 	sts	0x03B0, r17	; 0x8003b0 <__flp+0x1>
    11ea:	22 c0       	rjmp	.+68     	; 0x1230 <malloc+0x98>
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <malloc+0x60>
    11f2:	42 17       	cp	r20, r18
    11f4:	53 07       	cpc	r21, r19
    11f6:	18 f4       	brcc	.+6      	; 0x11fe <malloc+0x66>
    11f8:	9a 01       	movw	r18, r20
    11fa:	bd 01       	movw	r22, r26
    11fc:	ef 01       	movw	r28, r30
    11fe:	df 01       	movw	r26, r30
    1200:	f8 01       	movw	r30, r16
    1202:	db cf       	rjmp	.-74     	; 0x11ba <malloc+0x22>
    1204:	21 15       	cp	r18, r1
    1206:	31 05       	cpc	r19, r1
    1208:	f9 f0       	breq	.+62     	; 0x1248 <malloc+0xb0>
    120a:	28 1b       	sub	r18, r24
    120c:	39 0b       	sbc	r19, r25
    120e:	24 30       	cpi	r18, 0x04	; 4
    1210:	31 05       	cpc	r19, r1
    1212:	80 f4       	brcc	.+32     	; 0x1234 <malloc+0x9c>
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	61 15       	cp	r22, r1
    121a:	71 05       	cpc	r23, r1
    121c:	21 f0       	breq	.+8      	; 0x1226 <malloc+0x8e>
    121e:	fb 01       	movw	r30, r22
    1220:	93 83       	std	Z+3, r25	; 0x03
    1222:	82 83       	std	Z+2, r24	; 0x02
    1224:	04 c0       	rjmp	.+8      	; 0x122e <malloc+0x96>
    1226:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <__flp+0x1>
    122a:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <__flp>
    122e:	fe 01       	movw	r30, r28
    1230:	32 96       	adiw	r30, 0x02	; 2
    1232:	44 c0       	rjmp	.+136    	; 0x12bc <malloc+0x124>
    1234:	fe 01       	movw	r30, r28
    1236:	e2 0f       	add	r30, r18
    1238:	f3 1f       	adc	r31, r19
    123a:	81 93       	st	Z+, r24
    123c:	91 93       	st	Z+, r25
    123e:	22 50       	subi	r18, 0x02	; 2
    1240:	31 09       	sbc	r19, r1
    1242:	39 83       	std	Y+1, r19	; 0x01
    1244:	28 83       	st	Y, r18
    1246:	3a c0       	rjmp	.+116    	; 0x12bc <malloc+0x124>
    1248:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <__brkval>
    124c:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <__brkval+0x1>
    1250:	23 2b       	or	r18, r19
    1252:	41 f4       	brne	.+16     	; 0x1264 <malloc+0xcc>
    1254:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1258:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    125c:	30 93 ae 03 	sts	0x03AE, r19	; 0x8003ae <__brkval+0x1>
    1260:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <__brkval>
    1264:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1268:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    126c:	21 15       	cp	r18, r1
    126e:	31 05       	cpc	r19, r1
    1270:	41 f4       	brne	.+16     	; 0x1282 <malloc+0xea>
    1272:	2d b7       	in	r18, 0x3d	; 61
    1274:	3e b7       	in	r19, 0x3e	; 62
    1276:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    127a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    127e:	24 1b       	sub	r18, r20
    1280:	35 0b       	sbc	r19, r21
    1282:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <__brkval>
    1286:	f0 91 ae 03 	lds	r31, 0x03AE	; 0x8003ae <__brkval+0x1>
    128a:	e2 17       	cp	r30, r18
    128c:	f3 07       	cpc	r31, r19
    128e:	a0 f4       	brcc	.+40     	; 0x12b8 <malloc+0x120>
    1290:	2e 1b       	sub	r18, r30
    1292:	3f 0b       	sbc	r19, r31
    1294:	28 17       	cp	r18, r24
    1296:	39 07       	cpc	r19, r25
    1298:	78 f0       	brcs	.+30     	; 0x12b8 <malloc+0x120>
    129a:	ac 01       	movw	r20, r24
    129c:	4e 5f       	subi	r20, 0xFE	; 254
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	24 17       	cp	r18, r20
    12a2:	35 07       	cpc	r19, r21
    12a4:	48 f0       	brcs	.+18     	; 0x12b8 <malloc+0x120>
    12a6:	4e 0f       	add	r20, r30
    12a8:	5f 1f       	adc	r21, r31
    12aa:	50 93 ae 03 	sts	0x03AE, r21	; 0x8003ae <__brkval+0x1>
    12ae:	40 93 ad 03 	sts	0x03AD, r20	; 0x8003ad <__brkval>
    12b2:	81 93       	st	Z+, r24
    12b4:	91 93       	st	Z+, r25
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <malloc+0x124>
    12b8:	e0 e0       	ldi	r30, 0x00	; 0
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	cf 01       	movw	r24, r30
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <free>:
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <free+0xa>
    12d0:	81 c0       	rjmp	.+258    	; 0x13d4 <free+0x10c>
    12d2:	fc 01       	movw	r30, r24
    12d4:	32 97       	sbiw	r30, 0x02	; 2
    12d6:	13 82       	std	Z+3, r1	; 0x03
    12d8:	12 82       	std	Z+2, r1	; 0x02
    12da:	a0 91 af 03 	lds	r26, 0x03AF	; 0x8003af <__flp>
    12de:	b0 91 b0 03 	lds	r27, 0x03B0	; 0x8003b0 <__flp+0x1>
    12e2:	10 97       	sbiw	r26, 0x00	; 0
    12e4:	81 f4       	brne	.+32     	; 0x1306 <free+0x3e>
    12e6:	20 81       	ld	r18, Z
    12e8:	31 81       	ldd	r19, Z+1	; 0x01
    12ea:	82 0f       	add	r24, r18
    12ec:	93 1f       	adc	r25, r19
    12ee:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <__brkval>
    12f2:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <__brkval+0x1>
    12f6:	28 17       	cp	r18, r24
    12f8:	39 07       	cpc	r19, r25
    12fa:	51 f5       	brne	.+84     	; 0x1350 <free+0x88>
    12fc:	f0 93 ae 03 	sts	0x03AE, r31	; 0x8003ae <__brkval+0x1>
    1300:	e0 93 ad 03 	sts	0x03AD, r30	; 0x8003ad <__brkval>
    1304:	67 c0       	rjmp	.+206    	; 0x13d4 <free+0x10c>
    1306:	ed 01       	movw	r28, r26
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	ce 17       	cp	r28, r30
    130e:	df 07       	cpc	r29, r31
    1310:	40 f4       	brcc	.+16     	; 0x1322 <free+0x5a>
    1312:	4a 81       	ldd	r20, Y+2	; 0x02
    1314:	5b 81       	ldd	r21, Y+3	; 0x03
    1316:	9e 01       	movw	r18, r28
    1318:	41 15       	cp	r20, r1
    131a:	51 05       	cpc	r21, r1
    131c:	f1 f0       	breq	.+60     	; 0x135a <free+0x92>
    131e:	ea 01       	movw	r28, r20
    1320:	f5 cf       	rjmp	.-22     	; 0x130c <free+0x44>
    1322:	d3 83       	std	Z+3, r29	; 0x03
    1324:	c2 83       	std	Z+2, r28	; 0x02
    1326:	40 81       	ld	r20, Z
    1328:	51 81       	ldd	r21, Z+1	; 0x01
    132a:	84 0f       	add	r24, r20
    132c:	95 1f       	adc	r25, r21
    132e:	c8 17       	cp	r28, r24
    1330:	d9 07       	cpc	r29, r25
    1332:	59 f4       	brne	.+22     	; 0x134a <free+0x82>
    1334:	88 81       	ld	r24, Y
    1336:	99 81       	ldd	r25, Y+1	; 0x01
    1338:	84 0f       	add	r24, r20
    133a:	95 1f       	adc	r25, r21
    133c:	02 96       	adiw	r24, 0x02	; 2
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	9b 81       	ldd	r25, Y+3	; 0x03
    1346:	93 83       	std	Z+3, r25	; 0x03
    1348:	82 83       	std	Z+2, r24	; 0x02
    134a:	21 15       	cp	r18, r1
    134c:	31 05       	cpc	r19, r1
    134e:	29 f4       	brne	.+10     	; 0x135a <free+0x92>
    1350:	f0 93 b0 03 	sts	0x03B0, r31	; 0x8003b0 <__flp+0x1>
    1354:	e0 93 af 03 	sts	0x03AF, r30	; 0x8003af <__flp>
    1358:	3d c0       	rjmp	.+122    	; 0x13d4 <free+0x10c>
    135a:	e9 01       	movw	r28, r18
    135c:	fb 83       	std	Y+3, r31	; 0x03
    135e:	ea 83       	std	Y+2, r30	; 0x02
    1360:	49 91       	ld	r20, Y+
    1362:	59 91       	ld	r21, Y+
    1364:	c4 0f       	add	r28, r20
    1366:	d5 1f       	adc	r29, r21
    1368:	ec 17       	cp	r30, r28
    136a:	fd 07       	cpc	r31, r29
    136c:	61 f4       	brne	.+24     	; 0x1386 <free+0xbe>
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	84 0f       	add	r24, r20
    1374:	95 1f       	adc	r25, r21
    1376:	02 96       	adiw	r24, 0x02	; 2
    1378:	e9 01       	movw	r28, r18
    137a:	99 83       	std	Y+1, r25	; 0x01
    137c:	88 83       	st	Y, r24
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	9b 83       	std	Y+3, r25	; 0x03
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	e0 e0       	ldi	r30, 0x00	; 0
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	12 96       	adiw	r26, 0x02	; 2
    138c:	8d 91       	ld	r24, X+
    138e:	9c 91       	ld	r25, X
    1390:	13 97       	sbiw	r26, 0x03	; 3
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	19 f0       	breq	.+6      	; 0x139c <free+0xd4>
    1396:	fd 01       	movw	r30, r26
    1398:	dc 01       	movw	r26, r24
    139a:	f7 cf       	rjmp	.-18     	; 0x138a <free+0xc2>
    139c:	8d 91       	ld	r24, X+
    139e:	9c 91       	ld	r25, X
    13a0:	11 97       	sbiw	r26, 0x01	; 1
    13a2:	9d 01       	movw	r18, r26
    13a4:	2e 5f       	subi	r18, 0xFE	; 254
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <__brkval>
    13b0:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <__brkval+0x1>
    13b4:	28 17       	cp	r18, r24
    13b6:	39 07       	cpc	r19, r25
    13b8:	69 f4       	brne	.+26     	; 0x13d4 <free+0x10c>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <free+0x100>
    13be:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <__flp+0x1>
    13c2:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <__flp>
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <free+0x104>
    13c8:	13 82       	std	Z+3, r1	; 0x03
    13ca:	12 82       	std	Z+2, r1	; 0x02
    13cc:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <__brkval+0x1>
    13d0:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <__brkval>
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <_exit>:
    13da:	f8 94       	cli

000013dc <__stop_program>:
    13dc:	ff cf       	rjmp	.-2      	; 0x13dc <__stop_program>
