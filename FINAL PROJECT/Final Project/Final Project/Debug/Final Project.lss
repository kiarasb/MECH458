
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  000013ae  00001442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000167  0080022a  0080022a  0000146c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000246f  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109d  00000000  00000000  00003a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef4  00000000  00000000  00004b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  000059fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000840  00000000  00000000  00005e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109f  00000000  00000000  00006640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000076df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	1b c2       	rjmp	.+1078   	; 0x440 <__vector_2>
       a:	00 00       	nop
       c:	fa c3       	rjmp	.+2036   	; 0x802 <__vector_3>
       e:	00 00       	nop
      10:	c7 c3       	rjmp	.+1934   	; 0x7a0 <__vector_4>
      12:	00 00       	nop
      14:	06 c2       	rjmp	.+1036   	; 0x422 <__vector_5>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c2       	rjmp	.+1176   	; 0x50e <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	17 c2       	rjmp	.+1070   	; 0x4b0 <__vector_32>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ea       	ldi	r30, 0xAE	; 174
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 32       	cpi	r26, 0x2A	; 42
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	aa e2       	ldi	r26, 0x2A	; 42
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 39       	cpi	r26, 0x91	; 145
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	3f d4       	rcall	.+2174   	; 0x99e <main>
     120:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_exit>

00000124 <__bad_interrupt>:
     124:	04 c3       	rjmp	.+1544   	; 0x72e <__vector_default>

00000126 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     132:	88 b1       	in	r24, 0x08	; 8
     134:	8f 7b       	andi	r24, 0xBF	; 191
     136:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     140:	88 b1       	in	r24, 0x08	; 8
     142:	80 68       	ori	r24, 0x80	; 128
     144:	88 b9       	out	0x08, r24	; 8
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x22>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     14e:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9a 95       	dec	r25
     158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x30>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15c:	98 b1       	in	r25, 0x08	; 8
     15e:	9f 77       	andi	r25, 0x7F	; 127
     160:	98 b9       	out	0x08, r25	; 8
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	9a 95       	dec	r25
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x3e>
     168:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16a:	98 b1       	in	r25, 0x08	; 8
     16c:	90 68       	ori	r25, 0x80	; 128
     16e:	98 b9       	out	0x08, r25	; 8
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     178:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17a:	80 78       	andi	r24, 0x80	; 128
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9a 95       	dec	r25
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x58>
     182:	00 c0       	rjmp	.+0      	; 0x184 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 b9       	out	0x08, r25	; 8
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	9a 95       	dec	r25
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x66>
     190:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     192:	81 11       	cpse	r24, r1
     194:	d5 cf       	rjmp	.-86     	; 0x140 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     196:	88 b1       	in	r24, 0x08	; 8
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 60       	ori	r24, 0x0F	; 15
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a4:	28 2f       	mov	r18, r24
     1a6:	22 95       	swap	r18
     1a8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1aa:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ac:	61 11       	cpse	r22, r1
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <LCDByte+0x14>
	CLEAR_RS();
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 7b       	andi	r25, 0xBF	; 191
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCDByte+0x1a>
else
	SET_RS();
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	90 64       	ori	r25, 0x40	; 64
     1bc:	98 b9       	out	0x08, r25	; 8
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x1c>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	90 7f       	andi	r25, 0xF0	; 240
     1d0:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d2:	98 b9       	out	0x08, r25	; 8
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDByte+0x32>
     1da:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	9f 77       	andi	r25, 0x7F	; 127
     1e0:	98 b9       	out	0x08, r25	; 8
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x40>
     1e8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDByte+0x56>
     1fe:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     200:	88 b1       	in	r24, 0x08	; 8
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	88 b9       	out	0x08, r24	; 8
     206:	95 e0       	ldi	r25, 0x05	; 5
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x64>
     20c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     20e:	8b cf       	rjmp	.-234    	; 0x126 <LCDBusyLoop>
     210:	08 95       	ret

00000212 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	86 e7       	ldi	r24, 0x76	; 118
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <InitLCD+0xa>
     224:	00 c0       	rjmp	.+0      	; 0x226 <InitLCD+0x14>
     226:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     228:	87 b1       	in	r24, 0x07	; 7
     22a:	8f 60       	ori	r24, 0x0F	; 15
     22c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     22e:	87 b1       	in	r24, 0x07	; 7
     230:	80 68       	ori	r24, 0x80	; 128
     232:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     234:	87 b1       	in	r24, 0x07	; 7
     236:	80 64       	ori	r24, 0x40	; 64
     238:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     240:	88 b1       	in	r24, 0x08	; 8
     242:	80 7f       	andi	r24, 0xF0	; 240
     244:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     246:	88 b1       	in	r24, 0x08	; 8
     248:	8f 77       	andi	r24, 0x7F	; 127
     24a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	8f 7d       	andi	r24, 0xDF	; 223
     250:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     252:	88 b1       	in	r24, 0x08	; 8
     254:	8f 7b       	andi	r24, 0xBF	; 191
     256:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x48>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x4a>
     25c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     25e:	88 b1       	in	r24, 0x08	; 8
     260:	80 68       	ori	r24, 0x80	; 128
     262:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     264:	88 b1       	in	r24, 0x08	; 8
     266:	82 60       	ori	r24, 0x02	; 2
     268:	88 b9       	out	0x08, r24	; 8
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	2a 95       	dec	r18
     26e:	f1 f7       	brne	.-4      	; 0x26c <InitLCD+0x5a>
     270:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     272:	88 b1       	in	r24, 0x08	; 8
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	88 b9       	out	0x08, r24	; 8
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	8a 95       	dec	r24
     27c:	f1 f7       	brne	.-4      	; 0x27a <InitLCD+0x68>
     27e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     280:	52 df       	rcall	.-348    	; 0x126 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8c 2f       	mov	r24, r28
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	8d df       	rcall	.-230    	; 0x1a4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	8a df       	rcall	.-236    	; 0x1a4 <LCDByte>
}
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 df       	rcall	.-252    	; 0x1a4 <LCDByte>
	msg++;
     2a0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a2:	88 81       	ld	r24, Y
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <LCDWriteInt+0xe>
     2bc:	1f 92       	push	r1
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c6:	fe 01       	movw	r30, r28
     2c8:	31 96       	adiw	r30, 0x01	; 1
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	df 01       	movw	r26, r30
     2ce:	1d 92       	st	X+, r1
     2d0:	2a 95       	dec	r18
     2d2:	e9 f7       	brne	.-6      	; 0x2ce <LCDWriteInt+0x20>
	int i=4,j=0;
     2d4:	24 e0       	ldi	r18, 0x04	; 4
     2d6:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <LCDWriteInt+0x48>
	{
	str[i]=val%10;
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	1d d7       	rcall	.+3642   	; 0x111a <__divmodhi4>
     2e0:	e1 e0       	ldi	r30, 0x01	; 1
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 0f       	add	r30, r28
     2e6:	fd 1f       	adc	r31, r29
     2e8:	e2 0f       	add	r30, r18
     2ea:	f3 1f       	adc	r31, r19
     2ec:	80 83       	st	Z, r24
	val=val/10;
     2ee:	86 2f       	mov	r24, r22
     2f0:	97 2f       	mov	r25, r23
	i--;
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	81 f7       	brne	.-32     	; 0x2da <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fa:	bf ef       	ldi	r27, 0xFF	; 255
     2fc:	eb 16       	cp	r14, r27
     2fe:	fb 06       	cpc	r15, r27
     300:	81 f4       	brne	.+32     	; 0x322 <LCDWriteInt+0x74>
     302:	03 c0       	rjmp	.+6      	; 0x30a <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	02 c0       	rjmp	.+4      	; 0x30e <LCDWriteInt+0x60>
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	e1 e0       	ldi	r30, 0x01	; 1
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ec 0f       	add	r30, r28
     314:	fd 1f       	adc	r31, r29
     316:	e0 0f       	add	r30, r16
     318:	f1 1f       	adc	r31, r17
     31a:	20 81       	ld	r18, Z
     31c:	22 23       	and	r18, r18
     31e:	91 f3       	breq	.-28     	; 0x304 <LCDWriteInt+0x56>
     320:	04 c0       	rjmp	.+8      	; 0x32a <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     322:	05 e0       	ldi	r16, 0x05	; 5
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	0e 19       	sub	r16, r14
     328:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32a:	99 23       	and	r25, r25
     32c:	84 f4       	brge	.+32     	; 0x34e <LCDWriteInt+0xa0>
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	8d e2       	ldi	r24, 0x2D	; 45
     332:	38 df       	rcall	.-400    	; 0x1a4 <LCDByte>
     334:	0c c0       	rjmp	.+24     	; 0x34e <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     336:	e1 e0       	ldi	r30, 0x01	; 1
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ec 0f       	add	r30, r28
     33c:	fd 1f       	adc	r31, r29
     33e:	e0 0f       	add	r30, r16
     340:	f1 1f       	adc	r31, r17
     342:	80 81       	ld	r24, Z
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	80 5d       	subi	r24, 0xD0	; 208
     348:	2d df       	rcall	.-422    	; 0x1a4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34a:	0f 5f       	subi	r16, 0xFF	; 255
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	05 30       	cpi	r16, 0x05	; 5
     350:	11 05       	cpc	r17, r1
     352:	8c f3       	brlt	.-30     	; 0x336 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	08 95       	ret

0000036c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     36c:	88 32       	cpi	r24, 0x28	; 40
     36e:	28 f4       	brcc	.+10     	; 0x37a <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     370:	61 11       	cpse	r22, r1
     372:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	80 68       	ori	r24, 0x80	; 128
     378:	15 cf       	rjmp	.-470    	; 0x1a4 <LCDByte>
     37a:	08 95       	ret

0000037c <setup>:
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		

	return;
}/*clearQueue*/
     37c:	fc 01       	movw	r30, r24
     37e:	11 82       	std	Z+1, r1	; 0x01
     380:	10 82       	st	Z, r1
     382:	fb 01       	movw	r30, r22
     384:	11 82       	std	Z+1, r1	; 0x01
     386:	10 82       	st	Z, r1
     388:	08 95       	ret

0000038a <initLink>:
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	ec 01       	movw	r28, r24
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	e9 d6       	rcall	.+3538   	; 0x1168 <malloc>
     396:	99 83       	std	Y+1, r25	; 0x01
     398:	88 83       	st	Y, r24
     39a:	fc 01       	movw	r30, r24
     39c:	13 82       	std	Z+3, r1	; 0x03
     39e:	12 82       	std	Z+2, r1	; 0x02
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <enqueue>:
     3a6:	db 01       	movw	r26, r22
     3a8:	ed 91       	ld	r30, X+
     3aa:	fc 91       	ld	r31, X
     3ac:	30 97       	sbiw	r30, 0x00	; 0
     3ae:	61 f0       	breq	.+24     	; 0x3c8 <enqueue+0x22>
     3b0:	da 01       	movw	r26, r20
     3b2:	8d 91       	ld	r24, X+
     3b4:	9c 91       	ld	r25, X
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	93 83       	std	Z+3, r25	; 0x03
     3ba:	82 83       	std	Z+2, r24	; 0x02
     3bc:	8d 91       	ld	r24, X+
     3be:	9c 91       	ld	r25, X
     3c0:	fb 01       	movw	r30, r22
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
     3c6:	08 95       	ret
     3c8:	da 01       	movw	r26, r20
     3ca:	2d 91       	ld	r18, X+
     3cc:	3c 91       	ld	r19, X
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	fc 01       	movw	r30, r24
     3d2:	31 83       	std	Z+1, r19	; 0x01
     3d4:	20 83       	st	Z, r18
     3d6:	8d 91       	ld	r24, X+
     3d8:	9c 91       	ld	r25, X
     3da:	db 01       	movw	r26, r22
     3dc:	8d 93       	st	X+, r24
     3de:	9c 93       	st	X, r25
     3e0:	08 95       	ret

000003e2 <dequeue>:
     3e2:	fc 01       	movw	r30, r24
     3e4:	80 81       	ld	r24, Z
     3e6:	91 81       	ldd	r25, Z+1	; 0x01
     3e8:	da 01       	movw	r26, r20
     3ea:	8d 93       	st	X+, r24
     3ec:	9c 93       	st	X, r25
     3ee:	a0 81       	ld	r26, Z
     3f0:	b1 81       	ldd	r27, Z+1	; 0x01
     3f2:	10 97       	sbiw	r26, 0x00	; 0
     3f4:	31 f0       	breq	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f6:	12 96       	adiw	r26, 0x02	; 2
     3f8:	8d 91       	ld	r24, X+
     3fa:	9c 91       	ld	r25, X
     3fc:	13 97       	sbiw	r26, 0x03	; 3
     3fe:	91 83       	std	Z+1, r25	; 0x01
     400:	80 83       	st	Z, r24
     402:	80 81       	ld	r24, Z
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	89 2b       	or	r24, r25
     408:	19 f4       	brne	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40a:	fb 01       	movw	r30, r22
     40c:	11 82       	std	Z+1, r1	; 0x01
     40e:	10 82       	st	Z, r1
     410:	08 95       	ret

00000412 <isEmpty>:
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
     412:	fc 01       	movw	r30, r24
     414:	20 81       	ld	r18, Z
     416:	31 81       	ldd	r19, Z+1	; 0x01
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	23 2b       	or	r18, r19
     41c:	09 f0       	breq	.+2      	; 0x420 <isEmpty+0xe>
     41e:	80 e0       	ldi	r24, 0x00	; 0
}/*isEmpty*/
     420:	08 95       	ret

00000422 <__vector_5>:
	cli( ); //disable interrupts
	return 0;

} //end main

ISR(INT4_vect){
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	8f 93       	push	r24
	STATE = 2;
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <STATE>
} //end ISR
     434:	8f 91       	pop	r24
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_2>:

ISR(INT1_vect){
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	0b b6       	in	r0, 0x3b	; 59
     44c:	0f 92       	push	r0
     44e:	2f 93       	push	r18
     450:	3f 93       	push	r19
     452:	4f 93       	push	r20
     454:	5f 93       	push	r21
     456:	6f 93       	push	r22
     458:	7f 93       	push	r23
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
     45e:	af 93       	push	r26
     460:	bf 93       	push	r27
     462:	ef 93       	push	r30
     464:	ff 93       	push	r31
	if(isEmpty(&head)==1){
     466:	84 e4       	ldi	r24, 0x44	; 68
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	d3 df       	rcall	.-90     	; 0x412 <isEmpty>
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	19 f4       	brne	.+6      	; 0x476 <__vector_2+0x36>
		STATE = 0;
     470:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <STATE>
     474:	0a c0       	rjmp	.+20     	; 0x48a <__vector_2+0x4a>
	}else if(isEmpty(&head)==0){
     476:	84 e4       	ldi	r24, 0x44	; 68
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	cb df       	rcall	.-106    	; 0x412 <isEmpty>
     47c:	81 11       	cpse	r24, r1
     47e:	05 c0       	rjmp	.+10     	; 0x48a <__vector_2+0x4a>
		PORTB = brake; // stop belt
     480:	88 e7       	ldi	r24, 0x78	; 120
     482:	85 b9       	out	0x05, r24	; 5
		STATE = 3;
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <STATE>
	}
} //end ISR*/
     48a:	ff 91       	pop	r31
     48c:	ef 91       	pop	r30
     48e:	bf 91       	pop	r27
     490:	af 91       	pop	r26
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	7f 91       	pop	r23
     498:	6f 91       	pop	r22
     49a:	5f 91       	pop	r21
     49c:	4f 91       	pop	r20
     49e:	3f 91       	pop	r19
     4a0:	2f 91       	pop	r18
     4a2:	0f 90       	pop	r0
     4a4:	0b be       	out	0x3b, r0	; 59
     4a6:	0f 90       	pop	r0
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	0f 90       	pop	r0
     4ac:	1f 90       	pop	r1
     4ae:	18 95       	reti

000004b0 <__vector_32>:
	//while((PIND&0x04)==0x04);
	//mTimer(20000); //debounce
	STATE = 0; // go to polling state
} //end ISR*/
	
ISR(TIMER3_COMPA_vect){
     4b0:	1f 92       	push	r1
     4b2:	0f 92       	push	r0
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	0f 92       	push	r0
     4b8:	11 24       	eor	r1, r1
     4ba:	0b b6       	in	r0, 0x3b	; 59
     4bc:	0f 92       	push	r0
     4be:	2f 93       	push	r18
     4c0:	3f 93       	push	r19
     4c2:	4f 93       	push	r20
     4c4:	5f 93       	push	r21
     4c6:	6f 93       	push	r22
     4c8:	7f 93       	push	r23
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27
     4d2:	ef 93       	push	r30
     4d4:	ff 93       	push	r31
	LCDClear();
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	64 de       	rcall	.-824    	; 0x1a4 <LCDByte>
	LCDWriteString("TIMER END");
     4dc:	8e e0       	ldi	r24, 0x0E	; 14
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	d9 de       	rcall	.-590    	; 0x294 <LCDWriteString>
	STATE = 5;
     4e2:	85 e0       	ldi	r24, 0x05	; 5
     4e4:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <STATE>
}//end ISR
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <__vector_29>:

ISR(ADC_vect){
     50e:	1f 92       	push	r1
     510:	0f 92       	push	r0
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	0f 92       	push	r0
     516:	11 24       	eor	r1, r1
     518:	0b b6       	in	r0, 0x3b	; 59
     51a:	0f 92       	push	r0
     51c:	2f 93       	push	r18
     51e:	3f 93       	push	r19
     520:	4f 93       	push	r20
     522:	5f 93       	push	r21
     524:	6f 93       	push	r22
     526:	7f 93       	push	r23
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
     52c:	af 93       	push	r26
     52e:	bf 93       	push	r27
     530:	ef 93       	push	r30
     532:	ff 93       	push	r31
	//pick lowest voltage reading (center of piece)
	ADC_low = ADCL;
     534:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <ADC_low+0x1>
     53e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <ADC_low>
	ADC_high = ADCH;
     542:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <ADC_high+0x1>
     54c:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <ADC_high>
	ADC_result = (ADC_high << 8) | ADC_low;//assign value to global variable
     550:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <ADC_high>
     554:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <ADC_high+0x1>
     558:	98 2f       	mov	r25, r24
     55a:	88 27       	eor	r24, r24
     55c:	20 91 c1 02 	lds	r18, 0x02C1	; 0x8002c1 <ADC_low>
     560:	30 91 c2 02 	lds	r19, 0x02C2	; 0x8002c2 <ADC_low+0x1>
     564:	82 2b       	or	r24, r18
     566:	93 2b       	or	r25, r19
     568:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <ADC_result+0x1>
     56c:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <ADC_result>
	if(ADC_result<lowest){
     570:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <ADC_result>
     574:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <ADC_result+0x1>
     578:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     57c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     580:	28 17       	cp	r18, r24
     582:	39 07       	cpc	r19, r25
     584:	40 f4       	brcc	.+16     	; 0x596 <__vector_29+0x88>
		lowest = ADC_result;
     586:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <ADC_result>
     58a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <ADC_result+0x1>
     58e:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <lowest+0x1>
     592:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lowest>
	}// end if
	if((PINE&0x10)==0x10){
     596:	64 9b       	sbis	0x0c, 4	; 12
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <__vector_29+0x98>
		ADCSRA |= _BV(ADSC);
     59a:	ea e7       	ldi	r30, 0x7A	; 122
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	80 64       	ori	r24, 0x40	; 64
     5a2:	80 83       	st	Z, r24
     5a4:	b1 c0       	rjmp	.+354    	; 0x708 <__vector_29+0x1fa>
	}else{
		if(100>lowest){
     5a6:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     5aa:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     5ae:	84 36       	cpi	r24, 0x64	; 100
     5b0:	91 05       	cpc	r25, r1
     5b2:	30 f5       	brcc	.+76     	; 0x600 <__vector_29+0xf2>
			LCDClear();
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	f5 dd       	rcall	.-1046   	; 0x1a4 <LCDByte>
			//LCDWriteStringXY(0,0,"ALUMINUM");
			LCDWriteIntXY(0,1,lowest,4);
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	d6 de       	rcall	.-596    	; 0x36c <LCDGotoXY>
     5c0:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     5c4:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     5c8:	64 e0       	ldi	r22, 0x04	; 4
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	70 de       	rcall	.-800    	; 0x2ae <LCDWriteInt>
			newLink->p.cur_pos = 3; //alu
     5ce:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <newLink>
     5d2:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <newLink+0x1>
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	91 83       	std	Z+1, r25	; 0x01
     5dc:	80 83       	st	Z, r24
			enqueue(&head,&tail,&newLink);
     5de:	4f eb       	ldi	r20, 0xBF	; 191
     5e0:	52 e0       	ldi	r21, 0x02	; 2
     5e2:	60 e4       	ldi	r22, 0x40	; 64
     5e4:	72 e0       	ldi	r23, 0x02	; 2
     5e6:	84 e4       	ldi	r24, 0x44	; 68
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	dd de       	rcall	.-582    	; 0x3a6 <enqueue>
			num_belt++;
     5ec:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <num_belt>
     5f0:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <num_belt+0x1>
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <num_belt+0x1>
     5fa:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <num_belt>
     5fe:	84 c0       	rjmp	.+264    	; 0x708 <__vector_29+0x1fa>
		}else if(650>lowest){
     600:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     604:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     608:	8a 38       	cpi	r24, 0x8A	; 138
     60a:	92 40       	sbci	r25, 0x02	; 2
			LCDClear();
     60c:	30 f5       	brcc	.+76     	; 0x65a <__vector_29+0x14c>
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	81 e0       	ldi	r24, 0x01	; 1
			//LCDWriteStringXY(0,0,"STEEL");
			LCDWriteIntXY(0,1,lowest,4);
     612:	c8 dd       	rcall	.-1136   	; 0x1a4 <LCDByte>
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	a9 de       	rcall	.-686    	; 0x36c <LCDGotoXY>
     61a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     61e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     622:	64 e0       	ldi	r22, 0x04	; 4
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	43 de       	rcall	.-890    	; 0x2ae <LCDWriteInt>
			newLink->p.cur_pos = 1; //stl
     628:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <newLink>
     62c:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <newLink+0x1>
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	91 83       	std	Z+1, r25	; 0x01
			enqueue(&head,&tail,&newLink);
     636:	80 83       	st	Z, r24
     638:	4f eb       	ldi	r20, 0xBF	; 191
     63a:	52 e0       	ldi	r21, 0x02	; 2
     63c:	60 e4       	ldi	r22, 0x40	; 64
     63e:	72 e0       	ldi	r23, 0x02	; 2
     640:	84 e4       	ldi	r24, 0x44	; 68
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	b0 de       	rcall	.-672    	; 0x3a6 <enqueue>
			num_belt++;
     646:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <num_belt>
     64a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <num_belt+0x1>
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <num_belt+0x1>
     654:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <num_belt>
     658:	57 c0       	rjmp	.+174    	; 0x708 <__vector_29+0x1fa>
		}else if(930>lowest){
     65a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     65e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     662:	82 3a       	cpi	r24, 0xA2	; 162
				LCDClear();
     664:	93 40       	sbci	r25, 0x03	; 3
     666:	30 f5       	brcc	.+76     	; 0x6b4 <__vector_29+0x1a6>
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	81 e0       	ldi	r24, 0x01	; 1
				//LCDWriteStringXY(0,0,"WHITE");
				LCDWriteIntXY(0,1,lowest,4);
     66c:	9b dd       	rcall	.-1226   	; 0x1a4 <LCDByte>
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	7c de       	rcall	.-776    	; 0x36c <LCDGotoXY>
     674:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     678:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     67c:	64 e0       	ldi	r22, 0x04	; 4
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	16 de       	rcall	.-980    	; 0x2ae <LCDWriteInt>
				newLink->p.cur_pos = 2; //wht
     682:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <newLink>
     686:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <newLink+0x1>
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	91 83       	std	Z+1, r25	; 0x01
				enqueue(&head,&tail,&newLink);
     690:	80 83       	st	Z, r24
     692:	4f eb       	ldi	r20, 0xBF	; 191
     694:	52 e0       	ldi	r21, 0x02	; 2
     696:	60 e4       	ldi	r22, 0x40	; 64
     698:	72 e0       	ldi	r23, 0x02	; 2
     69a:	84 e4       	ldi	r24, 0x44	; 68
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	83 de       	rcall	.-762    	; 0x3a6 <enqueue>
				num_belt++;
     6a0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <num_belt>
     6a4:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <num_belt+0x1>
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <num_belt+0x1>
     6ae:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <num_belt>
		}else if(1024>lowest){
     6b2:	2a c0       	rjmp	.+84     	; 0x708 <__vector_29+0x1fa>
     6b4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     6b8:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     6bc:	81 15       	cp	r24, r1
			LCDClear();
     6be:	94 40       	sbci	r25, 0x04	; 4
     6c0:	18 f5       	brcc	.+70     	; 0x708 <__vector_29+0x1fa>
     6c2:	60 e0       	ldi	r22, 0x00	; 0
			//LCDWriteStringXY(0,0,"BLACK");
			LCDWriteIntXY(0,1,lowest,4);
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	6e dd       	rcall	.-1316   	; 0x1a4 <LCDByte>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	4f de       	rcall	.-866    	; 0x36c <LCDGotoXY>
     6ce:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <lowest>
     6d2:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <lowest+0x1>
     6d6:	64 e0       	ldi	r22, 0x04	; 4
     6d8:	70 e0       	ldi	r23, 0x00	; 0
			newLink->p.cur_pos = 0; //blk
     6da:	e9 dd       	rcall	.-1070   	; 0x2ae <LCDWriteInt>
     6dc:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <newLink>
     6e0:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <newLink+0x1>
     6e4:	11 82       	std	Z+1, r1	; 0x01
			enqueue(&head,&tail,&newLink);
     6e6:	10 82       	st	Z, r1
     6e8:	4f eb       	ldi	r20, 0xBF	; 191
     6ea:	52 e0       	ldi	r21, 0x02	; 2
     6ec:	60 e4       	ldi	r22, 0x40	; 64
     6ee:	72 e0       	ldi	r23, 0x02	; 2
     6f0:	84 e4       	ldi	r24, 0x44	; 68
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	58 de       	rcall	.-848    	; 0x3a6 <enqueue>
			num_belt++;
     6f6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <num_belt>
     6fa:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <num_belt+0x1>
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <num_belt+0x1>
     704:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <num_belt>
		}
	}// end if/else
} //end ISR
     708:	ff 91       	pop	r31
     70a:	ef 91       	pop	r30
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	4f 91       	pop	r20
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	0b be       	out	0x3b, r0	; 59
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_default>:

ISR(BADISR_vect){
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
	//handle bad ISR triggers
} //end ISR
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <stopTimer>:
void stopTimer (){
	/***
      Setup Timer3 as a s timer
	  Using Interrupt Driven Method
   ***/
	TCCR3B |= _BV(WGM32); //set to CTC mode
     742:	e1 e9       	ldi	r30, 0x91	; 145
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	88 60       	ori	r24, 0x08	; 8
     74a:	80 83       	st	Z, r24
	
	//set prescale clock /1024
	TCCR3B |=_BV (CS30)|_BV (CS32);
     74c:	80 81       	ld	r24, Z
     74e:	85 60       	ori	r24, 0x05	; 5
     750:	80 83       	st	Z, r24
	
	//set compare register to 46875 cycles, 6s
	OCR3A = 0xB71B;
     752:	8b e1       	ldi	r24, 0x1B	; 27
     754:	97 eb       	ldi	r25, 0xB7	; 183
     756:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     75a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	
	/* Initialize Timer2 to zero */
	TCNT3 = 0x0000;
     75e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     762:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	//turn on timer compare A interrupt flag
	TIMSK3 = TIMSK3 | 0b00000010;
     766:	e1 e7       	ldi	r30, 0x71	; 113
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	82 60       	ori	r24, 0x02	; 2
     76e:	80 83       	st	Z, r24
     770:	08 95       	ret

00000772 <mTimer>:
}


void mTimer(unsigned int count){
     772:	9c 01       	movw	r18, r24
	  Using polling method not Interrupt Driven
   ***/
  
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12); 
     774:	e1 e8       	ldi	r30, 0x81	; 129
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	90 81       	ld	r25, Z
     77a:	98 60       	ori	r25, 0x08	; 8
     77c:	90 83       	st	Z, r25

   OCR1A =count; // Timer value for 0.001ms resolution
     77e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     782:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
   
   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
     786:	86 b3       	in	r24, 0x16	; 22
     788:	82 60       	ori	r24, 0x02	; 2
     78a:	86 bb       	out	0x16, r24	; 22

   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
     78c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     790:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>



   /* Poll the timer to determine when the timer has reached 1ms */
   
   while((TIFR1 & 0x02) != 0x02);
     794:	b1 9b       	sbis	0x16, 1	; 22
     796:	fe cf       	rjmp	.-4      	; 0x794 <mTimer+0x22>
   TIFR1 |= _BV(OCF1A);
     798:	86 b3       	in	r24, 0x16	; 22
     79a:	82 60       	ori	r24, 0x02	; 2
     79c:	86 bb       	out	0x16, r24	; 22
     79e:	08 95       	ret

000007a0 <__vector_4>:
		PORTB = brake; // stop belt
		STATE = 3;
	}
} //end ISR*/

ISR(INT3_vect){
     7a0:	1f 92       	push	r1
     7a2:	0f 92       	push	r0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	0f 92       	push	r0
     7a8:	11 24       	eor	r1, r1
     7aa:	0b b6       	in	r0, 0x3b	; 59
     7ac:	0f 92       	push	r0
     7ae:	2f 93       	push	r18
     7b0:	3f 93       	push	r19
     7b2:	4f 93       	push	r20
     7b4:	5f 93       	push	r21
     7b6:	6f 93       	push	r22
     7b8:	7f 93       	push	r23
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25
     7be:	af 93       	push	r26
     7c0:	bf 93       	push	r27
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
	mTimer(20000); //debounce
     7c6:	80 e2       	ldi	r24, 0x20	; 32
     7c8:	9e e4       	ldi	r25, 0x4E	; 78
     7ca:	d3 df       	rcall	.-90     	; 0x772 <mTimer>
	STATE = 4;
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <STATE>
	while((PIND&0x08)==0x08);
     7d2:	4b 99       	sbic	0x09, 3	; 9
     7d4:	fe cf       	rjmp	.-4      	; 0x7d2 <__vector_4+0x32>
	mTimer(20000); //debounce
     7d6:	80 e2       	ldi	r24, 0x20	; 32
     7d8:	9e e4       	ldi	r25, 0x4E	; 78
     7da:	cb df       	rcall	.-106    	; 0x772 <mTimer>
} //end ISR
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0b be       	out	0x3b, r0	; 59
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	0f 90       	pop	r0
     7fe:	1f 90       	pop	r1
     800:	18 95       	reti

00000802 <__vector_3>:

ISR(INT2_vect){ //rampdown
     802:	1f 92       	push	r1
     804:	0f 92       	push	r0
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	0f 92       	push	r0
     80a:	11 24       	eor	r1, r1
     80c:	0b b6       	in	r0, 0x3b	; 59
     80e:	0f 92       	push	r0
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	4f 93       	push	r20
     816:	5f 93       	push	r21
     818:	6f 93       	push	r22
     81a:	7f 93       	push	r23
     81c:	8f 93       	push	r24
     81e:	9f 93       	push	r25
     820:	af 93       	push	r26
     822:	bf 93       	push	r27
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
	mTimer(20000); //debounce
     828:	80 e2       	ldi	r24, 0x20	; 32
     82a:	9e e4       	ldi	r25, 0x4E	; 78
     82c:	a2 df       	rcall	.-188    	; 0x772 <mTimer>
	//call timer function to start rampdown count
	stopTimer();
     82e:	89 df       	rcall	.-238    	; 0x742 <stopTimer>
     830:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <STATE>
	//while((PIND&0x04)==0x04);
	//mTimer(20000); //debounce
	STATE = 0; // go to polling state
     834:	ff 91       	pop	r31
} //end ISR*/
     836:	ef 91       	pop	r30
     838:	bf 91       	pop	r27
     83a:	af 91       	pop	r26
     83c:	9f 91       	pop	r25
     83e:	8f 91       	pop	r24
     840:	7f 91       	pop	r23
     842:	6f 91       	pop	r22
     844:	5f 91       	pop	r21
     846:	4f 91       	pop	r20
     848:	3f 91       	pop	r19
     84a:	2f 91       	pop	r18
     84c:	0f 90       	pop	r0
     84e:	0b be       	out	0x3b, r0	; 59
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <PWM>:
     85a:	84 b5       	in	r24, 0x24	; 36
	   
   return;
} //end mTimer

void PWM( ){
	TCCR0A |= _BV(WGM01)|_BV(WGM00); //selecting Fast PWN mode 3
     85c:	83 60       	ori	r24, 0x03	; 3
     85e:	84 bd       	out	0x24, r24	; 36
	//TIMSK0 |= _BV(OCIE0A); //enable output compare interrupt for timer0
	TCCR0A |= _BV(COM0A1);//set compare match output mode to clear and set output compare A when timer reaches TOP
     860:	84 b5       	in	r24, 0x24	; 36
     862:	80 68       	ori	r24, 0x80	; 128
     864:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);//sets prescale factor to 8
     866:	85 b5       	in	r24, 0x25	; 37
     868:	82 60       	ori	r24, 0x02	; 2
     86a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 179;//default duty cycle
     86c:	83 eb       	ldi	r24, 0xB3	; 179
     86e:	87 bd       	out	0x27, r24	; 39
     870:	08 95       	ret

00000872 <CW>:
//i++
//slopes will be the same for 50 steps and for 100 steps
//must find the max speed of the stepper, this is when the stepper shuts down
//the max speed is not 0ms, 1ms, or 2ms, the min speed is 20ms

void CW(int NumSteps ){
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	8c 01       	movw	r16, r24
	int i = 0;
     87c:	c0 e0       	ldi	r28, 0x00	; 0
     87e:	d0 e0       	ldi	r29, 0x00	; 0
	while(i<NumSteps){
     880:	35 c0       	rjmp	.+106    	; 0x8ec <CW+0x7a>
		cur_pos++;
     882:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <cur_pos>
     886:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <cur_pos+0x1>
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <cur_pos+0x1>
     890:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <cur_pos>
		if(cur_pos==4){
     894:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <cur_pos>
     898:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <cur_pos+0x1>
     89c:	04 97       	sbiw	r24, 0x04	; 4
     89e:	21 f4       	brne	.+8      	; 0x8a8 <CW+0x36>
			cur_pos=0;
     8a0:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <cur_pos+0x1>
     8a4:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <cur_pos>
		}
		PORTA = StepperTable[cur_pos];
     8a8:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <cur_pos>
     8ac:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <cur_pos+0x1>
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	ea 5f       	subi	r30, 0xFA	; 250
     8b6:	fd 4f       	sbci	r31, 0xFD	; 253
     8b8:	80 81       	ld	r24, Z
     8ba:	82 b9       	out	0x02, r24	; 2
		if(NumSteps==50){
     8bc:	02 33       	cpi	r16, 0x32	; 50
     8be:	11 05       	cpc	r17, r1
     8c0:	49 f4       	brne	.+18     	; 0x8d4 <CW+0x62>
			mTimer(prof_50[i]);
     8c2:	fe 01       	movw	r30, r28
     8c4:	ee 0f       	add	r30, r30
     8c6:	ff 1f       	adc	r31, r31
     8c8:	e8 5b       	subi	r30, 0xB8	; 184
     8ca:	fd 4f       	sbci	r31, 0xFD	; 253
     8cc:	80 81       	ld	r24, Z
     8ce:	91 81       	ldd	r25, Z+1	; 0x01
     8d0:	50 df       	rcall	.-352    	; 0x772 <mTimer>
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <CW+0x78>
		}else if(NumSteps==100){
     8d4:	04 36       	cpi	r16, 0x64	; 100
     8d6:	11 05       	cpc	r17, r1
     8d8:	41 f4       	brne	.+16     	; 0x8ea <CW+0x78>
			mTimer(prof_100[i]);
     8da:	fe 01       	movw	r30, r28
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	ed 53       	subi	r30, 0x3D	; 61
     8e2:	fd 4f       	sbci	r31, 0xFD	; 253
     8e4:	80 81       	ld	r24, Z
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	44 df       	rcall	.-376    	; 0x772 <mTimer>
		}
		i++;
     8ea:	21 96       	adiw	r28, 0x01	; 1
//must find the max speed of the stepper, this is when the stepper shuts down
//the max speed is not 0ms, 1ms, or 2ms, the min speed is 20ms

void CW(int NumSteps ){
	int i = 0;
	while(i<NumSteps){
     8ec:	c0 17       	cp	r28, r16
     8ee:	d1 07       	cpc	r29, r17
     8f0:	44 f2       	brlt	.-112    	; 0x882 <CW+0x10>
		}else if(NumSteps==100){
			mTimer(prof_100[i]);
		}
		i++;
	} //end while
	cur_step_dir =0;
     8f2:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <cur_step_dir+0x1>
     8f6:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <cur_step_dir>
} //end CW
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	08 95       	ret

00000904 <CCW>:

void CCW(int NumSteps ){
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	8c 01       	movw	r16, r24
	int i = 0;
     90e:	c0 e0       	ldi	r28, 0x00	; 0
     910:	d0 e0       	ldi	r29, 0x00	; 0
	while(i<NumSteps){
     912:	37 c0       	rjmp	.+110    	; 0x982 <CCW+0x7e>
		cur_pos--;
     914:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <cur_pos>
     918:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <cur_pos+0x1>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <cur_pos+0x1>
     922:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <cur_pos>
		if(cur_pos==-1){
     926:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <cur_pos>
     92a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <cur_pos+0x1>
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	31 f4       	brne	.+12     	; 0x93e <CCW+0x3a>
			cur_pos=3;
     932:	83 e0       	ldi	r24, 0x03	; 3
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <cur_pos+0x1>
     93a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <cur_pos>
		}
		PORTA = StepperTable[cur_pos];
     93e:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <cur_pos>
     942:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <cur_pos+0x1>
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	ea 5f       	subi	r30, 0xFA	; 250
     94c:	fd 4f       	sbci	r31, 0xFD	; 253
     94e:	80 81       	ld	r24, Z
     950:	82 b9       	out	0x02, r24	; 2
		if(NumSteps==50){
     952:	02 33       	cpi	r16, 0x32	; 50
     954:	11 05       	cpc	r17, r1
     956:	49 f4       	brne	.+18     	; 0x96a <CCW+0x66>
			mTimer(prof_50[i]);
     958:	fe 01       	movw	r30, r28
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	e8 5b       	subi	r30, 0xB8	; 184
     960:	fd 4f       	sbci	r31, 0xFD	; 253
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	05 df       	rcall	.-502    	; 0x772 <mTimer>
     968:	0b c0       	rjmp	.+22     	; 0x980 <CCW+0x7c>
			}else if(NumSteps==100){
     96a:	04 36       	cpi	r16, 0x64	; 100
     96c:	11 05       	cpc	r17, r1
     96e:	41 f4       	brne	.+16     	; 0x980 <CCW+0x7c>
			mTimer(prof_100[i]);
     970:	fe 01       	movw	r30, r28
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	ed 53       	subi	r30, 0x3D	; 61
     978:	fd 4f       	sbci	r31, 0xFD	; 253
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	f9 de       	rcall	.-526    	; 0x772 <mTimer>
		}
		i++;
     980:	21 96       	adiw	r28, 0x01	; 1
	cur_step_dir =0;
} //end CW

void CCW(int NumSteps ){
	int i = 0;
	while(i<NumSteps){
     982:	c0 17       	cp	r28, r16
     984:	d1 07       	cpc	r29, r17
     986:	34 f2       	brlt	.-116    	; 0x914 <CCW+0x10>
			}else if(NumSteps==100){
			mTimer(prof_100[i]);
		}
		i++;
	}
	cur_step_dir =1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <cur_step_dir+0x1>
     990:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <cur_step_dir>
} //end CCW
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	08 95       	ret

0000099e <main>:
void stopTimer(); // initialize stopTimer
void PWM( ); //initialize PWM
void CW(int NumSteps); //initialize CW for stepper
void CCW(int NumSteps); //initialize CCW for stepper

int main(void){
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
	CLKPR = 0x80;
     9a6:	e1 e6       	ldi	r30, 0x61	; 97
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 e8       	ldi	r24, 0x80	; 128
     9ac:	80 83       	st	Z, r24
	CLKPR = 0x01; //set systems clock to 8 MHz
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 83       	st	Z, r24
	TCCR1B = _BV(CS11);
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	STATE = 0;
     9b8:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <STATE>
	
	//define stepper profiles
	prof_50[0]= 20000;
     9bc:	80 e2       	ldi	r24, 0x20	; 32
     9be:	9e e4       	ldi	r25, 0x4E	; 78
     9c0:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <prof_50+0x1>
     9c4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <prof_50>
	prof_100[0]= 20000;
     9c8:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <prof_100+0x1>
     9cc:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <prof_100>
	float slope_50 = 1500;
	float slope_100= 750;
	for(int i=1;i<51;i++){
     9d0:	c1 e0       	ldi	r28, 0x01	; 1
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
     9d4:	51 c0       	rjmp	.+162    	; 0xa78 <main+0xda>
		if(i<11){
     9d6:	cb 30       	cpi	r28, 0x0B	; 11
     9d8:	d1 05       	cpc	r29, r1
     9da:	e4 f4       	brge	.+56     	; 0xa14 <main+0x76>
			prof_50[i]= prof_50[i-1]-slope_50;
     9dc:	fe 01       	movw	r30, r28
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	ee 0f       	add	r30, r30
     9e2:	ff 1f       	adc	r31, r31
     9e4:	e8 5b       	subi	r30, 0xB8	; 184
     9e6:	fd 4f       	sbci	r31, 0xFD	; 253
     9e8:	60 81       	ld	r22, Z
     9ea:	71 81       	ldd	r23, Z+1	; 0x01
     9ec:	07 2e       	mov	r0, r23
     9ee:	00 0c       	add	r0, r0
     9f0:	88 0b       	sbc	r24, r24
     9f2:	99 0b       	sbc	r25, r25
     9f4:	06 d3       	rcall	.+1548   	; 0x1002 <__floatsisf>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e8       	ldi	r19, 0x80	; 128
     9fa:	4b eb       	ldi	r20, 0xBB	; 187
     9fc:	54 e4       	ldi	r21, 0x44	; 68
     9fe:	69 d2       	rcall	.+1234   	; 0xed2 <__subsf3>
     a00:	8e 01       	movw	r16, r28
     a02:	00 0f       	add	r16, r16
     a04:	11 1f       	adc	r17, r17
     a06:	08 5b       	subi	r16, 0xB8	; 184
     a08:	1d 4f       	sbci	r17, 0xFD	; 253
     a0a:	c8 d2       	rcall	.+1424   	; 0xf9c <__fixsfsi>
     a0c:	f8 01       	movw	r30, r16
     a0e:	71 83       	std	Z+1, r23	; 0x01
     a10:	60 83       	st	Z, r22
     a12:	31 c0       	rjmp	.+98     	; 0xa76 <main+0xd8>
		}else if(i<40){
     a14:	c8 32       	cpi	r28, 0x28	; 40
     a16:	d1 05       	cpc	r29, r1
     a18:	84 f4       	brge	.+32     	; 0xa3a <main+0x9c>
			prof_50[i]= prof_50[i-1];
     a1a:	fe 01       	movw	r30, r28
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	e8 5b       	subi	r30, 0xB8	; 184
     a24:	fd 4f       	sbci	r31, 0xFD	; 253
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	fe 01       	movw	r30, r28
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	e8 5b       	subi	r30, 0xB8	; 184
     a32:	fd 4f       	sbci	r31, 0xFD	; 253
     a34:	91 83       	std	Z+1, r25	; 0x01
     a36:	80 83       	st	Z, r24
     a38:	1e c0       	rjmp	.+60     	; 0xa76 <main+0xd8>
		}else if(i>39){
     a3a:	c8 32       	cpi	r28, 0x28	; 40
     a3c:	d1 05       	cpc	r29, r1
     a3e:	dc f0       	brlt	.+54     	; 0xa76 <main+0xd8>
		prof_50[i]= prof_50[i-1]+slope_50;
     a40:	fe 01       	movw	r30, r28
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	e8 5b       	subi	r30, 0xB8	; 184
     a4a:	fd 4f       	sbci	r31, 0xFD	; 253
     a4c:	60 81       	ld	r22, Z
     a4e:	71 81       	ldd	r23, Z+1	; 0x01
     a50:	07 2e       	mov	r0, r23
     a52:	00 0c       	add	r0, r0
     a54:	88 0b       	sbc	r24, r24
     a56:	99 0b       	sbc	r25, r25
     a58:	d4 d2       	rcall	.+1448   	; 0x1002 <__floatsisf>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e8       	ldi	r19, 0x80	; 128
     a5e:	4b eb       	ldi	r20, 0xBB	; 187
     a60:	54 e4       	ldi	r21, 0x44	; 68
     a62:	38 d2       	rcall	.+1136   	; 0xed4 <__addsf3>
     a64:	8e 01       	movw	r16, r28
     a66:	00 0f       	add	r16, r16
     a68:	11 1f       	adc	r17, r17
     a6a:	08 5b       	subi	r16, 0xB8	; 184
     a6c:	1d 4f       	sbci	r17, 0xFD	; 253
     a6e:	96 d2       	rcall	.+1324   	; 0xf9c <__fixsfsi>
     a70:	f8 01       	movw	r30, r16
     a72:	71 83       	std	Z+1, r23	; 0x01
     a74:	60 83       	st	Z, r22
	//define stepper profiles
	prof_50[0]= 20000;
	prof_100[0]= 20000;
	float slope_50 = 1500;
	float slope_100= 750;
	for(int i=1;i<51;i++){
     a76:	21 96       	adiw	r28, 0x01	; 1
     a78:	c3 33       	cpi	r28, 0x33	; 51
     a7a:	d1 05       	cpc	r29, r1
     a7c:	0c f4       	brge	.+2      	; 0xa80 <main+0xe2>
     a7e:	ab cf       	rjmp	.-170    	; 0x9d6 <main+0x38>
     a80:	c1 e0       	ldi	r28, 0x01	; 1
     a82:	d0 e0       	ldi	r29, 0x00	; 0
     a84:	51 c0       	rjmp	.+162    	; 0xb28 <main+0x18a>
		}else if(i>39){
		prof_50[i]= prof_50[i-1]+slope_50;
		}
	}
	for(int i=1;i<101;i++){
		if(i<21){
     a86:	c5 31       	cpi	r28, 0x15	; 21
     a88:	d1 05       	cpc	r29, r1
     a8a:	e4 f4       	brge	.+56     	; 0xac4 <main+0x126>
			prof_100[i]= prof_100[i-1]-slope_100;
     a8c:	fe 01       	movw	r30, r28
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	ed 53       	subi	r30, 0x3D	; 61
     a96:	fd 4f       	sbci	r31, 0xFD	; 253
     a98:	60 81       	ld	r22, Z
     a9a:	71 81       	ldd	r23, Z+1	; 0x01
     a9c:	07 2e       	mov	r0, r23
     a9e:	00 0c       	add	r0, r0
     aa0:	88 0b       	sbc	r24, r24
     aa2:	99 0b       	sbc	r25, r25
     aa4:	ae d2       	rcall	.+1372   	; 0x1002 <__floatsisf>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e8       	ldi	r19, 0x80	; 128
     aaa:	4b e3       	ldi	r20, 0x3B	; 59
     aac:	54 e4       	ldi	r21, 0x44	; 68
     aae:	11 d2       	rcall	.+1058   	; 0xed2 <__subsf3>
     ab0:	8e 01       	movw	r16, r28
     ab2:	00 0f       	add	r16, r16
     ab4:	11 1f       	adc	r17, r17
     ab6:	0d 53       	subi	r16, 0x3D	; 61
     ab8:	1d 4f       	sbci	r17, 0xFD	; 253
     aba:	70 d2       	rcall	.+1248   	; 0xf9c <__fixsfsi>
     abc:	f8 01       	movw	r30, r16
     abe:	71 83       	std	Z+1, r23	; 0x01
     ac0:	60 83       	st	Z, r22
     ac2:	31 c0       	rjmp	.+98     	; 0xb26 <main+0x188>
			}else if(i<80){
     ac4:	c0 35       	cpi	r28, 0x50	; 80
     ac6:	d1 05       	cpc	r29, r1
     ac8:	84 f4       	brge	.+32     	; 0xaea <main+0x14c>
			prof_100[i]= prof_100[i-1];
     aca:	fe 01       	movw	r30, r28
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	ed 53       	subi	r30, 0x3D	; 61
     ad4:	fd 4f       	sbci	r31, 0xFD	; 253
     ad6:	80 81       	ld	r24, Z
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
     ada:	fe 01       	movw	r30, r28
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	ed 53       	subi	r30, 0x3D	; 61
     ae2:	fd 4f       	sbci	r31, 0xFD	; 253
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	80 83       	st	Z, r24
     ae8:	1e c0       	rjmp	.+60     	; 0xb26 <main+0x188>
			}else if(i>79){
     aea:	c0 35       	cpi	r28, 0x50	; 80
     aec:	d1 05       	cpc	r29, r1
     aee:	dc f0       	brlt	.+54     	; 0xb26 <main+0x188>
			prof_100[i]= prof_100[i-1]+slope_100;
     af0:	fe 01       	movw	r30, r28
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	ed 53       	subi	r30, 0x3D	; 61
     afa:	fd 4f       	sbci	r31, 0xFD	; 253
     afc:	60 81       	ld	r22, Z
     afe:	71 81       	ldd	r23, Z+1	; 0x01
     b00:	07 2e       	mov	r0, r23
     b02:	00 0c       	add	r0, r0
     b04:	88 0b       	sbc	r24, r24
     b06:	99 0b       	sbc	r25, r25
     b08:	7c d2       	rcall	.+1272   	; 0x1002 <__floatsisf>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e8       	ldi	r19, 0x80	; 128
     b0e:	4b e3       	ldi	r20, 0x3B	; 59
     b10:	54 e4       	ldi	r21, 0x44	; 68
     b12:	e0 d1       	rcall	.+960    	; 0xed4 <__addsf3>
     b14:	8e 01       	movw	r16, r28
     b16:	00 0f       	add	r16, r16
     b18:	11 1f       	adc	r17, r17
     b1a:	0d 53       	subi	r16, 0x3D	; 61
     b1c:	1d 4f       	sbci	r17, 0xFD	; 253
     b1e:	3e d2       	rcall	.+1148   	; 0xf9c <__fixsfsi>
     b20:	f8 01       	movw	r30, r16
     b22:	71 83       	std	Z+1, r23	; 0x01
     b24:	60 83       	st	Z, r22
			prof_50[i]= prof_50[i-1];
		}else if(i>39){
		prof_50[i]= prof_50[i-1]+slope_50;
		}
	}
	for(int i=1;i<101;i++){
     b26:	21 96       	adiw	r28, 0x01	; 1
     b28:	c5 36       	cpi	r28, 0x65	; 101
     b2a:	d1 05       	cpc	r29, r1
     b2c:	0c f4       	brge	.+2      	; 0xb30 <main+0x192>
			prof_100[i]= prof_100[i-1]+slope_100;
		}
	}
	
	//set ports to input or output
	DDRA = 0x00; //sets PORTA to input
     b2e:	ab cf       	rjmp	.-170    	; 0xa86 <main+0xe8>
	DDRF = 0x00; //sets PORTF to input
     b30:	11 b8       	out	0x01, r1	; 1
	DDRC = 0xff; //set the PORTC as output
     b32:	10 ba       	out	0x10, r1	; 16
     b34:	8f ef       	ldi	r24, 0xFF	; 255
	DDRB = 0xff; //set the PORTB as output
     b36:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00; //set the PORTD as input
     b38:	84 b9       	out	0x04, r24	; 4
	
	PWM( ); //generate PWM
     b3a:	1a b8       	out	0x0a, r1	; 10
     b3c:	8e de       	rcall	.-740    	; 0x85a <PWM>
	InitLCD(LS_BLINK|LS_ULINE); //Initialize LCD module
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	68 db       	rcall	.-2352   	; 0x212 <InitLCD>
     b42:	60 e0       	ldi	r22, 0x00	; 0
	LCDClear();//Clear the screen
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	2e db       	rcall	.-2468   	; 0x1a4 <LCDByte>
     b48:	f8 94       	cli
     b4a:	8d b3       	in	r24, 0x1d	; 29
	cli( ); //disable interrupts
     b4c:	84 60       	ori	r24, 0x04	; 4
	// config the external interrupt ======================================
	EIMSK |= (_BV(INT2)); // enable INT2 (LEFT button - RAMP DOWN SYSTEM)
     b4e:	8d bb       	out	0x1d, r24	; 29
     b50:	e9 e6       	ldi	r30, 0x69	; 105
     b52:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (_BV(ISC21)); // falling edge interrupt
     b54:	80 81       	ld	r24, Z
     b56:	80 62       	ori	r24, 0x20	; 32
     b58:	80 83       	st	Z, r24
     b5a:	8d b3       	in	r24, 0x1d	; 29
     b5c:	88 60       	ori	r24, 0x08	; 8
	EIMSK |= (_BV(INT3)); // enable INT3 (RIGHT button - PAUSE SYSTEM)
     b5e:	8d bb       	out	0x1d, r24	; 29
     b60:	80 81       	ld	r24, Z
     b62:	80 6c       	ori	r24, 0xC0	; 192
	EICRA |= (_BV(ISC31) | _BV(ISC30)); //rising edge interrupt
     b64:	80 83       	st	Z, r24
     b66:	8d b3       	in	r24, 0x1d	; 29
     b68:	82 60       	ori	r24, 0x02	; 2
	EIMSK |= (_BV(INT1)); // enable INT1 (EX Sensor)
     b6a:	8d bb       	out	0x1d, r24	; 29
     b6c:	80 81       	ld	r24, Z
     b6e:	88 60       	ori	r24, 0x08	; 8
	EICRA |= (_BV(ISC11)); //falling edge interrupt
     b70:	80 83       	st	Z, r24
     b72:	8d b3       	in	r24, 0x1d	; 29
     b74:	80 61       	ori	r24, 0x10	; 16
	EIMSK |= (_BV(INT4)); // enable INT4 (OR Sensor)
     b76:	8d bb       	out	0x1d, r24	; 29
     b78:	ea e6       	ldi	r30, 0x6A	; 106
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
	EICRB |= (_BV(ISC41) | _BV(ISC40)); // rising edge interrupt
     b7c:	80 81       	ld	r24, Z
     b7e:	83 60       	ori	r24, 0x03	; 3
     b80:	80 83       	st	Z, r24
     b82:	ea e7       	ldi	r30, 0x7A	; 122
     b84:	f0 e0       	ldi	r31, 0x00	; 0

	
	//configure RL sensor interrupt
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0); // Set prescaler to 32 for ADC clock of approximately 250 kHz
     b86:	80 81       	ld	r24, Z
     b88:	85 60       	ori	r24, 0x05	; 5
     b8a:	80 83       	st	Z, r24
     b8c:	80 81       	ld	r24, Z
     b8e:	80 68       	ori	r24, 0x80	; 128
	ADCSRA |= _BV(ADEN); //enable ADC (RL sensor)
     b90:	80 83       	st	Z, r24
     b92:	80 81       	ld	r24, Z
     b94:	88 60       	ori	r24, 0x08	; 8
	ADCSRA |= _BV(ADIE); //configure ADC interrupt
     b96:	80 83       	st	Z, r24
     b98:	ec e7       	ldi	r30, 0x7C	; 124
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
	ADMUX |= _BV(REFS0); //set REFS0 to 1, selects voltage for ADC, ADLAR = 0 
     b9c:	80 81       	ld	r24, Z
     b9e:	80 64       	ori	r24, 0x40	; 64
     ba0:	80 83       	st	Z, r24
     ba2:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <rtnLink+0x1>
	
	rtnLink = NULL;
     ba6:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <rtnLink>
	newLink = NULL;
     baa:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <newLink+0x1>
     bae:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <newLink>
	setup(&head,&tail);
     bb2:	60 e4       	ldi	r22, 0x40	; 64
     bb4:	72 e0       	ldi	r23, 0x02	; 2
     bb6:	84 e4       	ldi	r24, 0x44	; 68
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	e0 db       	rcall	.-2112   	; 0x37c <setup>
     bbc:	8f eb       	ldi	r24, 0xBF	; 191
	initLink(&newLink);
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	e4 db       	rcall	.-2104   	; 0x38a <initLink>
     bc2:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <step_pos+0x1>
	
	step_pos = 0; //inital stepper position
     bc6:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <step_pos>
     bca:	78 94       	sei
     bcc:	81 e0       	ldi	r24, 0x01	; 1
	
	sei( ); //enable all interrupts
     bce:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <STATE>
	
	STATE=1;
     bd2:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <STATE>
	
	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	switch(STATE){
     bd6:	83 30       	cpi	r24, 0x03	; 3
     bd8:	09 f4       	brne	.+2      	; 0xbdc <main+0x23e>
     bda:	43 c0       	rjmp	.+134    	; 0xc62 <main+0x2c4>
     bdc:	28 f4       	brcc	.+10     	; 0xbe8 <main+0x24a>
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	51 f0       	breq	.+20     	; 0xbf6 <main+0x258>
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	69 f1       	breq	.+90     	; 0xc40 <main+0x2a2>
     be6:	f5 cf       	rjmp	.-22     	; 0xbd2 <main+0x234>
     be8:	84 30       	cpi	r24, 0x04	; 4
     bea:	09 f4       	brne	.+2      	; 0xbee <main+0x250>
     bec:	b8 c0       	rjmp	.+368    	; 0xd5e <main+0x3c0>
     bee:	85 30       	cpi	r24, 0x05	; 5
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <main+0x256>
     bf2:	1b c1       	rjmp	.+566    	; 0xe2a <main+0x48c>
     bf4:	ee cf       	rjmp	.-36     	; 0xbd2 <main+0x234>
     bf6:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <cur_pos+0x1>
		default :
		goto POLLING_STAGE;
	}//switch STATE

	HOMING_STAGE: //for homing stepper
	cur_pos = 0;
     bfa:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <cur_pos>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
	cur_step_dir = 1;//CCW
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <cur_step_dir+0x1>
     c06:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <cur_step_dir>
	while((PIND&0b10000000)==0b10000000){
		CCW(1);
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <main+0x27a>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	79 de       	rcall	.-782    	; 0x904 <CCW>
		mTimer(20000);
     c12:	80 e2       	ldi	r24, 0x20	; 32
     c14:	9e e4       	ldi	r25, 0x4E	; 78
     c16:	ad dd       	rcall	.-1190   	; 0x772 <mTimer>
     c18:	4f 99       	sbic	0x09, 7	; 9
	}//switch STATE

	HOMING_STAGE: //for homing stepper
	cur_pos = 0;
	cur_step_dir = 1;//CCW
	while((PIND&0b10000000)==0b10000000){
     c1a:	f8 cf       	rjmp	.-16     	; 0xc0c <main+0x26e>
     c1c:	c0 e0       	ldi	r28, 0x00	; 0
     c1e:	d0 e0       	ldi	r29, 0x00	; 0
     c20:	07 c0       	rjmp	.+14     	; 0xc30 <main+0x292>
     c22:	81 e0       	ldi	r24, 0x01	; 1
		CCW(1);
		mTimer(20000);
	}
	int center = 0;
	while(center < 4){
		CCW(1);
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	6e de       	rcall	.-804    	; 0x904 <CCW>
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	9e e4       	ldi	r25, 0x4E	; 78
		mTimer(20000);
     c2c:	a2 dd       	rcall	.-1212   	; 0x772 <mTimer>
     c2e:	21 96       	adiw	r28, 0x01	; 1
     c30:	c4 30       	cpi	r28, 0x04	; 4
		center++;
     c32:	d1 05       	cpc	r29, r1
	while((PIND&0b10000000)==0b10000000){
		CCW(1);
		mTimer(20000);
	}
	int center = 0;
	while(center < 4){
     c34:	b4 f3       	brlt	.-20     	; 0xc22 <main+0x284>
     c36:	80 e7       	ldi	r24, 0x70	; 112
     c38:	85 b9       	out	0x05, r24	; 5
		CCW(1);
		mTimer(20000);
		center++;
	}
	PORTB = DC_CCW;
     c3a:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <STATE>
	//Reset the state variable
	STATE = 0;
     c3e:	c9 cf       	rjmp	.-110    	; 0xbd2 <main+0x234>
     c40:	8f ef       	ldi	r24, 0xFF	; 255
	goto POLLING_STAGE;
     c42:	93 e0       	ldi	r25, 0x03	; 3

	REFLECTIVE_STAGE:
	// Do whatever is necessary HERE
	lowest = 1023;
     c44:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <lowest+0x1>
     c48:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lowest>
     c4c:	8f eb       	ldi	r24, 0xBF	; 191
	initLink(&newLink);
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	9c db       	rcall	.-2248   	; 0x38a <initLink>
     c52:	ea e7       	ldi	r30, 0x7A	; 122
     c54:	f0 e0       	ldi	r31, 0x00	; 0
	ADCSRA |= _BV(ADSC); //starts conversion
     c56:	80 81       	ld	r24, Z
     c58:	80 64       	ori	r24, 0x40	; 64
     c5a:	80 83       	st	Z, r24
     c5c:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <STATE>
	//Reset the state variable
	STATE = 0;
     c60:	b8 cf       	rjmp	.-144    	; 0xbd2 <main+0x234>
     c62:	4c e3       	ldi	r20, 0x3C	; 60
	goto POLLING_STAGE;
     c64:	52 e0       	ldi	r21, 0x02	; 2
	
	BUCKET_STAGE:
	//must initialize with black and then turn to next
	dequeue(&head,&tail,&rtnLink);
     c66:	60 e4       	ldi	r22, 0x40	; 64
     c68:	72 e0       	ldi	r23, 0x02	; 2
     c6a:	84 e4       	ldi	r24, 0x44	; 68
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	b9 db       	rcall	.-2190   	; 0x3e2 <dequeue>
     c70:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <num_belt>
     c74:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <num_belt+0x1>
	num_belt--;
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <num_belt+0x1>
     c7e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <num_belt>
     c82:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <rtnLink>
     c86:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <rtnLink+0x1>
	nxt = rtnLink->p.cur_pos;
     c8a:	80 81       	ld	r24, Z
     c8c:	91 81       	ldd	r25, Z+1	; 0x01
     c8e:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <nxt+0x1>
     c92:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <nxt>
     c96:	01 90       	ld	r0, Z+
     c98:	f0 81       	ld	r31, Z
     c9a:	e0 2d       	mov	r30, r0
	sorted[rtnLink->p.cur_pos]++;
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	e6 5d       	subi	r30, 0xD6	; 214
     ca2:	fd 4f       	sbci	r31, 0xFD	; 253
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	80 83       	st	Z, r24
     cae:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <step_pos>
	int diff = step_pos-nxt;
     cb2:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <step_pos+0x1>
     cb6:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <nxt>
     cba:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <nxt+0x1>
     cbe:	82 1b       	sub	r24, r18
     cc0:	93 0b       	sbc	r25, r19
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	91 05       	cpc	r25, r1
	if(diff == 1|| diff==-3){
     cc6:	21 f0       	breq	.+8      	; 0xcd0 <main+0x332>
     cc8:	8d 3f       	cpi	r24, 0xFD	; 253
     cca:	ff ef       	ldi	r31, 0xFF	; 255
     ccc:	9f 07       	cpc	r25, r31
     cce:	39 f4       	brne	.+14     	; 0xcde <main+0x340>
		CW(50);
     cd0:	82 e3       	ldi	r24, 0x32	; 50
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	ce dd       	rcall	.-1124   	; 0x872 <CW>
     cd6:	80 e1       	ldi	r24, 0x10	; 16
		mTimer(10000); 
     cd8:	97 e2       	ldi	r25, 0x27	; 39
     cda:	4b dd       	rcall	.-1386   	; 0x772 <mTimer>
     cdc:	2c c0       	rjmp	.+88     	; 0xd36 <main+0x398>
     cde:	8f 3f       	cpi	r24, 0xFF	; 255
     ce0:	2f ef       	ldi	r18, 0xFF	; 255
	}else if(diff == -1|| diff == 3){
     ce2:	92 07       	cpc	r25, r18
     ce4:	19 f0       	breq	.+6      	; 0xcec <main+0x34e>
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	39 f4       	brne	.+14     	; 0xcfa <main+0x35c>
		CCW(50);
     cec:	82 e3       	ldi	r24, 0x32	; 50
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	09 de       	rcall	.-1006   	; 0x904 <CCW>
     cf2:	80 e1       	ldi	r24, 0x10	; 16
		mTimer(10000);  
     cf4:	97 e2       	ldi	r25, 0x27	; 39
     cf6:	3d dd       	rcall	.-1414   	; 0x772 <mTimer>
     cf8:	1e c0       	rjmp	.+60     	; 0xd36 <main+0x398>
     cfa:	82 30       	cpi	r24, 0x02	; 2
	}else if(diff==2||diff==-2){
     cfc:	91 05       	cpc	r25, r1
     cfe:	11 f0       	breq	.+4      	; 0xd04 <main+0x366>
     d00:	02 96       	adiw	r24, 0x02	; 2
     d02:	c9 f4       	brne	.+50     	; 0xd36 <main+0x398>
		if(cur_step_dir==1){
     d04:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <cur_step_dir>
     d08:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <cur_step_dir+0x1>
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	39 f4       	brne	.+14     	; 0xd1e <main+0x380>
			CCW(100);
     d10:	84 e6       	ldi	r24, 0x64	; 100
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	f7 dd       	rcall	.-1042   	; 0x904 <CCW>
     d16:	80 e1       	ldi	r24, 0x10	; 16
			mTimer(10000); 
     d18:	97 e2       	ldi	r25, 0x27	; 39
     d1a:	2b dd       	rcall	.-1450   	; 0x772 <mTimer>
     d1c:	0c c0       	rjmp	.+24     	; 0xd36 <main+0x398>
     d1e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <cur_step_dir>
		}else if(cur_step_dir==0){
     d22:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <cur_step_dir+0x1>
     d26:	89 2b       	or	r24, r25
     d28:	31 f4       	brne	.+12     	; 0xd36 <main+0x398>
     d2a:	84 e6       	ldi	r24, 0x64	; 100
			CW(100);
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	a1 dd       	rcall	.-1214   	; 0x872 <CW>
     d30:	80 e1       	ldi	r24, 0x10	; 16
     d32:	97 e2       	ldi	r25, 0x27	; 39
			mTimer(10000);
     d34:	1e dd       	rcall	.-1476   	; 0x772 <mTimer>
     d36:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <rtnLink>
     d3a:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <rtnLink+0x1>
		} 
	}else if(diff == 0){
		//stay in the same position
	}
	step_pos = rtnLink->p.cur_pos;
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <step_pos+0x1>
     d46:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <step_pos>
     d4a:	80 e7       	ldi	r24, 0x70	; 112
     d4c:	85 b9       	out	0x05, r24	; 5
	PORTB=DC_CCW; //start belt
     d4e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <rtnLink>
	//Reset the state variable
	free(rtnLink);
     d52:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <rtnLink+0x1>
     d56:	a0 d2       	rcall	.+1344   	; 0x1298 <free>
	STATE = 0;
     d58:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <STATE>
	goto POLLING_STAGE;
	
	PAUSE_STAGE:
	prev = PORTB;
     d5c:	3a cf       	rjmp	.-396    	; 0xbd2 <main+0x234>
     d5e:	85 b1       	in	r24, 0x05	; 5
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <prev+0x1>
	if(prev==DC_CCW){
     d66:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <prev>
     d6a:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <prev>
     d6e:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <prev+0x1>
		PORTB = brake;
     d72:	80 37       	cpi	r24, 0x70	; 112
		LCDClear();
     d74:	91 05       	cpc	r25, r1
     d76:	09 f0       	breq	.+2      	; 0xd7a <main+0x3dc>
     d78:	50 c0       	rjmp	.+160    	; 0xe1a <main+0x47c>
		LCDWriteStringXY(0,0,"BELT");
     d7a:	88 e7       	ldi	r24, 0x78	; 120
     d7c:	85 b9       	out	0x05, r24	; 5
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	10 da       	rcall	.-3040   	; 0x1a4 <LCDByte>
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	80 e0       	ldi	r24, 0x00	; 0
		LCDWriteStringXY(5,0,"BL");
     d88:	f1 da       	rcall	.-2590   	; 0x36c <LCDGotoXY>
     d8a:	88 e1       	ldi	r24, 0x18	; 24
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	82 da       	rcall	.-2812   	; 0x294 <LCDWriteString>
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	85 e0       	ldi	r24, 0x05	; 5
     d94:	eb da       	rcall	.-2602   	; 0x36c <LCDGotoXY>
		LCDWriteStringXY(8,0,"ST");
     d96:	8d e1       	ldi	r24, 0x1D	; 29
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	7c da       	rcall	.-2824   	; 0x294 <LCDWriteString>
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	88 e0       	ldi	r24, 0x08	; 8
     da0:	e5 da       	rcall	.-2614   	; 0x36c <LCDGotoXY>
		LCDWriteStringXY(11,0,"AL");
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	76 da       	rcall	.-2836   	; 0x294 <LCDWriteString>
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	8b e0       	ldi	r24, 0x0B	; 11
     dac:	df da       	rcall	.-2626   	; 0x36c <LCDGotoXY>
		LCDWriteStringXY(14,0,"WT");
     dae:	83 e2       	ldi	r24, 0x23	; 35
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	70 da       	rcall	.-2848   	; 0x294 <LCDWriteString>
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	8e e0       	ldi	r24, 0x0E	; 14
     db8:	d9 da       	rcall	.-2638   	; 0x36c <LCDGotoXY>
		LCDWriteIntXY(0,1,num_belt,2);
     dba:	86 e2       	ldi	r24, 0x26	; 38
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	6a da       	rcall	.-2860   	; 0x294 <LCDWriteString>
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	d3 da       	rcall	.-2650   	; 0x36c <LCDGotoXY>
     dc6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <num_belt>
     dca:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <num_belt+0x1>
		LCDWriteIntXY(5,1,sorted[0],2);
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	6d da       	rcall	.-2854   	; 0x2ae <LCDWriteInt>
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	85 e0       	ldi	r24, 0x05	; 5
     dd8:	c9 da       	rcall	.-2670   	; 0x36c <LCDGotoXY>
     dda:	ca e2       	ldi	r28, 0x2A	; 42
     ddc:	d2 e0       	ldi	r29, 0x02	; 2
     dde:	62 e0       	ldi	r22, 0x02	; 2
		LCDWriteIntXY(8,1,sorted[1],2);
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	88 81       	ld	r24, Y
     de4:	99 81       	ldd	r25, Y+1	; 0x01
     de6:	63 da       	rcall	.-2874   	; 0x2ae <LCDWriteInt>
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	88 e0       	ldi	r24, 0x08	; 8
     dec:	bf da       	rcall	.-2690   	; 0x36c <LCDGotoXY>
		LCDWriteIntXY(11,1,sorted[3],2);
     dee:	62 e0       	ldi	r22, 0x02	; 2
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	9b 81       	ldd	r25, Y+3	; 0x03
     df6:	5b da       	rcall	.-2890   	; 0x2ae <LCDWriteInt>
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	8b e0       	ldi	r24, 0x0B	; 11
		LCDWriteIntXY(14,1,sorted[2],2);
     dfc:	b7 da       	rcall	.-2706   	; 0x36c <LCDGotoXY>
     dfe:	62 e0       	ldi	r22, 0x02	; 2
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	53 da       	rcall	.-2906   	; 0x2ae <LCDWriteInt>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	8e e0       	ldi	r24, 0x0E	; 14
     e0c:	af da       	rcall	.-2722   	; 0x36c <LCDGotoXY>
		
		}else{
		PORTB=DC_CCW;
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	70 e0       	ldi	r23, 0x00	; 0
		LCDClear();
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	4b da       	rcall	.-2922   	; 0x2ae <LCDWriteInt>
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <main+0x486>
	}//end of if
	//Reset the state variable
	
	STATE = 0;
     e1a:	80 e7       	ldi	r24, 0x70	; 112
	goto POLLING_STAGE;
     e1c:	85 b9       	out	0x05, r24	; 5
	
	END:
	PORTB = disable;
	LCDClear();
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	c0 d9       	rcall	.-3200   	; 0x1a4 <LCDByte>
     e24:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <STATE>
	LCDWriteStringXY(0,0,"BELT");
     e28:	d4 ce       	rjmp	.-600    	; 0xbd2 <main+0x234>
     e2a:	15 b8       	out	0x05, r1	; 5
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	b9 d9       	rcall	.-3214   	; 0x1a4 <LCDByte>
	LCDWriteStringXY(5,0,"BL");
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	9a da       	rcall	.-2764   	; 0x36c <LCDGotoXY>
     e38:	88 e1       	ldi	r24, 0x18	; 24
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	2b da       	rcall	.-2986   	; 0x294 <LCDWriteString>
	LCDWriteStringXY(8,0,"ST");
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	85 e0       	ldi	r24, 0x05	; 5
     e42:	94 da       	rcall	.-2776   	; 0x36c <LCDGotoXY>
     e44:	8d e1       	ldi	r24, 0x1D	; 29
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	25 da       	rcall	.-2998   	; 0x294 <LCDWriteString>
     e4a:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteStringXY(11,0,"AL");
     e4c:	88 e0       	ldi	r24, 0x08	; 8
     e4e:	8e da       	rcall	.-2788   	; 0x36c <LCDGotoXY>
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	1f da       	rcall	.-3010   	; 0x294 <LCDWriteString>
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	8b e0       	ldi	r24, 0x0B	; 11
     e5a:	88 da       	rcall	.-2800   	; 0x36c <LCDGotoXY>
	LCDWriteStringXY(14,0,"WT");
     e5c:	83 e2       	ldi	r24, 0x23	; 35
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	19 da       	rcall	.-3022   	; 0x294 <LCDWriteString>
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	8e e0       	ldi	r24, 0x0E	; 14
     e66:	82 da       	rcall	.-2812   	; 0x36c <LCDGotoXY>
     e68:	86 e2       	ldi	r24, 0x26	; 38
     e6a:	92 e0       	ldi	r25, 0x02	; 2
	LCDWriteIntXY(0,1,0,2);
     e6c:	13 da       	rcall	.-3034   	; 0x294 <LCDWriteString>
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	7c da       	rcall	.-2824   	; 0x36c <LCDGotoXY>
     e74:	62 e0       	ldi	r22, 0x02	; 2
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	18 da       	rcall	.-3024   	; 0x2ae <LCDWriteInt>
     e7e:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(5,1,sorted[0],2);
     e80:	85 e0       	ldi	r24, 0x05	; 5
     e82:	74 da       	rcall	.-2840   	; 0x36c <LCDGotoXY>
     e84:	ca e2       	ldi	r28, 0x2A	; 42
     e86:	d2 e0       	ldi	r29, 0x02	; 2
     e88:	62 e0       	ldi	r22, 0x02	; 2
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	88 81       	ld	r24, Y
     e8e:	99 81       	ldd	r25, Y+1	; 0x01
     e90:	0e da       	rcall	.-3044   	; 0x2ae <LCDWriteInt>
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	88 e0       	ldi	r24, 0x08	; 8
     e96:	6a da       	rcall	.-2860   	; 0x36c <LCDGotoXY>
	LCDWriteIntXY(8,1,sorted[1],2);
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	06 da       	rcall	.-3060   	; 0x2ae <LCDWriteInt>
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	8b e0       	ldi	r24, 0x0B	; 11
     ea6:	62 da       	rcall	.-2876   	; 0x36c <LCDGotoXY>
     ea8:	62 e0       	ldi	r22, 0x02	; 2
     eaa:	70 e0       	ldi	r23, 0x00	; 0
	LCDWriteIntXY(11,1,sorted[3],2);
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	9f 81       	ldd	r25, Y+7	; 0x07
     eb0:	fe d9       	rcall	.-3076   	; 0x2ae <LCDWriteInt>
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	8e e0       	ldi	r24, 0x0E	; 14
     eb6:	5a da       	rcall	.-2892   	; 0x36c <LCDGotoXY>
     eb8:	62 e0       	ldi	r22, 0x02	; 2
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
	LCDWriteIntXY(14,1,sorted[2],2);
     ec0:	f6 d9       	rcall	.-3092   	; 0x2ae <LCDWriteInt>
     ec2:	f8 94       	cli
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <__subsf3>:
     ed2:	50 58       	subi	r21, 0x80	; 128

00000ed4 <__addsf3>:
	
	cli( ); //disable interrupts
     ed4:	bb 27       	eor	r27, r27
	return 0;

} //end main
     ed6:	aa 27       	eor	r26, r26
     ed8:	0e d0       	rcall	.+28     	; 0xef6 <__addsf3x>
     eda:	e5 c0       	rjmp	.+458    	; 0x10a6 <__fp_round>
     edc:	d6 d0       	rcall	.+428    	; 0x108a <__fp_pscA>
     ede:	30 f0       	brcs	.+12     	; 0xeec <__addsf3+0x18>
     ee0:	db d0       	rcall	.+438    	; 0x1098 <__fp_pscB>
     ee2:	20 f0       	brcs	.+8      	; 0xeec <__addsf3+0x18>
     ee4:	31 f4       	brne	.+12     	; 0xef2 <__addsf3+0x1e>
     ee6:	9f 3f       	cpi	r25, 0xFF	; 255
     ee8:	11 f4       	brne	.+4      	; 0xeee <__addsf3+0x1a>
     eea:	1e f4       	brtc	.+6      	; 0xef2 <__addsf3+0x1e>
     eec:	cb c0       	rjmp	.+406    	; 0x1084 <__fp_nan>
     eee:	0e f4       	brtc	.+2      	; 0xef2 <__addsf3+0x1e>
     ef0:	e0 95       	com	r30
     ef2:	e7 fb       	bst	r30, 7
     ef4:	c1 c0       	rjmp	.+386    	; 0x1078 <__fp_inf>

00000ef6 <__addsf3x>:
     ef6:	e9 2f       	mov	r30, r25
     ef8:	e7 d0       	rcall	.+462    	; 0x10c8 <__fp_split3>
     efa:	80 f3       	brcs	.-32     	; 0xedc <__addsf3+0x8>
     efc:	ba 17       	cp	r27, r26
     efe:	62 07       	cpc	r22, r18
     f00:	73 07       	cpc	r23, r19
     f02:	84 07       	cpc	r24, r20
     f04:	95 07       	cpc	r25, r21
     f06:	18 f0       	brcs	.+6      	; 0xf0e <__addsf3x+0x18>
     f08:	71 f4       	brne	.+28     	; 0xf26 <__addsf3x+0x30>
     f0a:	9e f5       	brtc	.+102    	; 0xf72 <__addsf3x+0x7c>
     f0c:	ff c0       	rjmp	.+510    	; 0x110c <__fp_zero>
     f0e:	0e f4       	brtc	.+2      	; 0xf12 <__addsf3x+0x1c>
     f10:	e0 95       	com	r30
     f12:	0b 2e       	mov	r0, r27
     f14:	ba 2f       	mov	r27, r26
     f16:	a0 2d       	mov	r26, r0
     f18:	0b 01       	movw	r0, r22
     f1a:	b9 01       	movw	r22, r18
     f1c:	90 01       	movw	r18, r0
     f1e:	0c 01       	movw	r0, r24
     f20:	ca 01       	movw	r24, r20
     f22:	a0 01       	movw	r20, r0
     f24:	11 24       	eor	r1, r1
     f26:	ff 27       	eor	r31, r31
     f28:	59 1b       	sub	r21, r25
     f2a:	99 f0       	breq	.+38     	; 0xf52 <__addsf3x+0x5c>
     f2c:	59 3f       	cpi	r21, 0xF9	; 249
     f2e:	50 f4       	brcc	.+20     	; 0xf44 <__addsf3x+0x4e>
     f30:	50 3e       	cpi	r21, 0xE0	; 224
     f32:	68 f1       	brcs	.+90     	; 0xf8e <__addsf3x+0x98>
     f34:	1a 16       	cp	r1, r26
     f36:	f0 40       	sbci	r31, 0x00	; 0
     f38:	a2 2f       	mov	r26, r18
     f3a:	23 2f       	mov	r18, r19
     f3c:	34 2f       	mov	r19, r20
     f3e:	44 27       	eor	r20, r20
     f40:	58 5f       	subi	r21, 0xF8	; 248
     f42:	f3 cf       	rjmp	.-26     	; 0xf2a <__addsf3x+0x34>
     f44:	46 95       	lsr	r20
     f46:	37 95       	ror	r19
     f48:	27 95       	ror	r18
     f4a:	a7 95       	ror	r26
     f4c:	f0 40       	sbci	r31, 0x00	; 0
     f4e:	53 95       	inc	r21
     f50:	c9 f7       	brne	.-14     	; 0xf44 <__addsf3x+0x4e>
     f52:	7e f4       	brtc	.+30     	; 0xf72 <__addsf3x+0x7c>
     f54:	1f 16       	cp	r1, r31
     f56:	ba 0b       	sbc	r27, r26
     f58:	62 0b       	sbc	r22, r18
     f5a:	73 0b       	sbc	r23, r19
     f5c:	84 0b       	sbc	r24, r20
     f5e:	ba f0       	brmi	.+46     	; 0xf8e <__addsf3x+0x98>
     f60:	91 50       	subi	r25, 0x01	; 1
     f62:	a1 f0       	breq	.+40     	; 0xf8c <__addsf3x+0x96>
     f64:	ff 0f       	add	r31, r31
     f66:	bb 1f       	adc	r27, r27
     f68:	66 1f       	adc	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	c2 f7       	brpl	.-16     	; 0xf60 <__addsf3x+0x6a>
     f70:	0e c0       	rjmp	.+28     	; 0xf8e <__addsf3x+0x98>
     f72:	ba 0f       	add	r27, r26
     f74:	62 1f       	adc	r22, r18
     f76:	73 1f       	adc	r23, r19
     f78:	84 1f       	adc	r24, r20
     f7a:	48 f4       	brcc	.+18     	; 0xf8e <__addsf3x+0x98>
     f7c:	87 95       	ror	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b7 95       	ror	r27
     f84:	f7 95       	ror	r31
     f86:	9e 3f       	cpi	r25, 0xFE	; 254
     f88:	08 f0       	brcs	.+2      	; 0xf8c <__addsf3x+0x96>
     f8a:	b3 cf       	rjmp	.-154    	; 0xef2 <__addsf3+0x1e>
     f8c:	93 95       	inc	r25
     f8e:	88 0f       	add	r24, r24
     f90:	08 f0       	brcs	.+2      	; 0xf94 <__addsf3x+0x9e>
     f92:	99 27       	eor	r25, r25
     f94:	ee 0f       	add	r30, r30
     f96:	97 95       	ror	r25
     f98:	87 95       	ror	r24
     f9a:	08 95       	ret

00000f9c <__fixsfsi>:
     f9c:	04 d0       	rcall	.+8      	; 0xfa6 <__fixunssfsi>
     f9e:	68 94       	set
     fa0:	b1 11       	cpse	r27, r1
     fa2:	b5 c0       	rjmp	.+362    	; 0x110e <__fp_szero>
     fa4:	08 95       	ret

00000fa6 <__fixunssfsi>:
     fa6:	98 d0       	rcall	.+304    	; 0x10d8 <__fp_splitA>
     fa8:	88 f0       	brcs	.+34     	; 0xfcc <__fixunssfsi+0x26>
     faa:	9f 57       	subi	r25, 0x7F	; 127
     fac:	90 f0       	brcs	.+36     	; 0xfd2 <__fixunssfsi+0x2c>
     fae:	b9 2f       	mov	r27, r25
     fb0:	99 27       	eor	r25, r25
     fb2:	b7 51       	subi	r27, 0x17	; 23
     fb4:	a0 f0       	brcs	.+40     	; 0xfde <__fixunssfsi+0x38>
     fb6:	d1 f0       	breq	.+52     	; 0xfec <__fixunssfsi+0x46>
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	1a f0       	brmi	.+6      	; 0xfc8 <__fixunssfsi+0x22>
     fc2:	ba 95       	dec	r27
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__fixunssfsi+0x12>
     fc6:	12 c0       	rjmp	.+36     	; 0xfec <__fixunssfsi+0x46>
     fc8:	b1 30       	cpi	r27, 0x01	; 1
     fca:	81 f0       	breq	.+32     	; 0xfec <__fixunssfsi+0x46>
     fcc:	9f d0       	rcall	.+318    	; 0x110c <__fp_zero>
     fce:	b1 e0       	ldi	r27, 0x01	; 1
     fd0:	08 95       	ret
     fd2:	9c c0       	rjmp	.+312    	; 0x110c <__fp_zero>
     fd4:	67 2f       	mov	r22, r23
     fd6:	78 2f       	mov	r23, r24
     fd8:	88 27       	eor	r24, r24
     fda:	b8 5f       	subi	r27, 0xF8	; 248
     fdc:	39 f0       	breq	.+14     	; 0xfec <__fixunssfsi+0x46>
     fde:	b9 3f       	cpi	r27, 0xF9	; 249
     fe0:	cc f3       	brlt	.-14     	; 0xfd4 <__fixunssfsi+0x2e>
     fe2:	86 95       	lsr	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b3 95       	inc	r27
     fea:	d9 f7       	brne	.-10     	; 0xfe2 <__fixunssfsi+0x3c>
     fec:	3e f4       	brtc	.+14     	; 0xffc <__fixunssfsi+0x56>
     fee:	90 95       	com	r25
     ff0:	80 95       	com	r24
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	08 95       	ret

00000ffe <__floatunsisf>:
     ffe:	e8 94       	clt
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <__floatsisf+0x12>

00001002 <__floatsisf>:
    1002:	97 fb       	bst	r25, 7
    1004:	3e f4       	brtc	.+14     	; 0x1014 <__floatsisf+0x12>
    1006:	90 95       	com	r25
    1008:	80 95       	com	r24
    100a:	70 95       	com	r23
    100c:	61 95       	neg	r22
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	99 23       	and	r25, r25
    1016:	a9 f0       	breq	.+42     	; 0x1042 <__floatsisf+0x40>
    1018:	f9 2f       	mov	r31, r25
    101a:	96 e9       	ldi	r25, 0x96	; 150
    101c:	bb 27       	eor	r27, r27
    101e:	93 95       	inc	r25
    1020:	f6 95       	lsr	r31
    1022:	87 95       	ror	r24
    1024:	77 95       	ror	r23
    1026:	67 95       	ror	r22
    1028:	b7 95       	ror	r27
    102a:	f1 11       	cpse	r31, r1
    102c:	f8 cf       	rjmp	.-16     	; 0x101e <__floatsisf+0x1c>
    102e:	fa f4       	brpl	.+62     	; 0x106e <__floatsisf+0x6c>
    1030:	bb 0f       	add	r27, r27
    1032:	11 f4       	brne	.+4      	; 0x1038 <__floatsisf+0x36>
    1034:	60 ff       	sbrs	r22, 0
    1036:	1b c0       	rjmp	.+54     	; 0x106e <__floatsisf+0x6c>
    1038:	6f 5f       	subi	r22, 0xFF	; 255
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	8f 4f       	sbci	r24, 0xFF	; 255
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	16 c0       	rjmp	.+44     	; 0x106e <__floatsisf+0x6c>
    1042:	88 23       	and	r24, r24
    1044:	11 f0       	breq	.+4      	; 0x104a <__floatsisf+0x48>
    1046:	96 e9       	ldi	r25, 0x96	; 150
    1048:	11 c0       	rjmp	.+34     	; 0x106c <__floatsisf+0x6a>
    104a:	77 23       	and	r23, r23
    104c:	21 f0       	breq	.+8      	; 0x1056 <__floatsisf+0x54>
    104e:	9e e8       	ldi	r25, 0x8E	; 142
    1050:	87 2f       	mov	r24, r23
    1052:	76 2f       	mov	r23, r22
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <__floatsisf+0x5e>
    1056:	66 23       	and	r22, r22
    1058:	71 f0       	breq	.+28     	; 0x1076 <__floatsisf+0x74>
    105a:	96 e8       	ldi	r25, 0x86	; 134
    105c:	86 2f       	mov	r24, r22
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	2a f0       	brmi	.+10     	; 0x106e <__floatsisf+0x6c>
    1064:	9a 95       	dec	r25
    1066:	66 0f       	add	r22, r22
    1068:	77 1f       	adc	r23, r23
    106a:	88 1f       	adc	r24, r24
    106c:	da f7       	brpl	.-10     	; 0x1064 <__floatsisf+0x62>
    106e:	88 0f       	add	r24, r24
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	97 f9       	bld	r25, 7
    1076:	08 95       	ret

00001078 <__fp_inf>:
    1078:	97 f9       	bld	r25, 7
    107a:	9f 67       	ori	r25, 0x7F	; 127
    107c:	80 e8       	ldi	r24, 0x80	; 128
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	08 95       	ret

00001084 <__fp_nan>:
    1084:	9f ef       	ldi	r25, 0xFF	; 255
    1086:	80 ec       	ldi	r24, 0xC0	; 192
    1088:	08 95       	ret

0000108a <__fp_pscA>:
    108a:	00 24       	eor	r0, r0
    108c:	0a 94       	dec	r0
    108e:	16 16       	cp	r1, r22
    1090:	17 06       	cpc	r1, r23
    1092:	18 06       	cpc	r1, r24
    1094:	09 06       	cpc	r0, r25
    1096:	08 95       	ret

00001098 <__fp_pscB>:
    1098:	00 24       	eor	r0, r0
    109a:	0a 94       	dec	r0
    109c:	12 16       	cp	r1, r18
    109e:	13 06       	cpc	r1, r19
    10a0:	14 06       	cpc	r1, r20
    10a2:	05 06       	cpc	r0, r21
    10a4:	08 95       	ret

000010a6 <__fp_round>:
    10a6:	09 2e       	mov	r0, r25
    10a8:	03 94       	inc	r0
    10aa:	00 0c       	add	r0, r0
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <__fp_round+0xc>
    10ae:	88 23       	and	r24, r24
    10b0:	52 f0       	brmi	.+20     	; 0x10c6 <__fp_round+0x20>
    10b2:	bb 0f       	add	r27, r27
    10b4:	40 f4       	brcc	.+16     	; 0x10c6 <__fp_round+0x20>
    10b6:	bf 2b       	or	r27, r31
    10b8:	11 f4       	brne	.+4      	; 0x10be <__fp_round+0x18>
    10ba:	60 ff       	sbrs	r22, 0
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <__fp_round+0x20>
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8f 4f       	sbci	r24, 0xFF	; 255
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	08 95       	ret

000010c8 <__fp_split3>:
    10c8:	57 fd       	sbrc	r21, 7
    10ca:	90 58       	subi	r25, 0x80	; 128
    10cc:	44 0f       	add	r20, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	59 f0       	breq	.+22     	; 0x10e8 <__fp_splitA+0x10>
    10d2:	5f 3f       	cpi	r21, 0xFF	; 255
    10d4:	71 f0       	breq	.+28     	; 0x10f2 <__fp_splitA+0x1a>
    10d6:	47 95       	ror	r20

000010d8 <__fp_splitA>:
    10d8:	88 0f       	add	r24, r24
    10da:	97 fb       	bst	r25, 7
    10dc:	99 1f       	adc	r25, r25
    10de:	61 f0       	breq	.+24     	; 0x10f8 <__fp_splitA+0x20>
    10e0:	9f 3f       	cpi	r25, 0xFF	; 255
    10e2:	79 f0       	breq	.+30     	; 0x1102 <__fp_splitA+0x2a>
    10e4:	87 95       	ror	r24
    10e6:	08 95       	ret
    10e8:	12 16       	cp	r1, r18
    10ea:	13 06       	cpc	r1, r19
    10ec:	14 06       	cpc	r1, r20
    10ee:	55 1f       	adc	r21, r21
    10f0:	f2 cf       	rjmp	.-28     	; 0x10d6 <__fp_split3+0xe>
    10f2:	46 95       	lsr	r20
    10f4:	f1 df       	rcall	.-30     	; 0x10d8 <__fp_splitA>
    10f6:	08 c0       	rjmp	.+16     	; 0x1108 <__fp_splitA+0x30>
    10f8:	16 16       	cp	r1, r22
    10fa:	17 06       	cpc	r1, r23
    10fc:	18 06       	cpc	r1, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	f1 cf       	rjmp	.-30     	; 0x10e4 <__fp_splitA+0xc>
    1102:	86 95       	lsr	r24
    1104:	71 05       	cpc	r23, r1
    1106:	61 05       	cpc	r22, r1
    1108:	08 94       	sec
    110a:	08 95       	ret

0000110c <__fp_zero>:
    110c:	e8 94       	clt

0000110e <__fp_szero>:
    110e:	bb 27       	eor	r27, r27
    1110:	66 27       	eor	r22, r22
    1112:	77 27       	eor	r23, r23
    1114:	cb 01       	movw	r24, r22
    1116:	97 f9       	bld	r25, 7
    1118:	08 95       	ret

0000111a <__divmodhi4>:
    111a:	97 fb       	bst	r25, 7
    111c:	07 2e       	mov	r0, r23
    111e:	16 f4       	brtc	.+4      	; 0x1124 <__divmodhi4+0xa>
    1120:	00 94       	com	r0
    1122:	06 d0       	rcall	.+12     	; 0x1130 <__divmodhi4_neg1>
    1124:	77 fd       	sbrc	r23, 7
    1126:	08 d0       	rcall	.+16     	; 0x1138 <__divmodhi4_neg2>
    1128:	0b d0       	rcall	.+22     	; 0x1140 <__udivmodhi4>
    112a:	07 fc       	sbrc	r0, 7
    112c:	05 d0       	rcall	.+10     	; 0x1138 <__divmodhi4_neg2>
    112e:	3e f4       	brtc	.+14     	; 0x113e <__divmodhi4_exit>

00001130 <__divmodhi4_neg1>:
    1130:	90 95       	com	r25
    1132:	81 95       	neg	r24
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	08 95       	ret

00001138 <__divmodhi4_neg2>:
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255

0000113e <__divmodhi4_exit>:
    113e:	08 95       	ret

00001140 <__udivmodhi4>:
    1140:	aa 1b       	sub	r26, r26
    1142:	bb 1b       	sub	r27, r27
    1144:	51 e1       	ldi	r21, 0x11	; 17
    1146:	07 c0       	rjmp	.+14     	; 0x1156 <__udivmodhi4_ep>

00001148 <__udivmodhi4_loop>:
    1148:	aa 1f       	adc	r26, r26
    114a:	bb 1f       	adc	r27, r27
    114c:	a6 17       	cp	r26, r22
    114e:	b7 07       	cpc	r27, r23
    1150:	10 f0       	brcs	.+4      	; 0x1156 <__udivmodhi4_ep>
    1152:	a6 1b       	sub	r26, r22
    1154:	b7 0b       	sbc	r27, r23

00001156 <__udivmodhi4_ep>:
    1156:	88 1f       	adc	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	5a 95       	dec	r21
    115c:	a9 f7       	brne	.-22     	; 0x1148 <__udivmodhi4_loop>
    115e:	80 95       	com	r24
    1160:	90 95       	com	r25
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	08 95       	ret

00001168 <malloc>:
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	91 05       	cpc	r25, r1
    1174:	10 f4       	brcc	.+4      	; 0x117a <malloc+0x12>
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <__flp>
    117e:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <__flp+0x1>
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	19 f1       	breq	.+70     	; 0x11d4 <malloc+0x6c>
    118e:	40 81       	ld	r20, Z
    1190:	51 81       	ldd	r21, Z+1	; 0x01
    1192:	02 81       	ldd	r16, Z+2	; 0x02
    1194:	13 81       	ldd	r17, Z+3	; 0x03
    1196:	48 17       	cp	r20, r24
    1198:	59 07       	cpc	r21, r25
    119a:	c8 f0       	brcs	.+50     	; 0x11ce <malloc+0x66>
    119c:	84 17       	cp	r24, r20
    119e:	95 07       	cpc	r25, r21
    11a0:	69 f4       	brne	.+26     	; 0x11bc <malloc+0x54>
    11a2:	10 97       	sbiw	r26, 0x00	; 0
    11a4:	31 f0       	breq	.+12     	; 0x11b2 <malloc+0x4a>
    11a6:	12 96       	adiw	r26, 0x02	; 2
    11a8:	0c 93       	st	X, r16
    11aa:	12 97       	sbiw	r26, 0x02	; 2
    11ac:	13 96       	adiw	r26, 0x03	; 3
    11ae:	1c 93       	st	X, r17
    11b0:	27 c0       	rjmp	.+78     	; 0x1200 <malloc+0x98>
    11b2:	00 93 8f 03 	sts	0x038F, r16	; 0x80038f <__flp>
    11b6:	10 93 90 03 	sts	0x0390, r17	; 0x800390 <__flp+0x1>
    11ba:	22 c0       	rjmp	.+68     	; 0x1200 <malloc+0x98>
    11bc:	21 15       	cp	r18, r1
    11be:	31 05       	cpc	r19, r1
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <malloc+0x60>
    11c2:	42 17       	cp	r20, r18
    11c4:	53 07       	cpc	r21, r19
    11c6:	18 f4       	brcc	.+6      	; 0x11ce <malloc+0x66>
    11c8:	9a 01       	movw	r18, r20
    11ca:	bd 01       	movw	r22, r26
    11cc:	ef 01       	movw	r28, r30
    11ce:	df 01       	movw	r26, r30
    11d0:	f8 01       	movw	r30, r16
    11d2:	db cf       	rjmp	.-74     	; 0x118a <malloc+0x22>
    11d4:	21 15       	cp	r18, r1
    11d6:	31 05       	cpc	r19, r1
    11d8:	f9 f0       	breq	.+62     	; 0x1218 <malloc+0xb0>
    11da:	28 1b       	sub	r18, r24
    11dc:	39 0b       	sbc	r19, r25
    11de:	24 30       	cpi	r18, 0x04	; 4
    11e0:	31 05       	cpc	r19, r1
    11e2:	80 f4       	brcc	.+32     	; 0x1204 <malloc+0x9c>
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	61 15       	cp	r22, r1
    11ea:	71 05       	cpc	r23, r1
    11ec:	21 f0       	breq	.+8      	; 0x11f6 <malloc+0x8e>
    11ee:	fb 01       	movw	r30, r22
    11f0:	93 83       	std	Z+3, r25	; 0x03
    11f2:	82 83       	std	Z+2, r24	; 0x02
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <malloc+0x96>
    11f6:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <__flp+0x1>
    11fa:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <__flp>
    11fe:	fe 01       	movw	r30, r28
    1200:	32 96       	adiw	r30, 0x02	; 2
    1202:	44 c0       	rjmp	.+136    	; 0x128c <malloc+0x124>
    1204:	fe 01       	movw	r30, r28
    1206:	e2 0f       	add	r30, r18
    1208:	f3 1f       	adc	r31, r19
    120a:	81 93       	st	Z+, r24
    120c:	91 93       	st	Z+, r25
    120e:	22 50       	subi	r18, 0x02	; 2
    1210:	31 09       	sbc	r19, r1
    1212:	39 83       	std	Y+1, r19	; 0x01
    1214:	28 83       	st	Y, r18
    1216:	3a c0       	rjmp	.+116    	; 0x128c <malloc+0x124>
    1218:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <__brkval>
    121c:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <__brkval+0x1>
    1220:	23 2b       	or	r18, r19
    1222:	41 f4       	brne	.+16     	; 0x1234 <malloc+0xcc>
    1224:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1228:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    122c:	30 93 8e 03 	sts	0x038E, r19	; 0x80038e <__brkval+0x1>
    1230:	20 93 8d 03 	sts	0x038D, r18	; 0x80038d <__brkval>
    1234:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1238:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    123c:	21 15       	cp	r18, r1
    123e:	31 05       	cpc	r19, r1
    1240:	41 f4       	brne	.+16     	; 0x1252 <malloc+0xea>
    1242:	2d b7       	in	r18, 0x3d	; 61
    1244:	3e b7       	in	r19, 0x3e	; 62
    1246:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    124a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    124e:	24 1b       	sub	r18, r20
    1250:	35 0b       	sbc	r19, r21
    1252:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <__brkval>
    1256:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <__brkval+0x1>
    125a:	e2 17       	cp	r30, r18
    125c:	f3 07       	cpc	r31, r19
    125e:	a0 f4       	brcc	.+40     	; 0x1288 <malloc+0x120>
    1260:	2e 1b       	sub	r18, r30
    1262:	3f 0b       	sbc	r19, r31
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	78 f0       	brcs	.+30     	; 0x1288 <malloc+0x120>
    126a:	ac 01       	movw	r20, r24
    126c:	4e 5f       	subi	r20, 0xFE	; 254
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	24 17       	cp	r18, r20
    1272:	35 07       	cpc	r19, r21
    1274:	48 f0       	brcs	.+18     	; 0x1288 <malloc+0x120>
    1276:	4e 0f       	add	r20, r30
    1278:	5f 1f       	adc	r21, r31
    127a:	50 93 8e 03 	sts	0x038E, r21	; 0x80038e <__brkval+0x1>
    127e:	40 93 8d 03 	sts	0x038D, r20	; 0x80038d <__brkval>
    1282:	81 93       	st	Z+, r24
    1284:	91 93       	st	Z+, r25
    1286:	02 c0       	rjmp	.+4      	; 0x128c <malloc+0x124>
    1288:	e0 e0       	ldi	r30, 0x00	; 0
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	cf 01       	movw	r24, r30
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <free>:
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	09 f4       	brne	.+2      	; 0x12a2 <free+0xa>
    12a0:	81 c0       	rjmp	.+258    	; 0x13a4 <free+0x10c>
    12a2:	fc 01       	movw	r30, r24
    12a4:	32 97       	sbiw	r30, 0x02	; 2
    12a6:	13 82       	std	Z+3, r1	; 0x03
    12a8:	12 82       	std	Z+2, r1	; 0x02
    12aa:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <__flp>
    12ae:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <__flp+0x1>
    12b2:	10 97       	sbiw	r26, 0x00	; 0
    12b4:	81 f4       	brne	.+32     	; 0x12d6 <free+0x3e>
    12b6:	20 81       	ld	r18, Z
    12b8:	31 81       	ldd	r19, Z+1	; 0x01
    12ba:	82 0f       	add	r24, r18
    12bc:	93 1f       	adc	r25, r19
    12be:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <__brkval>
    12c2:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <__brkval+0x1>
    12c6:	28 17       	cp	r18, r24
    12c8:	39 07       	cpc	r19, r25
    12ca:	51 f5       	brne	.+84     	; 0x1320 <free+0x88>
    12cc:	f0 93 8e 03 	sts	0x038E, r31	; 0x80038e <__brkval+0x1>
    12d0:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <__brkval>
    12d4:	67 c0       	rjmp	.+206    	; 0x13a4 <free+0x10c>
    12d6:	ed 01       	movw	r28, r26
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	ce 17       	cp	r28, r30
    12de:	df 07       	cpc	r29, r31
    12e0:	40 f4       	brcc	.+16     	; 0x12f2 <free+0x5a>
    12e2:	4a 81       	ldd	r20, Y+2	; 0x02
    12e4:	5b 81       	ldd	r21, Y+3	; 0x03
    12e6:	9e 01       	movw	r18, r28
    12e8:	41 15       	cp	r20, r1
    12ea:	51 05       	cpc	r21, r1
    12ec:	f1 f0       	breq	.+60     	; 0x132a <free+0x92>
    12ee:	ea 01       	movw	r28, r20
    12f0:	f5 cf       	rjmp	.-22     	; 0x12dc <free+0x44>
    12f2:	d3 83       	std	Z+3, r29	; 0x03
    12f4:	c2 83       	std	Z+2, r28	; 0x02
    12f6:	40 81       	ld	r20, Z
    12f8:	51 81       	ldd	r21, Z+1	; 0x01
    12fa:	84 0f       	add	r24, r20
    12fc:	95 1f       	adc	r25, r21
    12fe:	c8 17       	cp	r28, r24
    1300:	d9 07       	cpc	r29, r25
    1302:	59 f4       	brne	.+22     	; 0x131a <free+0x82>
    1304:	88 81       	ld	r24, Y
    1306:	99 81       	ldd	r25, Y+1	; 0x01
    1308:	84 0f       	add	r24, r20
    130a:	95 1f       	adc	r25, r21
    130c:	02 96       	adiw	r24, 0x02	; 2
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	9b 81       	ldd	r25, Y+3	; 0x03
    1316:	93 83       	std	Z+3, r25	; 0x03
    1318:	82 83       	std	Z+2, r24	; 0x02
    131a:	21 15       	cp	r18, r1
    131c:	31 05       	cpc	r19, r1
    131e:	29 f4       	brne	.+10     	; 0x132a <free+0x92>
    1320:	f0 93 90 03 	sts	0x0390, r31	; 0x800390 <__flp+0x1>
    1324:	e0 93 8f 03 	sts	0x038F, r30	; 0x80038f <__flp>
    1328:	3d c0       	rjmp	.+122    	; 0x13a4 <free+0x10c>
    132a:	e9 01       	movw	r28, r18
    132c:	fb 83       	std	Y+3, r31	; 0x03
    132e:	ea 83       	std	Y+2, r30	; 0x02
    1330:	49 91       	ld	r20, Y+
    1332:	59 91       	ld	r21, Y+
    1334:	c4 0f       	add	r28, r20
    1336:	d5 1f       	adc	r29, r21
    1338:	ec 17       	cp	r30, r28
    133a:	fd 07       	cpc	r31, r29
    133c:	61 f4       	brne	.+24     	; 0x1356 <free+0xbe>
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	84 0f       	add	r24, r20
    1344:	95 1f       	adc	r25, r21
    1346:	02 96       	adiw	r24, 0x02	; 2
    1348:	e9 01       	movw	r28, r18
    134a:	99 83       	std	Y+1, r25	; 0x01
    134c:	88 83       	st	Y, r24
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	9b 83       	std	Y+3, r25	; 0x03
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	e0 e0       	ldi	r30, 0x00	; 0
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	12 96       	adiw	r26, 0x02	; 2
    135c:	8d 91       	ld	r24, X+
    135e:	9c 91       	ld	r25, X
    1360:	13 97       	sbiw	r26, 0x03	; 3
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	19 f0       	breq	.+6      	; 0x136c <free+0xd4>
    1366:	fd 01       	movw	r30, r26
    1368:	dc 01       	movw	r26, r24
    136a:	f7 cf       	rjmp	.-18     	; 0x135a <free+0xc2>
    136c:	8d 91       	ld	r24, X+
    136e:	9c 91       	ld	r25, X
    1370:	11 97       	sbiw	r26, 0x01	; 1
    1372:	9d 01       	movw	r18, r26
    1374:	2e 5f       	subi	r18, 0xFE	; 254
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	82 0f       	add	r24, r18
    137a:	93 1f       	adc	r25, r19
    137c:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <__brkval>
    1380:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <__brkval+0x1>
    1384:	28 17       	cp	r18, r24
    1386:	39 07       	cpc	r19, r25
    1388:	69 f4       	brne	.+26     	; 0x13a4 <free+0x10c>
    138a:	30 97       	sbiw	r30, 0x00	; 0
    138c:	29 f4       	brne	.+10     	; 0x1398 <free+0x100>
    138e:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <__flp+0x1>
    1392:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <__flp>
    1396:	02 c0       	rjmp	.+4      	; 0x139c <free+0x104>
    1398:	13 82       	std	Z+3, r1	; 0x03
    139a:	12 82       	std	Z+2, r1	; 0x02
    139c:	b0 93 8e 03 	sts	0x038E, r27	; 0x80038e <__brkval+0x1>
    13a0:	a0 93 8d 03 	sts	0x038D, r26	; 0x80038d <__brkval>
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <_exit>:
    13aa:	f8 94       	cli

000013ac <__stop_program>:
    13ac:	ff cf       	rjmp	.-2      	; 0x13ac <__stop_program>
