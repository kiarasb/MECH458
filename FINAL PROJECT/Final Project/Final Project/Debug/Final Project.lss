
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800200  00000cb0  00000d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800260  00800260  00000da4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f26  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001065  00000000  00000000  00002e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf5  00000000  00000000  00003ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00004b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f2  00000000  00000000  00004e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d12  00000000  00000000  0000564e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00006360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	12 c2       	rjmp	.+1060   	; 0x42e <__vector_2>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	1f c2       	rjmp	.+1086   	; 0x450 <__vector_4>
  12:	00 00       	nop
  14:	fd c1       	rjmp	.+1018   	; 0x410 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	fc c1       	rjmp	.+1016   	; 0x46e <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 eb       	ldi	r30, 0xB0	; 176
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 36       	cpi	r26, 0x60	; 96
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e6       	ldi	r26, 0x60	; 96
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 39       	cpi	r26, 0x95	; 149
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	63 d3       	rcall	.+1734   	; 0x7e6 <main>
 120:	c5 c5       	rjmp	.+2954   	; 0xcac <_exit>

00000122 <__bad_interrupt>:
 122:	bb c2       	rjmp	.+1398   	; 0x69a <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	80 68       	ori	r24, 0x80	; 128
 142:	88 b9       	out	0x08, r24	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 14c:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x30>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	9f 77       	andi	r25, 0x7F	; 127
 15e:	98 b9       	out	0x08, r25	; 8
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDBusyLoop+0x3e>
 166:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 168:	98 b1       	in	r25, 0x08	; 8
 16a:	90 68       	ori	r25, 0x80	; 128
 16c:	98 b9       	out	0x08, r25	; 8
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 176:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 178:	80 78       	andi	r24, 0x80	; 128
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	9a 95       	dec	r25
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDBusyLoop+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 182:	98 b1       	in	r25, 0x08	; 8
 184:	9f 77       	andi	r25, 0x7F	; 127
 186:	98 b9       	out	0x08, r25	; 8
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCDBusyLoop+0x66>
 18e:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 190:	81 11       	cpse	r24, r1
 192:	d5 cf       	rjmp	.-86     	; 0x13e <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 194:	88 b1       	in	r24, 0x08	; 8
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 19a:	87 b1       	in	r24, 0x07	; 7
 19c:	8f 60       	ori	r24, 0x0F	; 15
 19e:	87 b9       	out	0x07, r24	; 7
 1a0:	08 95       	ret

000001a2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 1a2:	28 2f       	mov	r18, r24
 1a4:	22 95       	swap	r18
 1a6:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 1a8:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <LCDByte+0x14>
	CLEAR_RS();
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 7b       	andi	r25, 0xBF	; 191
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCDByte+0x1a>
else
	SET_RS();
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	90 64       	ori	r25, 0x40	; 64
 1ba:	98 b9       	out	0x08, r25	; 8
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDByte+0x1c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	90 68       	ori	r25, 0x80	; 128
 1c8:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 1d0:	98 b9       	out	0x08, r25	; 8
 1d2:	95 e0       	ldi	r25, 0x05	; 5
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDByte+0x32>
 1d8:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1da:	98 b1       	in	r25, 0x08	; 8
 1dc:	9f 77       	andi	r25, 0x7F	; 127
 1de:	98 b9       	out	0x08, r25	; 8
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDByte+0x40>
 1e6:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	90 68       	ori	r25, 0x80	; 128
 1ec:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1ee:	98 b1       	in	r25, 0x08	; 8
 1f0:	90 7f       	andi	r25, 0xF0	; 240
 1f2:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCDByte+0x56>
 1fc:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	8f 77       	andi	r24, 0x7F	; 127
 202:	88 b9       	out	0x08, r24	; 8
 204:	95 e0       	ldi	r25, 0x05	; 5
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDByte+0x64>
 20a:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 20c:	8b cf       	rjmp	.-234    	; 0x124 <LCDBusyLoop>
 20e:	08 95       	ret

00000210 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 210:	cf 93       	push	r28
 212:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	86 e7       	ldi	r24, 0x76	; 118
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <InitLCD+0xa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <InitLCD+0x14>
 224:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 226:	87 b1       	in	r24, 0x07	; 7
 228:	8f 60       	ori	r24, 0x0F	; 15
 22a:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 22c:	87 b1       	in	r24, 0x07	; 7
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 232:	87 b1       	in	r24, 0x07	; 7
 234:	80 64       	ori	r24, 0x40	; 64
 236:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 238:	87 b1       	in	r24, 0x07	; 7
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	80 7f       	andi	r24, 0xF0	; 240
 242:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 244:	88 b1       	in	r24, 0x08	; 8
 246:	8f 77       	andi	r24, 0x7F	; 127
 248:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 24a:	88 b1       	in	r24, 0x08	; 8
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 250:	88 b1       	in	r24, 0x08	; 8
 252:	8f 7b       	andi	r24, 0xBF	; 191
 254:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	00 c0       	rjmp	.+0      	; 0x258 <InitLCD+0x48>
 258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x4a>
 25a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 25c:	88 b1       	in	r24, 0x08	; 8
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 262:	88 b1       	in	r24, 0x08	; 8
 264:	82 60       	ori	r24, 0x02	; 2
 266:	88 b9       	out	0x08, r24	; 8
 268:	25 e0       	ldi	r18, 0x05	; 5
 26a:	2a 95       	dec	r18
 26c:	f1 f7       	brne	.-4      	; 0x26a <InitLCD+0x5a>
 26e:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 270:	88 b1       	in	r24, 0x08	; 8
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	88 b9       	out	0x08, r24	; 8
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <InitLCD+0x68>
 27c:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 27e:	52 df       	rcall	.-348    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8c 2f       	mov	r24, r28
 284:	8c 60       	ori	r24, 0x0C	; 12
 286:	8d df       	rcall	.-230    	; 0x1a2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	8a df       	rcall	.-236    	; 0x1a2 <LCDByte>
}
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCDWriteString+0xe>
 {
	LCDData(*msg);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	82 df       	rcall	.-252    	; 0x1a2 <LCDByte>
	msg++;
 29e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2a0:	88 81       	ld	r24, Y
 2a2:	81 11       	cpse	r24, r1
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <LCDWriteInt+0xe>
 2ba:	1f 92       	push	r1
 2bc:	1f 92       	push	r1
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2c4:	fe 01       	movw	r30, r28
 2c6:	31 96       	adiw	r30, 0x01	; 1
 2c8:	25 e0       	ldi	r18, 0x05	; 5
 2ca:	df 01       	movw	r26, r30
 2cc:	1d 92       	st	X+, r1
 2ce:	2a 95       	dec	r18
 2d0:	e9 f7       	brne	.-6      	; 0x2cc <LCDWriteInt+0x20>
	int i=4,j=0;
 2d2:	24 e0       	ldi	r18, 0x04	; 4
 2d4:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 2d6:	0e c0       	rjmp	.+28     	; 0x2f4 <LCDWriteInt+0x48>
	{
	str[i]=val%10;
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	9f d3       	rcall	.+1854   	; 0xa1c <__divmodhi4>
 2de:	e1 e0       	ldi	r30, 0x01	; 1
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	ec 0f       	add	r30, r28
 2e4:	fd 1f       	adc	r31, r29
 2e6:	e2 0f       	add	r30, r18
 2e8:	f3 1f       	adc	r31, r19
 2ea:	80 83       	st	Z, r24
	val=val/10;
 2ec:	86 2f       	mov	r24, r22
 2ee:	97 2f       	mov	r25, r23
	i--;
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	81 f7       	brne	.-32     	; 0x2d8 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2f8:	bf ef       	ldi	r27, 0xFF	; 255
 2fa:	eb 16       	cp	r14, r27
 2fc:	fb 06       	cpc	r15, r27
 2fe:	81 f4       	brne	.+32     	; 0x320 <LCDWriteInt+0x74>
 300:	03 c0       	rjmp	.+6      	; 0x308 <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
 302:	0f 5f       	subi	r16, 0xFF	; 255
 304:	1f 4f       	sbci	r17, 0xFF	; 255
 306:	02 c0       	rjmp	.+4      	; 0x30c <LCDWriteInt+0x60>
 308:	00 e0       	ldi	r16, 0x00	; 0
 30a:	10 e0       	ldi	r17, 0x00	; 0
 30c:	e1 e0       	ldi	r30, 0x01	; 1
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ec 0f       	add	r30, r28
 312:	fd 1f       	adc	r31, r29
 314:	e0 0f       	add	r30, r16
 316:	f1 1f       	adc	r31, r17
 318:	20 81       	ld	r18, Z
 31a:	22 23       	and	r18, r18
 31c:	91 f3       	breq	.-28     	; 0x302 <LCDWriteInt+0x56>
 31e:	04 c0       	rjmp	.+8      	; 0x328 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 320:	05 e0       	ldi	r16, 0x05	; 5
 322:	10 e0       	ldi	r17, 0x00	; 0
 324:	0e 19       	sub	r16, r14
 326:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 328:	99 23       	and	r25, r25
 32a:	84 f4       	brge	.+32     	; 0x34c <LCDWriteInt+0xa0>
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	8d e2       	ldi	r24, 0x2D	; 45
 330:	38 df       	rcall	.-400    	; 0x1a2 <LCDByte>
 332:	0c c0       	rjmp	.+24     	; 0x34c <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 334:	e1 e0       	ldi	r30, 0x01	; 1
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ec 0f       	add	r30, r28
 33a:	fd 1f       	adc	r31, r29
 33c:	e0 0f       	add	r30, r16
 33e:	f1 1f       	adc	r31, r17
 340:	80 81       	ld	r24, Z
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	2d df       	rcall	.-422    	; 0x1a2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 348:	0f 5f       	subi	r16, 0xFF	; 255
 34a:	1f 4f       	sbci	r17, 0xFF	; 255
 34c:	05 30       	cpi	r16, 0x05	; 5
 34e:	11 05       	cpc	r17, r1
 350:	8c f3       	brlt	.-30     	; 0x334 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	08 95       	ret

0000036a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 36a:	88 32       	cpi	r24, 0x28	; 40
 36c:	28 f4       	brcc	.+10     	; 0x378 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 36e:	61 11       	cpse	r22, r1
 370:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	80 68       	ori	r24, 0x80	; 128
 376:	15 cf       	rjmp	.-470    	; 0x1a2 <LCDByte>
 378:	08 95       	ret

0000037a <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 37a:	fc 01       	movw	r30, r24
 37c:	11 82       	std	Z+1, r1	; 0x01
 37e:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 380:	fb 01       	movw	r30, r22
 382:	11 82       	std	Z+1, r1	; 0x01
 384:	10 82       	st	Z, r1
 386:	08 95       	ret

00000388 <initLink>:

/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
void initLink(link **newLink){
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
	//link *l;
	*newLink = malloc(sizeof(link));
 38e:	80 e1       	ldi	r24, 0x10	; 16
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	6b d3       	rcall	.+1750   	; 0xa6a <malloc>
 394:	99 83       	std	Y+1, r25	; 0x01
 396:	88 83       	st	Y, r24
	(*newLink)->next = NULL;
 398:	fc 01       	movw	r30, r24
 39a:	17 86       	std	Z+15, r1	; 0x0f
 39c:	16 86       	std	Z+14, r1	; 0x0e
	return;
}/*initLink*/
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <enqueue>:
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 3a4:	db 01       	movw	r26, r22
 3a6:	ed 91       	ld	r30, X+
 3a8:	fc 91       	ld	r31, X
 3aa:	30 97       	sbiw	r30, 0x00	; 0
 3ac:	61 f0       	breq	.+24     	; 0x3c6 <enqueue+0x22>
		/* Not an empty queue */
		(*t)->next = *nL;
 3ae:	da 01       	movw	r26, r20
 3b0:	8d 91       	ld	r24, X+
 3b2:	9c 91       	ld	r25, X
 3b4:	11 97       	sbiw	r26, 0x01	; 1
 3b6:	97 87       	std	Z+15, r25	; 0x0f
 3b8:	86 87       	std	Z+14, r24	; 0x0e
		*t = *nL; //(*t)->next;
 3ba:	8d 91       	ld	r24, X+
 3bc:	9c 91       	ld	r25, X
 3be:	fb 01       	movw	r30, r22
 3c0:	91 83       	std	Z+1, r25	; 0x01
 3c2:	80 83       	st	Z, r24
 3c4:	08 95       	ret
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 3c6:	da 01       	movw	r26, r20
 3c8:	2d 91       	ld	r18, X+
 3ca:	3c 91       	ld	r19, X
 3cc:	11 97       	sbiw	r26, 0x01	; 1
 3ce:	fc 01       	movw	r30, r24
 3d0:	31 83       	std	Z+1, r19	; 0x01
 3d2:	20 83       	st	Z, r18
		*t = *nL;
 3d4:	8d 91       	ld	r24, X+
 3d6:	9c 91       	ld	r25, X
 3d8:	db 01       	movw	r26, r22
 3da:	8d 93       	st	X+, r24
 3dc:	9c 93       	st	X, r25
 3de:	08 95       	ret

000003e0 <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink' 
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link**t, link **deQueuedLink){
 3e0:	fc 01       	movw	r30, r24
	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 3e2:	80 81       	ld	r24, Z
 3e4:	91 81       	ldd	r25, Z+1	; 0x01
 3e6:	da 01       	movw	r26, r20
 3e8:	8d 93       	st	X+, r24
 3ea:	9c 93       	st	X, r25
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 3ec:	a0 81       	ld	r26, Z
 3ee:	b1 81       	ldd	r27, Z+1	; 0x01
 3f0:	10 97       	sbiw	r26, 0x00	; 0
 3f2:	31 f0       	breq	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
		*h = (*h)->next;
 3f4:	1e 96       	adiw	r26, 0x0e	; 14
 3f6:	8d 91       	ld	r24, X+
 3f8:	9c 91       	ld	r25, X
 3fa:	1f 97       	sbiw	r26, 0x0f	; 15
 3fc:	91 83       	std	Z+1, r25	; 0x01
 3fe:	80 83       	st	Z, r24
	}
	if(*h==NULL){
 400:	80 81       	ld	r24, Z
 402:	91 81       	ldd	r25, Z+1	; 0x01
 404:	89 2b       	or	r24, r25
 406:	19 f4       	brne	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		*t = NULL;
 408:	fb 01       	movw	r30, r22
 40a:	11 82       	std	Z+1, r1	; 0x01
 40c:	10 82       	st	Z, r1
 40e:	08 95       	ret

00000410 <__vector_5>:
	// Stop everything here...'MAKE SAFE'
	return(0);

} //end main

ISR(INT4_vect){
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	8f 93       	push	r24
	STATE = 2;
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <STATE>
} //end ISR
 422:	8f 91       	pop	r24
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <__vector_2>:

ISR(INT1_vect){
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	8f 93       	push	r24
	PORTB = brake; // stop belt
 43a:	88 e7       	ldi	r24, 0x78	; 120
 43c:	85 b9       	out	0x05, r24	; 5
	STATE = 3;
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <STATE>
} //end ISR*/
 444:	8f 91       	pop	r24
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <__vector_4>:

ISR(INT3_vect){
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	8f 93       	push	r24
	STATE = 4;
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <STATE>
} //end ISR
 462:	8f 91       	pop	r24
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <__vector_29>:

/*ISR(INT5_vect){

} //end ISR*/

ISR(ADC_vect){
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	0b b6       	in	r0, 0x3b	; 59
 47a:	0f 92       	push	r0
 47c:	2f 93       	push	r18
 47e:	3f 93       	push	r19
 480:	4f 93       	push	r20
 482:	5f 93       	push	r21
 484:	6f 93       	push	r22
 486:	7f 93       	push	r23
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	af 93       	push	r26
 48e:	bf 93       	push	r27
 490:	ef 93       	push	r30
 492:	ff 93       	push	r31
	//pick lowest voltage reading (center of piece)
	ADC_low = ADCL;
 494:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <ADC_low+0x1>
 49e:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <ADC_low>
	ADC_high = ADCH;
 4a2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <ADC_high+0x1>
 4ac:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <ADC_high>
	ADC_result = (ADC_high << 8) | ADC_low;//assign value to global variable
 4b0:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <ADC_high>
 4b4:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <ADC_high+0x1>
 4b8:	98 2f       	mov	r25, r24
 4ba:	88 27       	eor	r24, r24
 4bc:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <ADC_low>
 4c0:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <ADC_low+0x1>
 4c4:	82 2b       	or	r24, r18
 4c6:	93 2b       	or	r25, r19
 4c8:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <ADC_result+0x1>
 4cc:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <ADC_result>
	if(ADC_result<lowest){
 4d0:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <ADC_result>
 4d4:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <ADC_result+0x1>
 4d8:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 4dc:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 4e0:	28 17       	cp	r18, r24
 4e2:	39 07       	cpc	r19, r25
 4e4:	40 f4       	brcc	.+16     	; 0x4f6 <__vector_29+0x88>
		lowest = ADC_result;
 4e6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <ADC_result>
 4ea:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <ADC_result+0x1>
 4ee:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <lowest+0x1>
 4f2:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <lowest>
	}// end if
	if((PINE&0x10)==0x10){
 4f6:	64 9b       	sbis	0x0c, 4	; 12
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <__vector_29+0x98>
		ADCSRA |= _BV(ADSC);
 4fa:	ea e7       	ldi	r30, 0x7A	; 122
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	80 64       	ori	r24, 0x40	; 64
 502:	80 83       	st	Z, r24
 504:	b7 c0       	rjmp	.+366    	; 0x674 <__vector_29+0x206>
	}else{
		if(blk.ADC_valmax>lowest && blk.ADC_valmin<lowest){
 506:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <blk>
 50a:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <blk+0x1>
 50e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 512:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 516:	82 17       	cp	r24, r18
 518:	93 07       	cpc	r25, r19
 51a:	f0 f4       	brcc	.+60     	; 0x558 <__vector_29+0xea>
 51c:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <blk+0x2>
 520:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <blk+0x3>
 524:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 528:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 52c:	28 17       	cp	r18, r24
 52e:	39 07       	cpc	r19, r25
 530:	98 f4       	brcc	.+38     	; 0x558 <__vector_29+0xea>
			//LCDClear();
			//LCDWriteStringXY(0,0,"BLACK");
			//LCDWriteIntXY(0,1,lowest,4);
			newLink->p = blk;
 532:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <newLink>
 536:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <newLink+0x1>
 53a:	8e e0       	ldi	r24, 0x0E	; 14
 53c:	e0 e3       	ldi	r30, 0x30	; 48
 53e:	f2 e0       	ldi	r31, 0x02	; 2
 540:	01 90       	ld	r0, Z+
 542:	0d 92       	st	X+, r0
 544:	8a 95       	dec	r24
 546:	e1 f7       	brne	.-8      	; 0x540 <__vector_29+0xd2>
			enqueue(&head,&tail,&newLink);
 548:	4d e8       	ldi	r20, 0x8D	; 141
 54a:	52 e0       	ldi	r21, 0x02	; 2
 54c:	6c e6       	ldi	r22, 0x6C	; 108
 54e:	72 e0       	ldi	r23, 0x02	; 2
 550:	80 e7       	ldi	r24, 0x70	; 112
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	27 df       	rcall	.-434    	; 0x3a4 <enqueue>
 556:	8e c0       	rjmp	.+284    	; 0x674 <__vector_29+0x206>
		}else if(wht.ADC_valmax>lowest && wht.ADC_valmin<lowest){
 558:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <wht>
 55c:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <wht+0x1>
 560:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 564:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 568:	82 17       	cp	r24, r18
 56a:	93 07       	cpc	r25, r19
 56c:	f0 f4       	brcc	.+60     	; 0x5aa <__vector_29+0x13c>
 56e:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <wht+0x2>
 572:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <wht+0x3>
 576:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 57a:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	98 f4       	brcc	.+38     	; 0x5aa <__vector_29+0x13c>
			//LCDClear();
			//LCDWriteStringXY(0,0,"WHITE");
			//LCDWriteIntXY(0,1,lowest,4);
			newLink->p = wht;
 584:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <newLink>
 588:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <newLink+0x1>
 58c:	8e e0       	ldi	r24, 0x0E	; 14
 58e:	e4 e1       	ldi	r30, 0x14	; 20
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	01 90       	ld	r0, Z+
 594:	0d 92       	st	X+, r0
 596:	8a 95       	dec	r24
 598:	e1 f7       	brne	.-8      	; 0x592 <__vector_29+0x124>
			enqueue(&head,&tail,&newLink);
 59a:	4d e8       	ldi	r20, 0x8D	; 141
 59c:	52 e0       	ldi	r21, 0x02	; 2
 59e:	6c e6       	ldi	r22, 0x6C	; 108
 5a0:	72 e0       	ldi	r23, 0x02	; 2
 5a2:	80 e7       	ldi	r24, 0x70	; 112
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	fe de       	rcall	.-516    	; 0x3a4 <enqueue>
 5a8:	65 c0       	rjmp	.+202    	; 0x674 <__vector_29+0x206>
		}else if(alu.ADC_valmax>lowest && alu.ADC_valmin<lowest){
 5aa:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <alu>
 5ae:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <alu+0x1>
 5b2:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 5b6:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 5ba:	82 17       	cp	r24, r18
 5bc:	93 07       	cpc	r25, r19
 5be:	f0 f4       	brcc	.+60     	; 0x5fc <__vector_29+0x18e>
 5c0:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <alu+0x2>
 5c4:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <alu+0x3>
 5c8:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 5cc:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 5d0:	28 17       	cp	r18, r24
 5d2:	39 07       	cpc	r19, r25
 5d4:	98 f4       	brcc	.+38     	; 0x5fc <__vector_29+0x18e>
			//LCDClear();
			//LCDWriteStringXY(0,0,"ALUMINUM");
			//LCDWriteIntXY(0,1,lowest,4);
			newLink->p = alu;
 5d6:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <newLink>
 5da:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <newLink+0x1>
 5de:	8e e0       	ldi	r24, 0x0E	; 14
 5e0:	e6 e0       	ldi	r30, 0x06	; 6
 5e2:	f2 e0       	ldi	r31, 0x02	; 2
 5e4:	01 90       	ld	r0, Z+
 5e6:	0d 92       	st	X+, r0
 5e8:	8a 95       	dec	r24
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <__vector_29+0x176>
			enqueue(&head,&tail,&newLink);
 5ec:	4d e8       	ldi	r20, 0x8D	; 141
 5ee:	52 e0       	ldi	r21, 0x02	; 2
 5f0:	6c e6       	ldi	r22, 0x6C	; 108
 5f2:	72 e0       	ldi	r23, 0x02	; 2
 5f4:	80 e7       	ldi	r24, 0x70	; 112
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	d5 de       	rcall	.-598    	; 0x3a4 <enqueue>
 5fa:	3c c0       	rjmp	.+120    	; 0x674 <__vector_29+0x206>
		}else if(stl.ADC_valmax>lowest && stl.ADC_valmin<lowest){
 5fc:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <stl>
 600:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <stl+0x1>
 604:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 608:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 60c:	82 17       	cp	r24, r18
 60e:	93 07       	cpc	r25, r19
 610:	f0 f4       	brcc	.+60     	; 0x64e <__vector_29+0x1e0>
 612:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <stl+0x2>
 616:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <stl+0x3>
 61a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 61e:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 622:	28 17       	cp	r18, r24
 624:	39 07       	cpc	r19, r25
 626:	98 f4       	brcc	.+38     	; 0x64e <__vector_29+0x1e0>
			//LCDClear();
			//LCDWriteStringXY(0,0,"STEEL");
			//LCDWriteIntXY(0,1,lowest,4);
			newLink->p = stl;
 628:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <newLink>
 62c:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <newLink+0x1>
 630:	8e e0       	ldi	r24, 0x0E	; 14
 632:	e2 e2       	ldi	r30, 0x22	; 34
 634:	f2 e0       	ldi	r31, 0x02	; 2
 636:	01 90       	ld	r0, Z+
 638:	0d 92       	st	X+, r0
 63a:	8a 95       	dec	r24
 63c:	e1 f7       	brne	.-8      	; 0x636 <__vector_29+0x1c8>
			enqueue(&head,&tail,&newLink);
 63e:	4d e8       	ldi	r20, 0x8D	; 141
 640:	52 e0       	ldi	r21, 0x02	; 2
 642:	6c e6       	ldi	r22, 0x6C	; 108
 644:	72 e0       	ldi	r23, 0x02	; 2
 646:	80 e7       	ldi	r24, 0x70	; 112
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	ac de       	rcall	.-680    	; 0x3a4 <enqueue>
		}else{
			LCDClear();
 64c:	13 c0       	rjmp	.+38     	; 0x674 <__vector_29+0x206>
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	81 e0       	ldi	r24, 0x01	; 1
			LCDWriteStringXY(0,0,"UNDETERMINED");
 652:	a7 dd       	rcall	.-1202   	; 0x1a2 <LCDByte>
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	88 de       	rcall	.-752    	; 0x36a <LCDGotoXY>
 65a:	86 e4       	ldi	r24, 0x46	; 70
 65c:	92 e0       	ldi	r25, 0x02	; 2
			LCDWriteIntXY(0,1,lowest,4);
 65e:	19 de       	rcall	.-974    	; 0x292 <LCDWriteString>
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	82 de       	rcall	.-764    	; 0x36a <LCDGotoXY>
 666:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <lowest>
 66a:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <lowest+0x1>
 66e:	64 e0       	ldi	r22, 0x04	; 4
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	1c de       	rcall	.-968    	; 0x2ac <LCDWriteInt>
		}// end if/else
	}// end if/else
} //end ISR
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0b be       	out	0x3b, r0	; 59
 690:	0f 90       	pop	r0
 692:	0f be       	out	0x3f, r0	; 63
 694:	0f 90       	pop	r0
 696:	1f 90       	pop	r1
 698:	18 95       	reti

0000069a <__vector_default>:

ISR(BADISR_vect){
 69a:	1f 92       	push	r1
 69c:	0f 92       	push	r0
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	0f 92       	push	r0
 6a2:	11 24       	eor	r1, r1
	//handle bad ISR triggers
} //end ISR*/
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <mTimer>:
   i = 0;

   //TCCR1B |= _BV (CS11);  // Set prescaler (/8) clock 16MHz/8 -> 2MHz
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 6ae:	e1 e8       	ldi	r30, 0x81	; 129
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	20 81       	ld	r18, Z
 6b4:	28 60       	ori	r18, 0x08	; 8
 6b6:	20 83       	st	Z, r18

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 6b8:	28 ee       	ldi	r18, 0xE8	; 232
 6ba:	33 e0       	ldi	r19, 0x03	; 3
 6bc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 6c0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 
   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
 6c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 6c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

   /* Enable the output compare interrupt */
   //TIMSK1 = TIMSK1 | 0b00000010;

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 6cc:	26 b3       	in	r18, 0x16	; 22
 6ce:	22 60       	ori	r18, 0x02	; 2
 6d0:	26 bb       	out	0x16, r18	; 22
	  Using polling method not Interrupt Driven
   ***/
	  
   int i;

   i = 0;
 6d2:	20 e0       	ldi	r18, 0x00	; 0
 6d4:	30 e0       	ldi	r19, 0x00	; 0

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <mTimer+0x38>
      if((TIFR1 & 0x02) == 0x02){
 6d8:	b1 9b       	sbis	0x16, 1	; 22
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <mTimer+0x38>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 6dc:	46 b3       	in	r20, 0x16	; 22
 6de:	42 60       	ori	r20, 0x02	; 2
 6e0:	46 bb       	out	0x16, r20	; 22
	   i++;
 6e2:	2f 5f       	subi	r18, 0xFF	; 255
 6e4:	3f 4f       	sbci	r19, 0xFF	; 255

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 6e6:	28 17       	cp	r18, r24
 6e8:	39 07       	cpc	r19, r25
 6ea:	b4 f3       	brlt	.-20     	; 0x6d8 <mTimer+0x2a>
	   TIFR1 |= _BV(OCF1A);
	   i++;
	   }
	 } 
   return;
} //end mTimer
 6ec:	08 95       	ret

000006ee <PWM>:

void PWM( ){
	TCCR0A |= _BV(WGM01)|_BV(WGM00); //selecting Fast PWN mode 3
 6ee:	84 b5       	in	r24, 0x24	; 36
 6f0:	83 60       	ori	r24, 0x03	; 3
 6f2:	84 bd       	out	0x24, r24	; 36
	//TIMSK0 |= _BV(OCIE0A); //enable output compare interrupt for timer0
	TCCR0A |= _BV(COM0A1);//set compare match output mode to clear and set output compare A when timer reaches TOP
 6f4:	84 b5       	in	r24, 0x24	; 36
 6f6:	80 68       	ori	r24, 0x80	; 128
 6f8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);//sets prescale factor to 8
 6fa:	85 b5       	in	r24, 0x25	; 37
 6fc:	82 60       	ori	r24, 0x02	; 2
 6fe:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0x80;//default duty cycle
 700:	80 e8       	ldi	r24, 0x80	; 128
 702:	87 bd       	out	0x27, r24	; 39
 704:	08 95       	ret

00000706 <CW>:
} //end PWM

void CW(int NumSteps ){
 706:	0f 93       	push	r16
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	ec 01       	movw	r28, r24
	int i = 0;
 710:	00 e0       	ldi	r16, 0x00	; 0
 712:	10 e0       	ldi	r17, 0x00	; 0
	while(i<NumSteps){
 714:	22 c0       	rjmp	.+68     	; 0x75a <CW+0x54>
		cur_pos++;
 716:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <cur_pos>
 71a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <cur_pos+0x1>
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <cur_pos+0x1>
 724:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <cur_pos>
		if(cur_pos==4){
 728:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <cur_pos>
 72c:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <cur_pos+0x1>
 730:	04 97       	sbiw	r24, 0x04	; 4
 732:	21 f4       	brne	.+8      	; 0x73c <CW+0x36>
			cur_pos=0;
 734:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <cur_pos+0x1>
 738:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <cur_pos>
		}
		PORTA = StepperTable[cur_pos];
 73c:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <cur_pos>
 740:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <cur_pos+0x1>
 744:	ee 0f       	add	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	e2 5c       	subi	r30, 0xC2	; 194
 74a:	fd 4f       	sbci	r31, 0xFD	; 253
 74c:	80 81       	ld	r24, Z
 74e:	82 b9       	out	0x02, r24	; 2
		mTimer(20);
 750:	84 e1       	ldi	r24, 0x14	; 20
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	ac df       	rcall	.-168    	; 0x6ae <mTimer>
		i++;
 756:	0f 5f       	subi	r16, 0xFF	; 255
 758:	1f 4f       	sbci	r17, 0xFF	; 255
	OCR0A = 0x80;//default duty cycle
} //end PWM

void CW(int NumSteps ){
	int i = 0;
	while(i<NumSteps){
 75a:	0c 17       	cp	r16, r28
 75c:	1d 07       	cpc	r17, r29
 75e:	dc f2       	brlt	.-74     	; 0x716 <CW+0x10>
		}
		PORTA = StepperTable[cur_pos];
		mTimer(20);
		i++;
	} //end while
	cur_step_dir =0;
 760:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__data_end+0x1>
 764:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__data_end>
} //end CW
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	08 95       	ret

00000772 <CCW>:

void CCW(int NumSteps ){
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	ec 01       	movw	r28, r24
	int i = 0;
 77c:	00 e0       	ldi	r16, 0x00	; 0
 77e:	10 e0       	ldi	r17, 0x00	; 0
	while(i<NumSteps){
 780:	24 c0       	rjmp	.+72     	; 0x7ca <CCW+0x58>
		cur_pos--;
 782:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <cur_pos>
 786:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <cur_pos+0x1>
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <cur_pos+0x1>
 790:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <cur_pos>
		if(cur_pos==-1){
 794:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <cur_pos>
 798:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <cur_pos+0x1>
 79c:	01 96       	adiw	r24, 0x01	; 1
 79e:	31 f4       	brne	.+12     	; 0x7ac <CCW+0x3a>
			cur_pos=3;
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <cur_pos+0x1>
 7a8:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <cur_pos>
		}
		PORTA = StepperTable[cur_pos];
 7ac:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <cur_pos>
 7b0:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <cur_pos+0x1>
 7b4:	ee 0f       	add	r30, r30
 7b6:	ff 1f       	adc	r31, r31
 7b8:	e2 5c       	subi	r30, 0xC2	; 194
 7ba:	fd 4f       	sbci	r31, 0xFD	; 253
 7bc:	80 81       	ld	r24, Z
 7be:	82 b9       	out	0x02, r24	; 2
		mTimer(20);
 7c0:	84 e1       	ldi	r24, 0x14	; 20
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	74 df       	rcall	.-280    	; 0x6ae <mTimer>
		i++;
 7c6:	0f 5f       	subi	r16, 0xFF	; 255
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
	cur_step_dir =0;
} //end CW

void CCW(int NumSteps ){
	int i = 0;
	while(i<NumSteps){
 7ca:	0c 17       	cp	r16, r28
 7cc:	1d 07       	cpc	r17, r29
 7ce:	cc f2       	brlt	.-78     	; 0x782 <CCW+0x10>
		}
		PORTA = StepperTable[cur_pos];
		mTimer(20);
		i++;
	}
	cur_step_dir =1;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__data_end+0x1>
 7d8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
} //end CCW
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	1f 91       	pop	r17
 7e2:	0f 91       	pop	r16
 7e4:	08 95       	ret

000007e6 <main>:
void PWM( ); //initialize PWM
void CW(int NumSteps); //initialize CW for stepper
void CCW(int NumSteps); //initialize CCW for stepper

int main(void){
	CLKPR = 0x80;
 7e6:	e1 e6       	ldi	r30, 0x61	; 97
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 e8       	ldi	r24, 0x80	; 128
 7ec:	80 83       	st	Z, r24
	CLKPR = 0x01; //set systems clock to 8 MHz
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	80 83       	st	Z, r24
	TCCR1B = _BV(CS11);
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	STATE = 0;
 7f8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <STATE>
	
	//set ports to input or output
	DDRA = 0x00; //sets PORTA to input
 7fc:	11 b8       	out	0x01, r1	; 1
	DDRF = 0x00; //sets PORTF to input
 7fe:	10 ba       	out	0x10, r1	; 16
	DDRC = 0xff; //set the PORTC as output
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xff; //set the PORTB as output
 804:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00; //set the PORTD as input
 806:	1a b8       	out	0x0a, r1	; 10
	
	PWM( ); //generate PWM
 808:	72 df       	rcall	.-284    	; 0x6ee <PWM>
	InitLCD(LS_BLINK|LS_ULINE); //Initialize LCD module
 80a:	83 e0       	ldi	r24, 0x03	; 3
 80c:	01 dd       	rcall	.-1534   	; 0x210 <InitLCD>
	LCDClear();//Clear the screen
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	c7 dc       	rcall	.-1650   	; 0x1a2 <LCDByte>

	cli( ); //disable interrupts
 814:	f8 94       	cli
	// config the external interrupt ======================================
	EIMSK |= (_BV(INT2)); // enable INT2 (LEFT button - RAMP DOWN SYSTEM)
 816:	8d b3       	in	r24, 0x1d	; 29
 818:	84 60       	ori	r24, 0x04	; 4
 81a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC21)); // falling edge interrupt
 81c:	e9 e6       	ldi	r30, 0x69	; 105
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	80 62       	ori	r24, 0x20	; 32
 824:	80 83       	st	Z, r24
	EIMSK |= (_BV(INT3)); // enable INT3 (RIGHT button - PAUSE SYSTEM)
 826:	8d b3       	in	r24, 0x1d	; 29
 828:	88 60       	ori	r24, 0x08	; 8
 82a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC31) | _BV(ISC30)); //rising edge interrupt
 82c:	80 81       	ld	r24, Z
 82e:	80 6c       	ori	r24, 0xC0	; 192
 830:	80 83       	st	Z, r24
	EIMSK |= (_BV(INT1)); // enable INT1 (EX Sensor)
 832:	8d b3       	in	r24, 0x1d	; 29
 834:	82 60       	ori	r24, 0x02	; 2
 836:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC11)); //falling edge interrupt
 838:	80 81       	ld	r24, Z
 83a:	88 60       	ori	r24, 0x08	; 8
 83c:	80 83       	st	Z, r24
	EIMSK |= (_BV(INT4)); // enable INT4 (OR Sensor)
 83e:	8d b3       	in	r24, 0x1d	; 29
 840:	80 61       	ori	r24, 0x10	; 16
 842:	8d bb       	out	0x1d, r24	; 29
	EICRB |= (_BV(ISC41) | _BV(ISC40)); // rising edge interrupt
 844:	ea e6       	ldi	r30, 0x6A	; 106
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	83 60       	ori	r24, 0x03	; 3
 84c:	80 83       	st	Z, r24
	EIMSK |= (_BV(INT5)); // enable INT5 (HE Sensor)
 84e:	8d b3       	in	r24, 0x1d	; 29
 850:	80 62       	ori	r24, 0x20	; 32
 852:	8d bb       	out	0x1d, r24	; 29
	EICRB |= (_BV(ISC51)); // falling edge interrupt
 854:	80 81       	ld	r24, Z
 856:	88 60       	ori	r24, 0x08	; 8
 858:	80 83       	st	Z, r24
	
	//configure RL sensor interrupt
	ADCSRA |= _BV(ADEN); //enable ADC (RL sensor)
 85a:	ea e7       	ldi	r30, 0x7A	; 122
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	80 68       	ori	r24, 0x80	; 128
 862:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE); //configure ADC interrupt
 864:	80 81       	ld	r24, Z
 866:	88 60       	ori	r24, 0x08	; 8
 868:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0); //set REFS0 to 1, selects voltage for ADC, ADLAR = 0 
 86a:	ec e7       	ldi	r30, 0x7C	; 124
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	80 64       	ori	r24, 0x40	; 64
 872:	80 83       	st	Z, r24
	
	rtnLink = NULL;
 874:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <rtnLink+0x1>
 878:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <rtnLink>
	newLink = NULL;
 87c:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <newLink+0x1>
 880:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <newLink>
	setup(&head,&tail);
 884:	6c e6       	ldi	r22, 0x6C	; 108
 886:	72 e0       	ldi	r23, 0x02	; 2
 888:	80 e7       	ldi	r24, 0x70	; 112
 88a:	92 e0       	ldi	r25, 0x02	; 2
	initLink(&newLink);
 88c:	76 dd       	rcall	.-1300   	; 0x37a <setup>
 88e:	8d e8       	ldi	r24, 0x8D	; 141
 890:	92 e0       	ldi	r25, 0x02	; 2
 892:	7a dd       	rcall	.-1292   	; 0x388 <initLink>
	newLink->p=blk;
 894:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <newLink>
 898:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <newLink+0x1>
 89c:	8e e0       	ldi	r24, 0x0E	; 14
 89e:	e0 e3       	ldi	r30, 0x30	; 48
 8a0:	f2 e0       	ldi	r31, 0x02	; 2
 8a2:	01 90       	ld	r0, Z+
 8a4:	0d 92       	st	X+, r0
 8a6:	8a 95       	dec	r24
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <main+0xbc>
	enqueue(&head,&tail,&newLink);
 8aa:	4d e8       	ldi	r20, 0x8D	; 141
 8ac:	52 e0       	ldi	r21, 0x02	; 2
 8ae:	6c e6       	ldi	r22, 0x6C	; 108
 8b0:	72 e0       	ldi	r23, 0x02	; 2
 8b2:	80 e7       	ldi	r24, 0x70	; 112
 8b4:	92 e0       	ldi	r25, 0x02	; 2
 8b6:	76 dd       	rcall	.-1300   	; 0x3a4 <enqueue>
	
	//home stepper here
	//check pin D7
	cur_pos = 0;
 8b8:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <cur_pos+0x1>
 8bc:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <cur_pos>
	cur_step_dir = 1;//CCW
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__data_end+0x1>
	LCDClear();
 8c8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
	LCDWriteStringXY(0,0,"Hello");
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	69 dc       	rcall	.-1838   	; 0x1a2 <LCDByte>
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	4a dd       	rcall	.-1388   	; 0x36a <LCDGotoXY>
 8d6:	83 e5       	ldi	r24, 0x53	; 83
 8d8:	92 e0       	ldi	r25, 0x02	; 2
	while((PIND&0b10000000)==0b10000000){
 8da:	db dc       	rcall	.-1610   	; 0x292 <LCDWriteString>
		CCW(1);
 8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <main+0xfe>
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	47 df       	rcall	.-370    	; 0x772 <CCW>
	//check pin D7
	cur_pos = 0;
	cur_step_dir = 1;//CCW
	LCDClear();
	LCDWriteStringXY(0,0,"Hello");
	while((PIND&0b10000000)==0b10000000){
 8e4:	4f 99       	sbic	0x09, 7	; 9
 8e6:	fb cf       	rjmp	.-10     	; 0x8de <main+0xf8>
		//mTimer(20);
	}
	//LCDClear();
	//LCDWriteStringXY(0,0,"after while");

	PORTB = DC_CCW;
 8e8:	80 e7       	ldi	r24, 0x70	; 112
 8ea:	85 b9       	out	0x05, r24	; 5
		
	sei( ); //enable all interrupts
 8ec:	78 94       	sei
	
	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	switch(STATE){
 8ee:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <STATE>
 8f2:	83 30       	cpi	r24, 0x03	; 3
 8f4:	09 f1       	breq	.+66     	; 0x938 <main+0x152>
 8f6:	28 f4       	brcc	.+10     	; 0x902 <main+0x11c>
 8f8:	81 30       	cpi	r24, 0x01	; 1
 8fa:	51 f0       	breq	.+20     	; 0x910 <main+0x12a>
 8fc:	82 30       	cpi	r24, 0x02	; 2
 8fe:	59 f0       	breq	.+22     	; 0x916 <main+0x130>
 900:	f6 cf       	rjmp	.-20     	; 0x8ee <main+0x108>
 902:	84 30       	cpi	r24, 0x04	; 4
 904:	09 f4       	brne	.+2      	; 0x908 <main+0x122>
 906:	73 c0       	rjmp	.+230    	; 0x9ee <main+0x208>
 908:	85 30       	cpi	r24, 0x05	; 5
 90a:	09 f4       	brne	.+2      	; 0x90e <main+0x128>
 90c:	84 c0       	rjmp	.+264    	; 0xa16 <main+0x230>
 90e:	ef cf       	rjmp	.-34     	; 0x8ee <main+0x108>
	}//switch STATE

	HOMING_STAGE: //for homing stepper
	// Do whatever is necessary HERE
	//Reset the state variable
	STATE = 0;
 910:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <STATE>
	goto POLLING_STAGE;

	REFLECTIVE_STAGE:
	// Do whatever is necessary HERE
	lowest = 1023;
 914:	ec cf       	rjmp	.-40     	; 0x8ee <main+0x108>
 916:	8f ef       	ldi	r24, 0xFF	; 255
 918:	93 e0       	ldi	r25, 0x03	; 3
 91a:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <lowest+0x1>
 91e:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <lowest>
	initLink(&newLink);
 922:	8d e8       	ldi	r24, 0x8D	; 141
 924:	92 e0       	ldi	r25, 0x02	; 2
 926:	30 dd       	rcall	.-1440   	; 0x388 <initLink>
	ADCSRA |= _BV(ADSC); //starts conversion
 928:	ea e7       	ldi	r30, 0x7A	; 122
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	80 81       	ld	r24, Z
 92e:	80 64       	ori	r24, 0x40	; 64
	//Reset the state variable
	STATE = 0;
 930:	80 83       	st	Z, r24
	goto POLLING_STAGE;
 932:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <STATE>
	
	BUCKET_STAGE:
	//must initialize with black and then turn to next
	dequeue(&head,&tail,&rtnLink);
 936:	db cf       	rjmp	.-74     	; 0x8ee <main+0x108>
 938:	48 e6       	ldi	r20, 0x68	; 104
 93a:	52 e0       	ldi	r21, 0x02	; 2
 93c:	6c e6       	ldi	r22, 0x6C	; 108
 93e:	72 e0       	ldi	r23, 0x02	; 2
	LCDClear();
 940:	80 e7       	ldi	r24, 0x70	; 112
 942:	92 e0       	ldi	r25, 0x02	; 2
 944:	4d dd       	rcall	.-1382   	; 0x3e0 <dequeue>
 946:	60 e0       	ldi	r22, 0x00	; 0
	LCDWriteStringXY(0,0,"Line#");
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	2b dc       	rcall	.-1962   	; 0x1a2 <LCDByte>
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	0c dd       	rcall	.-1512   	; 0x36a <LCDGotoXY>
 952:	89 e5       	ldi	r24, 0x59	; 89
 954:	92 e0       	ldi	r25, 0x02	; 2
	LCDWriteIntXY(0,1,head->p.line,1);
 956:	9d dc       	rcall	.-1734   	; 0x292 <LCDWriteString>
 958:	61 e0       	ldi	r22, 0x01	; 1
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	06 dd       	rcall	.-1524   	; 0x36a <LCDGotoXY>
 95e:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <head>
 962:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <head+0x1>
 966:	61 e0       	ldi	r22, 0x01	; 1
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	84 85       	ldd	r24, Z+12	; 0x0c
 96c:	95 85       	ldd	r25, Z+13	; 0x0d
	if(head->p.line == 4){
 96e:	9e dc       	rcall	.-1732   	; 0x2ac <LCDWriteInt>
 970:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <head>
 974:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <head+0x1>
 978:	84 85       	ldd	r24, Z+12	; 0x0c
 97a:	95 85       	ldd	r25, Z+13	; 0x0d
		CW(50);
 97c:	84 30       	cpi	r24, 0x04	; 4
 97e:	91 05       	cpc	r25, r1
 980:	39 f4       	brne	.+14     	; 0x990 <main+0x1aa>
 982:	82 e3       	ldi	r24, 0x32	; 50
		mTimer(20); 
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	bf de       	rcall	.-642    	; 0x706 <CW>
 988:	84 e1       	ldi	r24, 0x14	; 20
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	90 de       	rcall	.-736    	; 0x6ae <mTimer>
	}else if(head->p.line == 2){
 98e:	25 c0       	rjmp	.+74     	; 0x9da <main+0x1f4>
 990:	82 30       	cpi	r24, 0x02	; 2
		CCW(50);
 992:	91 05       	cpc	r25, r1
 994:	39 f4       	brne	.+14     	; 0x9a4 <main+0x1be>
 996:	82 e3       	ldi	r24, 0x32	; 50
		mTimer(20);  
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	eb de       	rcall	.-554    	; 0x772 <CCW>
 99c:	84 e1       	ldi	r24, 0x14	; 20
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	86 de       	rcall	.-756    	; 0x6ae <mTimer>
	}else if(head->p.line == 3){
 9a2:	1b c0       	rjmp	.+54     	; 0x9da <main+0x1f4>
 9a4:	03 97       	sbiw	r24, 0x03	; 3
		if(cur_step_dir==1){
 9a6:	c9 f4       	brne	.+50     	; 0x9da <main+0x1f4>
 9a8:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
 9ac:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__data_end+0x1>
			CCW(100);
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	39 f4       	brne	.+14     	; 0x9c2 <main+0x1dc>
 9b4:	84 e6       	ldi	r24, 0x64	; 100
			mTimer(20); 
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	dc de       	rcall	.-584    	; 0x772 <CCW>
 9ba:	84 e1       	ldi	r24, 0x14	; 20
 9bc:	90 e0       	ldi	r25, 0x00	; 0
		}else if(cur_step_dir==0){
 9be:	77 de       	rcall	.-786    	; 0x6ae <mTimer>
 9c0:	0c c0       	rjmp	.+24     	; 0x9da <main+0x1f4>
 9c2:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
 9c6:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__data_end+0x1>
			CW(100);
 9ca:	89 2b       	or	r24, r25
 9cc:	31 f4       	brne	.+12     	; 0x9da <main+0x1f4>
			mTimer(20);
 9ce:	84 e6       	ldi	r24, 0x64	; 100
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	99 de       	rcall	.-718    	; 0x706 <CW>
 9d4:	84 e1       	ldi	r24, 0x14	; 20
		} 
	}else if(head->p.line == 1){
		//stay in the same position
	}
	PORTB=DC_CCW; //start belt
 9d6:	90 e0       	ldi	r25, 0x00	; 0
	
		//belt--; //update belt count
		//if belt = 0 turn off DC motor & display final sort
		//set remove value from FIFO & update nxt
	//Reset the state variable
	free(rtnLink);
 9d8:	6a de       	rcall	.-812    	; 0x6ae <mTimer>
 9da:	80 e7       	ldi	r24, 0x70	; 112
 9dc:	85 b9       	out	0x05, r24	; 5
 9de:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <rtnLink>
 9e2:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <rtnLink+0x1>
	STATE = 0;
 9e6:	d9 d0       	rcall	.+434    	; 0xb9a <free>
	goto POLLING_STAGE;
 9e8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <STATE>
	
	PAUSE_STAGE:
	mTimer(40); //debounce
 9ec:	80 cf       	rjmp	.-256    	; 0x8ee <main+0x108>
 9ee:	88 e2       	ldi	r24, 0x28	; 40
 9f0:	90 e0       	ldi	r25, 0x00	; 0
	int prev = PORTB;
 9f2:	5d de       	rcall	.-838    	; 0x6ae <mTimer>
	if(prev==DC_CCW){
 9f4:	85 b1       	in	r24, 0x05	; 5
 9f6:	80 37       	cpi	r24, 0x70	; 112
		PORTB = brake;
 9f8:	31 f4       	brne	.+12     	; 0xa06 <main+0x220>
 9fa:	88 e7       	ldi	r24, 0x78	; 120
		mTimer(40); //debounce
 9fc:	85 b9       	out	0x05, r24	; 5
 9fe:	88 e2       	ldi	r24, 0x28	; 40
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	55 de       	rcall	.-854    	; 0x6ae <mTimer>
 a04:	05 c0       	rjmp	.+10     	; 0xa10 <main+0x22a>
		}else{
		PORTB=DC_CCW;
 a06:	80 e7       	ldi	r24, 0x70	; 112
 a08:	85 b9       	out	0x05, r24	; 5
		mTimer(40); //debounce
 a0a:	88 e2       	ldi	r24, 0x28	; 40
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	4f de       	rcall	.-866    	; 0x6ae <mTimer>
 a10:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <STATE>
	}//end of if
	//Reset the state variable
	
	STATE = 0;
 a14:	6c cf       	rjmp	.-296    	; 0x8ee <main+0x108>
	goto POLLING_STAGE;
 a16:	80 e0       	ldi	r24, 0x00	; 0
	END:
	// The closing STATE ... how would you get here?
	// Stop everything here...'MAKE SAFE'
	return(0);

} //end main
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	08 95       	ret

00000a1c <__divmodhi4>:
 a1c:	97 fb       	bst	r25, 7
 a1e:	07 2e       	mov	r0, r23
 a20:	16 f4       	brtc	.+4      	; 0xa26 <__divmodhi4+0xa>
 a22:	00 94       	com	r0
 a24:	06 d0       	rcall	.+12     	; 0xa32 <__divmodhi4_neg1>
 a26:	77 fd       	sbrc	r23, 7
 a28:	08 d0       	rcall	.+16     	; 0xa3a <__divmodhi4_neg2>
 a2a:	0b d0       	rcall	.+22     	; 0xa42 <__udivmodhi4>
 a2c:	07 fc       	sbrc	r0, 7
 a2e:	05 d0       	rcall	.+10     	; 0xa3a <__divmodhi4_neg2>
 a30:	3e f4       	brtc	.+14     	; 0xa40 <__divmodhi4_exit>

00000a32 <__divmodhi4_neg1>:
 a32:	90 95       	com	r25
 a34:	81 95       	neg	r24
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	08 95       	ret

00000a3a <__divmodhi4_neg2>:
 a3a:	70 95       	com	r23
 a3c:	61 95       	neg	r22
 a3e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a40 <__divmodhi4_exit>:
 a40:	08 95       	ret

00000a42 <__udivmodhi4>:
 a42:	aa 1b       	sub	r26, r26
 a44:	bb 1b       	sub	r27, r27
 a46:	51 e1       	ldi	r21, 0x11	; 17
 a48:	07 c0       	rjmp	.+14     	; 0xa58 <__udivmodhi4_ep>

00000a4a <__udivmodhi4_loop>:
 a4a:	aa 1f       	adc	r26, r26
 a4c:	bb 1f       	adc	r27, r27
 a4e:	a6 17       	cp	r26, r22
 a50:	b7 07       	cpc	r27, r23
 a52:	10 f0       	brcs	.+4      	; 0xa58 <__udivmodhi4_ep>
 a54:	a6 1b       	sub	r26, r22
 a56:	b7 0b       	sbc	r27, r23

00000a58 <__udivmodhi4_ep>:
 a58:	88 1f       	adc	r24, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	5a 95       	dec	r21
 a5e:	a9 f7       	brne	.-22     	; 0xa4a <__udivmodhi4_loop>
 a60:	80 95       	com	r24
 a62:	90 95       	com	r25
 a64:	bc 01       	movw	r22, r24
 a66:	cd 01       	movw	r24, r26
 a68:	08 95       	ret

00000a6a <malloc>:
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	82 30       	cpi	r24, 0x02	; 2
 a74:	91 05       	cpc	r25, r1
 a76:	10 f4       	brcc	.+4      	; 0xa7c <malloc+0x12>
 a78:	82 e0       	ldi	r24, 0x02	; 2
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <__flp>
 a80:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <__flp+0x1>
 a84:	20 e0       	ldi	r18, 0x00	; 0
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	a0 e0       	ldi	r26, 0x00	; 0
 a8a:	b0 e0       	ldi	r27, 0x00	; 0
 a8c:	30 97       	sbiw	r30, 0x00	; 0
 a8e:	19 f1       	breq	.+70     	; 0xad6 <malloc+0x6c>
 a90:	40 81       	ld	r20, Z
 a92:	51 81       	ldd	r21, Z+1	; 0x01
 a94:	02 81       	ldd	r16, Z+2	; 0x02
 a96:	13 81       	ldd	r17, Z+3	; 0x03
 a98:	48 17       	cp	r20, r24
 a9a:	59 07       	cpc	r21, r25
 a9c:	c8 f0       	brcs	.+50     	; 0xad0 <malloc+0x66>
 a9e:	84 17       	cp	r24, r20
 aa0:	95 07       	cpc	r25, r21
 aa2:	69 f4       	brne	.+26     	; 0xabe <malloc+0x54>
 aa4:	10 97       	sbiw	r26, 0x00	; 0
 aa6:	31 f0       	breq	.+12     	; 0xab4 <malloc+0x4a>
 aa8:	12 96       	adiw	r26, 0x02	; 2
 aaa:	0c 93       	st	X, r16
 aac:	12 97       	sbiw	r26, 0x02	; 2
 aae:	13 96       	adiw	r26, 0x03	; 3
 ab0:	1c 93       	st	X, r17
 ab2:	27 c0       	rjmp	.+78     	; 0xb02 <malloc+0x98>
 ab4:	00 93 93 02 	sts	0x0293, r16	; 0x800293 <__flp>
 ab8:	10 93 94 02 	sts	0x0294, r17	; 0x800294 <__flp+0x1>
 abc:	22 c0       	rjmp	.+68     	; 0xb02 <malloc+0x98>
 abe:	21 15       	cp	r18, r1
 ac0:	31 05       	cpc	r19, r1
 ac2:	19 f0       	breq	.+6      	; 0xaca <malloc+0x60>
 ac4:	42 17       	cp	r20, r18
 ac6:	53 07       	cpc	r21, r19
 ac8:	18 f4       	brcc	.+6      	; 0xad0 <malloc+0x66>
 aca:	9a 01       	movw	r18, r20
 acc:	bd 01       	movw	r22, r26
 ace:	ef 01       	movw	r28, r30
 ad0:	df 01       	movw	r26, r30
 ad2:	f8 01       	movw	r30, r16
 ad4:	db cf       	rjmp	.-74     	; 0xa8c <malloc+0x22>
 ad6:	21 15       	cp	r18, r1
 ad8:	31 05       	cpc	r19, r1
 ada:	f9 f0       	breq	.+62     	; 0xb1a <malloc+0xb0>
 adc:	28 1b       	sub	r18, r24
 ade:	39 0b       	sbc	r19, r25
 ae0:	24 30       	cpi	r18, 0x04	; 4
 ae2:	31 05       	cpc	r19, r1
 ae4:	80 f4       	brcc	.+32     	; 0xb06 <malloc+0x9c>
 ae6:	8a 81       	ldd	r24, Y+2	; 0x02
 ae8:	9b 81       	ldd	r25, Y+3	; 0x03
 aea:	61 15       	cp	r22, r1
 aec:	71 05       	cpc	r23, r1
 aee:	21 f0       	breq	.+8      	; 0xaf8 <malloc+0x8e>
 af0:	fb 01       	movw	r30, r22
 af2:	93 83       	std	Z+3, r25	; 0x03
 af4:	82 83       	std	Z+2, r24	; 0x02
 af6:	04 c0       	rjmp	.+8      	; 0xb00 <malloc+0x96>
 af8:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <__flp+0x1>
 afc:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <__flp>
 b00:	fe 01       	movw	r30, r28
 b02:	32 96       	adiw	r30, 0x02	; 2
 b04:	44 c0       	rjmp	.+136    	; 0xb8e <malloc+0x124>
 b06:	fe 01       	movw	r30, r28
 b08:	e2 0f       	add	r30, r18
 b0a:	f3 1f       	adc	r31, r19
 b0c:	81 93       	st	Z+, r24
 b0e:	91 93       	st	Z+, r25
 b10:	22 50       	subi	r18, 0x02	; 2
 b12:	31 09       	sbc	r19, r1
 b14:	39 83       	std	Y+1, r19	; 0x01
 b16:	28 83       	st	Y, r18
 b18:	3a c0       	rjmp	.+116    	; 0xb8e <malloc+0x124>
 b1a:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <__brkval>
 b1e:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <__brkval+0x1>
 b22:	23 2b       	or	r18, r19
 b24:	41 f4       	brne	.+16     	; 0xb36 <malloc+0xcc>
 b26:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 b2a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 b2e:	30 93 92 02 	sts	0x0292, r19	; 0x800292 <__brkval+0x1>
 b32:	20 93 91 02 	sts	0x0291, r18	; 0x800291 <__brkval>
 b36:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 b3a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 b3e:	21 15       	cp	r18, r1
 b40:	31 05       	cpc	r19, r1
 b42:	41 f4       	brne	.+16     	; 0xb54 <malloc+0xea>
 b44:	2d b7       	in	r18, 0x3d	; 61
 b46:	3e b7       	in	r19, 0x3e	; 62
 b48:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 b4c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 b50:	24 1b       	sub	r18, r20
 b52:	35 0b       	sbc	r19, r21
 b54:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <__brkval>
 b58:	f0 91 92 02 	lds	r31, 0x0292	; 0x800292 <__brkval+0x1>
 b5c:	e2 17       	cp	r30, r18
 b5e:	f3 07       	cpc	r31, r19
 b60:	a0 f4       	brcc	.+40     	; 0xb8a <malloc+0x120>
 b62:	2e 1b       	sub	r18, r30
 b64:	3f 0b       	sbc	r19, r31
 b66:	28 17       	cp	r18, r24
 b68:	39 07       	cpc	r19, r25
 b6a:	78 f0       	brcs	.+30     	; 0xb8a <malloc+0x120>
 b6c:	ac 01       	movw	r20, r24
 b6e:	4e 5f       	subi	r20, 0xFE	; 254
 b70:	5f 4f       	sbci	r21, 0xFF	; 255
 b72:	24 17       	cp	r18, r20
 b74:	35 07       	cpc	r19, r21
 b76:	48 f0       	brcs	.+18     	; 0xb8a <malloc+0x120>
 b78:	4e 0f       	add	r20, r30
 b7a:	5f 1f       	adc	r21, r31
 b7c:	50 93 92 02 	sts	0x0292, r21	; 0x800292 <__brkval+0x1>
 b80:	40 93 91 02 	sts	0x0291, r20	; 0x800291 <__brkval>
 b84:	81 93       	st	Z+, r24
 b86:	91 93       	st	Z+, r25
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <malloc+0x124>
 b8a:	e0 e0       	ldi	r30, 0x00	; 0
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	cf 01       	movw	r24, r30
 b90:	df 91       	pop	r29
 b92:	cf 91       	pop	r28
 b94:	1f 91       	pop	r17
 b96:	0f 91       	pop	r16
 b98:	08 95       	ret

00000b9a <free>:
 b9a:	cf 93       	push	r28
 b9c:	df 93       	push	r29
 b9e:	00 97       	sbiw	r24, 0x00	; 0
 ba0:	09 f4       	brne	.+2      	; 0xba4 <free+0xa>
 ba2:	81 c0       	rjmp	.+258    	; 0xca6 <free+0x10c>
 ba4:	fc 01       	movw	r30, r24
 ba6:	32 97       	sbiw	r30, 0x02	; 2
 ba8:	13 82       	std	Z+3, r1	; 0x03
 baa:	12 82       	std	Z+2, r1	; 0x02
 bac:	a0 91 93 02 	lds	r26, 0x0293	; 0x800293 <__flp>
 bb0:	b0 91 94 02 	lds	r27, 0x0294	; 0x800294 <__flp+0x1>
 bb4:	10 97       	sbiw	r26, 0x00	; 0
 bb6:	81 f4       	brne	.+32     	; 0xbd8 <free+0x3e>
 bb8:	20 81       	ld	r18, Z
 bba:	31 81       	ldd	r19, Z+1	; 0x01
 bbc:	82 0f       	add	r24, r18
 bbe:	93 1f       	adc	r25, r19
 bc0:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <__brkval>
 bc4:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <__brkval+0x1>
 bc8:	28 17       	cp	r18, r24
 bca:	39 07       	cpc	r19, r25
 bcc:	51 f5       	brne	.+84     	; 0xc22 <free+0x88>
 bce:	f0 93 92 02 	sts	0x0292, r31	; 0x800292 <__brkval+0x1>
 bd2:	e0 93 91 02 	sts	0x0291, r30	; 0x800291 <__brkval>
 bd6:	67 c0       	rjmp	.+206    	; 0xca6 <free+0x10c>
 bd8:	ed 01       	movw	r28, r26
 bda:	20 e0       	ldi	r18, 0x00	; 0
 bdc:	30 e0       	ldi	r19, 0x00	; 0
 bde:	ce 17       	cp	r28, r30
 be0:	df 07       	cpc	r29, r31
 be2:	40 f4       	brcc	.+16     	; 0xbf4 <free+0x5a>
 be4:	4a 81       	ldd	r20, Y+2	; 0x02
 be6:	5b 81       	ldd	r21, Y+3	; 0x03
 be8:	9e 01       	movw	r18, r28
 bea:	41 15       	cp	r20, r1
 bec:	51 05       	cpc	r21, r1
 bee:	f1 f0       	breq	.+60     	; 0xc2c <free+0x92>
 bf0:	ea 01       	movw	r28, r20
 bf2:	f5 cf       	rjmp	.-22     	; 0xbde <free+0x44>
 bf4:	d3 83       	std	Z+3, r29	; 0x03
 bf6:	c2 83       	std	Z+2, r28	; 0x02
 bf8:	40 81       	ld	r20, Z
 bfa:	51 81       	ldd	r21, Z+1	; 0x01
 bfc:	84 0f       	add	r24, r20
 bfe:	95 1f       	adc	r25, r21
 c00:	c8 17       	cp	r28, r24
 c02:	d9 07       	cpc	r29, r25
 c04:	59 f4       	brne	.+22     	; 0xc1c <free+0x82>
 c06:	88 81       	ld	r24, Y
 c08:	99 81       	ldd	r25, Y+1	; 0x01
 c0a:	84 0f       	add	r24, r20
 c0c:	95 1f       	adc	r25, r21
 c0e:	02 96       	adiw	r24, 0x02	; 2
 c10:	91 83       	std	Z+1, r25	; 0x01
 c12:	80 83       	st	Z, r24
 c14:	8a 81       	ldd	r24, Y+2	; 0x02
 c16:	9b 81       	ldd	r25, Y+3	; 0x03
 c18:	93 83       	std	Z+3, r25	; 0x03
 c1a:	82 83       	std	Z+2, r24	; 0x02
 c1c:	21 15       	cp	r18, r1
 c1e:	31 05       	cpc	r19, r1
 c20:	29 f4       	brne	.+10     	; 0xc2c <free+0x92>
 c22:	f0 93 94 02 	sts	0x0294, r31	; 0x800294 <__flp+0x1>
 c26:	e0 93 93 02 	sts	0x0293, r30	; 0x800293 <__flp>
 c2a:	3d c0       	rjmp	.+122    	; 0xca6 <free+0x10c>
 c2c:	e9 01       	movw	r28, r18
 c2e:	fb 83       	std	Y+3, r31	; 0x03
 c30:	ea 83       	std	Y+2, r30	; 0x02
 c32:	49 91       	ld	r20, Y+
 c34:	59 91       	ld	r21, Y+
 c36:	c4 0f       	add	r28, r20
 c38:	d5 1f       	adc	r29, r21
 c3a:	ec 17       	cp	r30, r28
 c3c:	fd 07       	cpc	r31, r29
 c3e:	61 f4       	brne	.+24     	; 0xc58 <free+0xbe>
 c40:	80 81       	ld	r24, Z
 c42:	91 81       	ldd	r25, Z+1	; 0x01
 c44:	84 0f       	add	r24, r20
 c46:	95 1f       	adc	r25, r21
 c48:	02 96       	adiw	r24, 0x02	; 2
 c4a:	e9 01       	movw	r28, r18
 c4c:	99 83       	std	Y+1, r25	; 0x01
 c4e:	88 83       	st	Y, r24
 c50:	82 81       	ldd	r24, Z+2	; 0x02
 c52:	93 81       	ldd	r25, Z+3	; 0x03
 c54:	9b 83       	std	Y+3, r25	; 0x03
 c56:	8a 83       	std	Y+2, r24	; 0x02
 c58:	e0 e0       	ldi	r30, 0x00	; 0
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	12 96       	adiw	r26, 0x02	; 2
 c5e:	8d 91       	ld	r24, X+
 c60:	9c 91       	ld	r25, X
 c62:	13 97       	sbiw	r26, 0x03	; 3
 c64:	00 97       	sbiw	r24, 0x00	; 0
 c66:	19 f0       	breq	.+6      	; 0xc6e <free+0xd4>
 c68:	fd 01       	movw	r30, r26
 c6a:	dc 01       	movw	r26, r24
 c6c:	f7 cf       	rjmp	.-18     	; 0xc5c <free+0xc2>
 c6e:	8d 91       	ld	r24, X+
 c70:	9c 91       	ld	r25, X
 c72:	11 97       	sbiw	r26, 0x01	; 1
 c74:	9d 01       	movw	r18, r26
 c76:	2e 5f       	subi	r18, 0xFE	; 254
 c78:	3f 4f       	sbci	r19, 0xFF	; 255
 c7a:	82 0f       	add	r24, r18
 c7c:	93 1f       	adc	r25, r19
 c7e:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <__brkval>
 c82:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <__brkval+0x1>
 c86:	28 17       	cp	r18, r24
 c88:	39 07       	cpc	r19, r25
 c8a:	69 f4       	brne	.+26     	; 0xca6 <free+0x10c>
 c8c:	30 97       	sbiw	r30, 0x00	; 0
 c8e:	29 f4       	brne	.+10     	; 0xc9a <free+0x100>
 c90:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__flp+0x1>
 c94:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <__flp>
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <free+0x104>
 c9a:	13 82       	std	Z+3, r1	; 0x03
 c9c:	12 82       	std	Z+2, r1	; 0x02
 c9e:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <__brkval+0x1>
 ca2:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <__brkval>
 ca6:	df 91       	pop	r29
 ca8:	cf 91       	pop	r28
 caa:	08 95       	ret

00000cac <_exit>:
 cac:	f8 94       	cli

00000cae <__stop_program>:
 cae:	ff cf       	rjmp	.-2      	; 0xcae <__stop_program>
