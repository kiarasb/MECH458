
LCD_PortC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800200  00000438  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001591  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dcf  00000000  00000000  00001b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075a  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000638  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ef  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000040b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e3       	ldi	r30, 0x38	; 56
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 35       	cpi	r26, 0x56	; 86
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	25 d1       	rcall	.+586    	; 0x35a <main>
 110:	91 c1       	rjmp	.+802    	; 0x434 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 114:	87 b1       	in	r24, 0x07	; 7
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 11a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 11c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <LCDBusyLoop+0xc>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 126:	47 9a       	sbi	0x08, 7	; 8
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDBusyLoop+0x16>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 130:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 132:	82 95       	swap	r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	9a 95       	dec	r25
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x24>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 13e:	47 98       	cbi	0x08, 7	; 8
 140:	95 e0       	ldi	r25, 0x05	; 5
 142:	9a 95       	dec	r25
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDBusyLoop+0x2e>
 146:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 148:	47 9a       	sbi	0x08, 7	; 8
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCDBusyLoop+0x38>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 152:	96 b1       	in	r25, 0x06	; 6
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	9a 95       	dec	r25
 158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x42>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 15c:	47 98       	cbi	0x08, 7	; 8
 15e:	95 e0       	ldi	r25, 0x05	; 5
 160:	9a 95       	dec	r25
 162:	f1 f7       	brne	.-4      	; 0x160 <LCDBusyLoop+0x4c>
 164:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 166:	88 23       	and	r24, r24
 168:	f4 f2       	brlt	.-68     	; 0x126 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 16a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 16c:	87 b1       	in	r24, 0x07	; 7
 16e:	8f 60       	ori	r24, 0x0F	; 15
 170:	87 b9       	out	0x07, r24	; 7
 172:	08 95       	ret

00000174 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 174:	28 2f       	mov	r18, r24
 176:	22 95       	swap	r18
 178:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 17a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 17c:	61 11       	cpse	r22, r1
 17e:	02 c0       	rjmp	.+4      	; 0x184 <LCDByte+0x10>
	CLEAR_RS();
 180:	46 98       	cbi	0x08, 6	; 8
 182:	01 c0       	rjmp	.+2      	; 0x186 <LCDByte+0x12>
else
	SET_RS();
 184:	46 9a       	sbi	0x08, 6	; 8
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDByte+0x14>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
 18e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 190:	98 b1       	in	r25, 0x08	; 8
 192:	90 7f       	andi	r25, 0xF0	; 240
 194:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 196:	98 b9       	out	0x08, r25	; 8
 198:	95 e0       	ldi	r25, 0x05	; 5
 19a:	9a 95       	dec	r25
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCDByte+0x26>
 19e:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1a0:	47 98       	cbi	0x08, 7	; 8
 1a2:	95 e0       	ldi	r25, 0x05	; 5
 1a4:	9a 95       	dec	r25
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCDByte+0x30>
 1a8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1aa:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1ac:	98 b1       	in	r25, 0x08	; 8
 1ae:	90 7f       	andi	r25, 0xF0	; 240
 1b0:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1b2:	88 b9       	out	0x08, r24	; 8
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	8a 95       	dec	r24
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDByte+0x42>
 1ba:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1bc:	47 98       	cbi	0x08, 7	; 8
 1be:	95 e0       	ldi	r25, 0x05	; 5
 1c0:	9a 95       	dec	r25
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x4c>
 1c4:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 1c6:	a6 cf       	rjmp	.-180    	; 0x114 <LCDBusyLoop>
 1c8:	08 95       	ret

000001ca <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1ca:	cf 93       	push	r28
 1cc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	86 e7       	ldi	r24, 0x76	; 118
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <InitLCD+0xa>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <InitLCD+0x14>
 1de:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1e0:	87 b1       	in	r24, 0x07	; 7
 1e2:	8f 60       	ori	r24, 0x0F	; 15
 1e4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1e6:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1e8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1ea:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1ec:	88 b1       	in	r24, 0x08	; 8
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 1f2:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 1f4:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 1f6:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <InitLCD+0x30>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <InitLCD+0x32>
 1fc:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 1fe:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 200:	41 9a       	sbi	0x08, 1	; 8
 202:	25 e0       	ldi	r18, 0x05	; 5
 204:	2a 95       	dec	r18
 206:	f1 f7       	brne	.-4      	; 0x204 <InitLCD+0x3a>
 208:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 20a:	47 98       	cbi	0x08, 7	; 8
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <InitLCD+0x44>
 212:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 214:	7f df       	rcall	.-258    	; 0x114 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	8c 2f       	mov	r24, r28
 21a:	8c 60       	ori	r24, 0x0C	; 12
 21c:	ab df       	rcall	.-170    	; 0x174 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	a8 df       	rcall	.-176    	; 0x174 <LCDByte>
}
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 22e:	88 81       	ld	r24, Y
 230:	88 23       	and	r24, r24
 232:	31 f0       	breq	.+12     	; 0x240 <LCDWriteString+0x18>
 234:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	9d df       	rcall	.-198    	; 0x174 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 23a:	89 91       	ld	r24, Y+
 23c:	81 11       	cpse	r24, r1
 23e:	fb cf       	rjmp	.-10     	; 0x236 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <LCDWriteInt+0xe>
 254:	1f 92       	push	r1
 256:	1f 92       	push	r1
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 25e:	fe 01       	movw	r30, r28
 260:	31 96       	adiw	r30, 0x01	; 1
 262:	25 e0       	ldi	r18, 0x05	; 5
 264:	df 01       	movw	r26, r30
 266:	1d 92       	st	X+, r1
 268:	2a 95       	dec	r18
 26a:	e9 f7       	brne	.-6      	; 0x266 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 26c:	00 97       	sbiw	r24, 0x00	; 0
 26e:	51 f0       	breq	.+20     	; 0x284 <LCDWriteInt+0x3e>
 270:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 272:	2a e0       	ldi	r18, 0x0A	; 10
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	b6 d0       	rcall	.+364    	; 0x3e6 <__divmodhi4>
 27a:	82 93       	st	-Z, r24
	val=val/10;
 27c:	86 2f       	mov	r24, r22
 27e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	c9 f7       	brne	.-14     	; 0x276 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 284:	bf ef       	ldi	r27, 0xFF	; 255
 286:	eb 16       	cp	r14, r27
 288:	fb 06       	cpc	r15, r27
 28a:	69 f4       	brne	.+26     	; 0x2a6 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	81 11       	cpse	r24, r1
 290:	1d c0       	rjmp	.+58     	; 0x2cc <LCDWriteInt+0x86>
 292:	fe 01       	movw	r30, r28
 294:	32 96       	adiw	r30, 0x02	; 2
 296:	00 e0       	ldi	r16, 0x00	; 0
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	0f 5f       	subi	r16, 0xFF	; 255
 29c:	1f 4f       	sbci	r17, 0xFF	; 255
 29e:	81 91       	ld	r24, Z+
 2a0:	88 23       	and	r24, r24
 2a2:	d9 f3       	breq	.-10     	; 0x29a <LCDWriteInt+0x54>
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 2a6:	05 e0       	ldi	r16, 0x05	; 5
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	0e 19       	sub	r16, r14
 2ac:	1f 09       	sbc	r17, r15
 2ae:	0a c0       	rjmp	.+20     	; 0x2c4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2b0:	f8 01       	movw	r30, r16
 2b2:	81 91       	ld	r24, Z+
 2b4:	8f 01       	movw	r16, r30
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	80 5d       	subi	r24, 0xD0	; 208
 2ba:	5c df       	rcall	.-328    	; 0x174 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2bc:	0e 15       	cp	r16, r14
 2be:	1f 05       	cpc	r17, r15
 2c0:	b9 f7       	brne	.-18     	; 0x2b0 <LCDWriteInt+0x6a>
 2c2:	11 c0       	rjmp	.+34     	; 0x2e6 <LCDWriteInt+0xa0>
 2c4:	05 30       	cpi	r16, 0x05	; 5
 2c6:	11 05       	cpc	r17, r1
 2c8:	1c f0       	brlt	.+6      	; 0x2d0 <LCDWriteInt+0x8a>
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	10 e0       	ldi	r17, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	8c 0f       	add	r24, r28
 2d6:	9d 1f       	adc	r25, r29
 2d8:	08 0f       	add	r16, r24
 2da:	19 1f       	adc	r17, r25
 2dc:	7e 01       	movw	r14, r28
 2de:	96 e0       	ldi	r25, 0x06	; 6
 2e0:	e9 0e       	add	r14, r25
 2e2:	f1 1c       	adc	r15, r1
 2e4:	e5 cf       	rjmp	.-54     	; 0x2b0 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	08 95       	ret

000002fe <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 2fe:	88 32       	cpi	r24, 0x28	; 40
 300:	28 f4       	brcc	.+10     	; 0x30c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 302:	61 11       	cpse	r22, r1
 304:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	80 68       	ori	r24, 0x80	; 128
 30a:	34 cf       	rjmp	.-408    	; 0x174 <LCDByte>
 30c:	08 95       	ret

0000030e <mTimer>:
	  
   int i;

   i = 0;

   TCCR1B |= _BV (CS11);  // Set prescaler (/8) clock 16MHz/8 -> 2MHz
 30e:	e1 e8       	ldi	r30, 0x81	; 129
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	20 81       	ld	r18, Z
 314:	22 60       	ori	r18, 0x02	; 2
 316:	20 83       	st	Z, r18
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 318:	20 81       	ld	r18, Z
 31a:	28 60       	ori	r18, 0x08	; 8
 31c:	20 83       	st	Z, r18

   /* Set output compare register for 2000 cycles, 1ms */
   OCR1A = 0x07D0;
 31e:	20 ed       	ldi	r18, 0xD0	; 208
 320:	37 e0       	ldi	r19, 0x07	; 7
 322:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 326:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 
   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
 32a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 32e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

   /* Enable the output compare interrupt */
   //TIMSK1 |= _BV(OCIE1A);  //remove if global interrups is set (sei())

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 332:	b1 9a       	sbi	0x16, 1	; 22

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
 334:	18 16       	cp	r1, r24
 336:	19 06       	cpc	r1, r25
 338:	54 f4       	brge	.+20     	; 0x34e <mTimer+0x40>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
   {
      while ((TIFR1 & 0x02) != 0x02);
 33e:	b1 9b       	sbis	0x16, 1	; 22
 340:	fe cf       	rjmp	.-4      	; 0x33e <mTimer+0x30>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 342:	b1 9a       	sbi	0x16, 1	; 22
	   i++;
 344:	2f 5f       	subi	r18, 0xFF	; 255
 346:	3f 4f       	sbci	r19, 0xFF	; 255

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count)
 348:	82 17       	cp	r24, r18
 34a:	93 07       	cpc	r25, r19
 34c:	c1 f7       	brne	.-16     	; 0x33e <mTimer+0x30>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
	   i++;
   } /* while */
   TCCR1B &= ~_BV (CS11);  //  disable prescalar, no Clock
 34e:	e1 e8       	ldi	r30, 0x81	; 129
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8d 7f       	andi	r24, 0xFD	; 253
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <main>:
}  /* mTimer */



int main(int argc,char*argv[])
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
	unsigned char i;

	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	34 df       	rcall	.-408    	; 0x1ca <InitLCD>

	//Clear the screen
	LCDClear();
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	06 df       	rcall	.-500    	; 0x174 <LCDByte>

	//Simple string printing
	LCDWriteString("Congrats ");
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	92 e0       	ldi	r25, 0x02	; 2
 36c:	5d df       	rcall	.-326    	; 0x228 <LCDWriteString>
	
	//A string on line 2
	LCDWriteStringXY(0,1,"Loading ");
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	c5 df       	rcall	.-118    	; 0x2fe <LCDGotoXY>
 374:	8a e0       	ldi	r24, 0x0A	; 10
 376:	92 e0       	ldi	r25, 0x02	; 2
 378:	57 df       	rcall	.-338    	; 0x228 <LCDWriteString>
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e0       	ldi	r29, 0x00	; 0

	//Print some numbers
	for (i=0;i<99;i+=1)
	{
		LCDWriteIntXY(9,1,i,3);
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	89 e0       	ldi	r24, 0x09	; 9
 382:	bd df       	rcall	.-134    	; 0x2fe <LCDGotoXY>
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	ce 01       	movw	r24, r28
 38a:	5d df       	rcall	.-326    	; 0x246 <LCDWriteInt>
		LCDWriteStringXY(12,1,"%");
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	b6 df       	rcall	.-148    	; 0x2fe <LCDGotoXY>
 392:	83 e1       	ldi	r24, 0x13	; 19
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	48 df       	rcall	.-368    	; 0x228 <LCDWriteString>
 398:	88 ee       	ldi	r24, 0xE8	; 232
		//_delay_loop_2(0);	
		//_delay_loop_2(0);	
		//_delay_loop_2(0);	
		//_delay_loop_2(0);	
		mTimer(1000);
 39a:	93 e0       	ldi	r25, 0x03	; 3
 39c:	b8 df       	rcall	.-144    	; 0x30e <mTimer>
 39e:	21 96       	adiw	r28, 0x01	; 1
	
	//A string on line 2
	LCDWriteStringXY(0,1,"Loading ");

	//Print some numbers
	for (i=0;i<99;i+=1)
 3a0:	c3 36       	cpi	r28, 0x63	; 99
 3a2:	d1 05       	cpc	r29, r1
		//_delay_loop_2(0);	
		mTimer(1000);
	}

	//Clear the screen
	LCDClear();
 3a4:	61 f7       	brne	.-40     	; 0x37e <main+0x24>
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1

	//Some more text

	LCDWriteString("Hello world");
 3aa:	e4 de       	rcall	.-568    	; 0x174 <LCDByte>
 3ac:	85 e1       	ldi	r24, 0x15	; 21
 3ae:	92 e0       	ldi	r25, 0x02	; 2
	LCDWriteStringXY(0,1,"By Kiara, Sam, and Justin");		// <--- Write ur NAME HERE !!!!!!!!!!!
 3b0:	3b df       	rcall	.-394    	; 0x228 <LCDWriteString>
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	a3 df       	rcall	.-186    	; 0x2fe <LCDGotoXY>
 3b8:	81 e2       	ldi	r24, 0x21	; 33
 3ba:	92 e0       	ldi	r25, 0x02	; 2

	//Wait ~ 25 secs
	//for(i=0;i<100;i++) _delay_loop_2(0);
	mTimer (25000);
 3bc:	35 df       	rcall	.-406    	; 0x228 <LCDWriteString>
 3be:	88 ea       	ldi	r24, 0xA8	; 168
 3c0:	91 e6       	ldi	r25, 0x61	; 97

	//Some More ......
	LCDClear();
 3c2:	a5 df       	rcall	.-182    	; 0x30e <mTimer>
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	d5 de       	rcall	.-598    	; 0x174 <LCDByte>
	//mTimer(100);
	LCDWriteString("    eXtreme");
 3ca:	8b e3       	ldi	r24, 0x3B	; 59
 3cc:	92 e0       	ldi	r25, 0x02	; 2
 3ce:	2c df       	rcall	.-424    	; 0x228 <LCDWriteString>
 3d0:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteStringXY(0,1,"  Electronics");
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	94 df       	rcall	.-216    	; 0x2fe <LCDGotoXY>
 3d6:	87 e4       	ldi	r24, 0x47	; 71
 3d8:	92 e0       	ldi	r25, 0x02	; 2
 3da:	26 df       	rcall	.-436    	; 0x228 <LCDWriteString>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	df 91       	pop	r29

   return(0);

}
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <__divmodhi4>:
 3e6:	97 fb       	bst	r25, 7
 3e8:	07 2e       	mov	r0, r23
 3ea:	16 f4       	brtc	.+4      	; 0x3f0 <__divmodhi4+0xa>
 3ec:	00 94       	com	r0
 3ee:	06 d0       	rcall	.+12     	; 0x3fc <__divmodhi4_neg1>
 3f0:	77 fd       	sbrc	r23, 7
 3f2:	08 d0       	rcall	.+16     	; 0x404 <__divmodhi4_neg2>
 3f4:	0b d0       	rcall	.+22     	; 0x40c <__udivmodhi4>
 3f6:	07 fc       	sbrc	r0, 7
 3f8:	05 d0       	rcall	.+10     	; 0x404 <__divmodhi4_neg2>
 3fa:	3e f4       	brtc	.+14     	; 0x40a <__divmodhi4_exit>

000003fc <__divmodhi4_neg1>:
 3fc:	90 95       	com	r25
 3fe:	81 95       	neg	r24
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	08 95       	ret

00000404 <__divmodhi4_neg2>:
 404:	70 95       	com	r23
 406:	61 95       	neg	r22
 408:	7f 4f       	sbci	r23, 0xFF	; 255

0000040a <__divmodhi4_exit>:
 40a:	08 95       	ret

0000040c <__udivmodhi4>:
 40c:	aa 1b       	sub	r26, r26
 40e:	bb 1b       	sub	r27, r27
 410:	51 e1       	ldi	r21, 0x11	; 17
 412:	07 c0       	rjmp	.+14     	; 0x422 <__udivmodhi4_ep>

00000414 <__udivmodhi4_loop>:
 414:	aa 1f       	adc	r26, r26
 416:	bb 1f       	adc	r27, r27
 418:	a6 17       	cp	r26, r22
 41a:	b7 07       	cpc	r27, r23
 41c:	10 f0       	brcs	.+4      	; 0x422 <__udivmodhi4_ep>
 41e:	a6 1b       	sub	r26, r22
 420:	b7 0b       	sbc	r27, r23

00000422 <__udivmodhi4_ep>:
 422:	88 1f       	adc	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	5a 95       	dec	r21
 428:	a9 f7       	brne	.-22     	; 0x414 <__udivmodhi4_loop>
 42a:	80 95       	com	r24
 42c:	90 95       	com	r25
 42e:	bc 01       	movw	r22, r24
 430:	cd 01       	movw	r24, r26
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
