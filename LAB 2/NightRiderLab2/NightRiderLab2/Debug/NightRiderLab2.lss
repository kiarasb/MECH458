
NightRiderLab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d06  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be6  00000000  00000000  00000f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000557  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  00002433  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000024a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	27 d0       	rcall	.+78     	; 0x144 <main>
  f6:	4b c0       	rjmp	.+150    	; 0x18e <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <mTimer>:
   i = 0;

   //TCCR1B |= _BV (CS11);  // Set prescaler (/8) clock 16MHz/8 -> 2MHz
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
  fa:	e1 e8       	ldi	r30, 0x81	; 129
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	20 81       	ld	r18, Z
 100:	28 60       	ori	r18, 0x08	; 8
 102:	20 83       	st	Z, r18

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 104:	28 ee       	ldi	r18, 0xE8	; 232
 106:	33 e0       	ldi	r19, 0x03	; 3
 108:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 10c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 
   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
 110:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 114:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

   /* Enable the output compare interrupt */
   TIMSK1 = TIMSK1 | 0b00000010;
 118:	ef e6       	ldi	r30, 0x6F	; 111
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	20 81       	ld	r18, Z
 11e:	22 60       	ori	r18, 0x02	; 2
 120:	20 83       	st	Z, r18

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 122:	26 b3       	in	r18, 0x16	; 22
 124:	22 60       	ori	r18, 0x02	; 2
 126:	26 bb       	out	0x16, r18	; 22
	  Using polling method not Interrupt Driven
   ***/
	  
   int i;

   i = 0;
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 12c:	07 c0       	rjmp	.+14     	; 0x13c <mTimer+0x42>
      if((TIFR1 & 0x02) == 0x02){
 12e:	b1 9b       	sbis	0x16, 1	; 22
 130:	05 c0       	rjmp	.+10     	; 0x13c <mTimer+0x42>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 132:	46 b3       	in	r20, 0x16	; 22
 134:	42 60       	ori	r20, 0x02	; 2
 136:	46 bb       	out	0x16, r20	; 22
	   i++;
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	b4 f3       	brlt	.-20     	; 0x12e <mTimer+0x34>
	   TIFR1 |= _BV(OCF1A);
	   i++;
	   }
	 } 
   return;
}  /* mTimer */
 142:	08 95       	ret

00000144 <main>:


/* ################## MAIN ROUTINE ################## */
int main(int argc, char *argv[]){
	// created while loop to repeat the night rider pattern
	CLKPR = 0x80;
 144:	e1 e6       	ldi	r30, 0x61	; 97
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	80 83       	st	Z, r24
	CLKPR = 0x01;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
	
	TCCR1B = _BV(CS11);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	while(1==1){
		DDRC = 0b11111111; // sets all pins on PORTC to output
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	87 b9       	out	0x07, r24	; 7
		// initialize specific pins to high to turn on LEDs
		PORTC = 0b00000011;
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	88 b9       	out	0x08, r24	; 8
		mTimer(200);
 15e:	88 ec       	ldi	r24, 0xC8	; 200
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	cb df       	rcall	.-106    	; 0xfa <mTimer>
		while(PORTC != 0b11000000){
 164:	06 c0       	rjmp	.+12     	; 0x172 <main+0x2e>
			PORTC = PORTC << 1;
 166:	88 b1       	in	r24, 0x08	; 8
 168:	88 0f       	add	r24, r24
 16a:	88 b9       	out	0x08, r24	; 8
			mTimer(200);
 16c:	88 ec       	ldi	r24, 0xC8	; 200
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	c4 df       	rcall	.-120    	; 0xfa <mTimer>
	while(1==1){
		DDRC = 0b11111111; // sets all pins on PORTC to output
		// initialize specific pins to high to turn on LEDs
		PORTC = 0b00000011;
		mTimer(200);
		while(PORTC != 0b11000000){
 172:	88 b1       	in	r24, 0x08	; 8
 174:	80 3c       	cpi	r24, 0xC0	; 192
 176:	b9 f7       	brne	.-18     	; 0x166 <main+0x22>
 178:	06 c0       	rjmp	.+12     	; 0x186 <main+0x42>
			PORTC = PORTC << 1;
			mTimer(200);
		}
		while(PORTC != 0b00000110){
			PORTC = PORTC >> 1;
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	86 95       	lsr	r24
 17e:	88 b9       	out	0x08, r24	; 8
			mTimer(200);
 180:	88 ec       	ldi	r24, 0xC8	; 200
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ba df       	rcall	.-140    	; 0xfa <mTimer>
		mTimer(200);
		while(PORTC != 0b11000000){
			PORTC = PORTC << 1;
			mTimer(200);
		}
		while(PORTC != 0b00000110){
 186:	88 b1       	in	r24, 0x08	; 8
 188:	86 30       	cpi	r24, 0x06	; 6
 18a:	b9 f7       	brne	.-18     	; 0x17a <main+0x36>
 18c:	e4 cf       	rjmp	.-56     	; 0x156 <main+0x12>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
