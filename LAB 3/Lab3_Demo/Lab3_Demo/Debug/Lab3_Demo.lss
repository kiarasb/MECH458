
Lab3_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000005b4  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800206  00800206  0000064e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011f9  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d88  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000546  00000000  00000000  000026a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f7  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038f  00000000  00000000  000032cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000365a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 eb       	ldi	r30, 0xB4	; 180
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	80 d0       	rcall	.+256    	; 0x220 <main>
 120:	47 c2       	rjmp	.+1166   	; 0x5b0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initLink>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	1f d1       	rcall	.+574    	; 0x36e <malloc>
 130:	99 83       	std	Y+1, r25	; 0x01
 132:	88 83       	st	Y, r24
 134:	fc 01       	movw	r30, r24
 136:	13 82       	std	Z+3, r1	; 0x03
 138:	12 82       	std	Z+2, r1	; 0x02
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <enqueue>:
 140:	db 01       	movw	r26, r22
 142:	ed 91       	ld	r30, X+
 144:	fc 91       	ld	r31, X
 146:	30 97       	sbiw	r30, 0x00	; 0
 148:	61 f0       	breq	.+24     	; 0x162 <enqueue+0x22>
 14a:	da 01       	movw	r26, r20
 14c:	8d 91       	ld	r24, X+
 14e:	9c 91       	ld	r25, X
 150:	11 97       	sbiw	r26, 0x01	; 1
 152:	93 83       	std	Z+3, r25	; 0x03
 154:	82 83       	std	Z+2, r24	; 0x02
 156:	8d 91       	ld	r24, X+
 158:	9c 91       	ld	r25, X
 15a:	fb 01       	movw	r30, r22
 15c:	91 83       	std	Z+1, r25	; 0x01
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret
 162:	da 01       	movw	r26, r20
 164:	2d 91       	ld	r18, X+
 166:	3c 91       	ld	r19, X
 168:	11 97       	sbiw	r26, 0x01	; 1
 16a:	fc 01       	movw	r30, r24
 16c:	31 83       	std	Z+1, r19	; 0x01
 16e:	20 83       	st	Z, r18
 170:	8d 91       	ld	r24, X+
 172:	9c 91       	ld	r25, X
 174:	db 01       	movw	r26, r22
 176:	8d 93       	st	X+, r24
 178:	9c 93       	st	X, r25
 17a:	08 95       	ret

0000017c <clearQueue>:
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
 186:	8b 01       	movw	r16, r22
 188:	88 81       	ld	r24, Y
 18a:	99 81       	ldd	r25, Y+1	; 0x01
 18c:	00 97       	sbiw	r24, 0x00	; 0
 18e:	51 f0       	breq	.+20     	; 0x1a4 <clearQueue+0x28>
 190:	fc 01       	movw	r30, r24
 192:	22 81       	ldd	r18, Z+2	; 0x02
 194:	33 81       	ldd	r19, Z+3	; 0x03
 196:	39 83       	std	Y+1, r19	; 0x01
 198:	28 83       	st	Y, r18
 19a:	81 d1       	rcall	.+770    	; 0x49e <free>
 19c:	88 81       	ld	r24, Y
 19e:	99 81       	ldd	r25, Y+1	; 0x01
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	b1 f7       	brne	.-20     	; 0x190 <clearQueue+0x14>
 1a4:	f8 01       	movw	r30, r16
 1a6:	11 82       	std	Z+1, r1	; 0x01
 1a8:	10 82       	st	Z, r1
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 1b4:	dc 01       	movw	r26, r24
 1b6:	ed 91       	ld	r30, X+
 1b8:	fc 91       	ld	r31, X

	while(temp != NULL){
 1ba:	30 97       	sbiw	r30, 0x00	; 0
 1bc:	49 f0       	breq	.+18     	; 0x1d0 <size+0x1c>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
 1c2:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 1c4:	02 80       	ldd	r0, Z+2	; 0x02
 1c6:	f3 81       	ldd	r31, Z+3	; 0x03
 1c8:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 1ca:	30 97       	sbiw	r30, 0x00	; 0
 1cc:	d1 f7       	brne	.-12     	; 0x1c2 <size+0xe>
 1ce:	08 95       	ret
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 1d4:	08 95       	ret

000001d6 <mTimer>:

void mTimer (int count){
 1d6:	ac 01       	movw	r20, r24
   i = 0;

   //TCCR1B |= _BV (CS11);  // Set prescaler (/8) clock 16MHz/8 -> 2MHz
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 1d8:	e1 e8       	ldi	r30, 0x81	; 129
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	90 81       	ld	r25, Z
 1de:	98 60       	ori	r25, 0x08	; 8
 1e0:	90 83       	st	Z, r25

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 1e2:	88 ee       	ldi	r24, 0xE8	; 232
 1e4:	93 e0       	ldi	r25, 0x03	; 3
 1e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 
   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
 1ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 1f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

   /* Enable the output compare interrupt */
   TIMSK1 = TIMSK1 | 0b00000010;
 1f6:	ef e6       	ldi	r30, 0x6F	; 111
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	90 81       	ld	r25, Z
 1fc:	92 60       	ori	r25, 0x02	; 2
 1fe:	90 83       	st	Z, r25

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 200:	b1 9a       	sbi	0x16, 1	; 22
	  Using polling method not Interrupt Driven
   ***/
	  
   int i;

   i = 0;
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 206:	05 c0       	rjmp	.+10     	; 0x212 <mTimer+0x3c>
      if((TIFR1 & 0x02) == 0x02){
 208:	b1 9b       	sbis	0x16, 1	; 22
 20a:	fe cf       	rjmp	.-4      	; 0x208 <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 20c:	b1 9a       	sbi	0x16, 1	; 22
	   i++;
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	3f 4f       	sbci	r19, 0xFF	; 255

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 212:	24 17       	cp	r18, r20
 214:	35 07       	cpc	r19, r21
 216:	1c f4       	brge	.+6      	; 0x21e <mTimer+0x48>
      if((TIFR1 & 0x02) == 0x02){
 218:	b1 9b       	sbis	0x16, 1	; 22
 21a:	f6 cf       	rjmp	.-20     	; 0x208 <mTimer+0x32>
 21c:	f7 cf       	rjmp	.-18     	; 0x20c <mTimer+0x36>
 21e:	08 95       	ret

00000220 <main>:

/* main routine 
   You need to add the mtimer function to this project.    */
void mTimer(int count);

int main(){	
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <main+0x6>
 226:	00 d0       	rcall	.+0      	; 0x228 <main+0x8>
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	element eTest;		/* A variable to hold the aggregate data type known as element */

	DDRC = 0xFF; 		/* Used for debugging purposes only LEDs on PORTC */
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	87 b9       	out	0x07, r24	; 7
	//DDRD = 0xFF;
				

	rtnLink = NULL;
	newLink = NULL;
 230:	1e 82       	std	Y+6, r1	; 0x06
 232:	1d 82       	std	Y+5, r1	; 0x05
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 234:	1a 82       	std	Y+2, r1	; 0x02
 236:	19 82       	std	Y+1, r1	; 0x01
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 238:	1c 82       	std	Y+4, r1	; 0x04
 23a:	1b 82       	std	Y+3, r1	; 0x03
		need the MCU attached to the computer to test this, and can do most of the work using the 
		debugger in the AVR studio while observing the I/O View in the top right corner. Click the tab
		or PORTC to see how the output changes while 'stepping' through the routines.
	*/
	/* Initialize a new link here */
	initLink(&newLink);
 23c:	ce 01       	movw	r24, r28
 23e:	05 96       	adiw	r24, 0x05	; 5
 240:	71 df       	rcall	.-286    	; 0x124 <initLink>
	newLink->e.itemCode = 3;
 242:	ed 81       	ldd	r30, Y+5	; 0x05
 244:	fe 81       	ldd	r31, Y+6	; 0x06
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	80 83       	st	Z, r24
	newLink->e.stage = 4;
 24a:	ed 81       	ldd	r30, Y+5	; 0x05
 24c:	fe 81       	ldd	r31, Y+6	; 0x06
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	81 83       	std	Z+1, r24	; 0x01
	enqueue(&head, &tail, &newLink);
 252:	ae 01       	movw	r20, r28
 254:	4b 5f       	subi	r20, 0xFB	; 251
 256:	5f 4f       	sbci	r21, 0xFF	; 255
 258:	be 01       	movw	r22, r28
 25a:	6d 5f       	subi	r22, 0xFD	; 253
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	6e df       	rcall	.-292    	; 0x140 <enqueue>
	PORTC = head->e.itemCode;	//  You need to insert mTimer in between each output in order to see the values.
 264:	e9 81       	ldd	r30, Y+1	; 0x01
 266:	fa 81       	ldd	r31, Y+2	; 0x02
 268:	80 81       	ld	r24, Z
 26a:	88 b9       	out	0x08, r24	; 8
	mTimer(2000); // not sure if this is where the mTimer is needed?
 26c:	80 ed       	ldi	r24, 0xD0	; 208
 26e:	97 e0       	ldi	r25, 0x07	; 7
 270:	b2 df       	rcall	.-156    	; 0x1d6 <mTimer>
	PORTC = tail->e.stage;		//  Or the LEDs will just flash by very quickly.  You will need about 2 seconds delay.
 272:	eb 81       	ldd	r30, Y+3	; 0x03
 274:	fc 81       	ldd	r31, Y+4	; 0x04
 276:	81 81       	ldd	r24, Z+1	; 0x01
	mTimer(2000); // not sure if this is where the mTimer is needed?
 278:	88 b9       	out	0x08, r24	; 8
 27a:	80 ed       	ldi	r24, 0xD0	; 208
 27c:	97 e0       	ldi	r25, 0x07	; 7
	
	initLink(&newLink);
 27e:	ab df       	rcall	.-170    	; 0x1d6 <mTimer>
 280:	ce 01       	movw	r24, r28
 282:	05 96       	adiw	r24, 0x05	; 5
 284:	4f df       	rcall	.-354    	; 0x124 <initLink>
	newLink->e.itemCode = 5;
 286:	ed 81       	ldd	r30, Y+5	; 0x05
 288:	fe 81       	ldd	r31, Y+6	; 0x06
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	80 83       	st	Z, r24
	newLink->e.stage = 6;
 28e:	ed 81       	ldd	r30, Y+5	; 0x05
 290:	fe 81       	ldd	r31, Y+6	; 0x06
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	81 83       	std	Z+1, r24	; 0x01
	enqueue(&head, &tail, &newLink);
 296:	ae 01       	movw	r20, r28
 298:	4b 5f       	subi	r20, 0xFB	; 251
 29a:	5f 4f       	sbci	r21, 0xFF	; 255
 29c:	be 01       	movw	r22, r28
 29e:	6d 5f       	subi	r22, 0xFD	; 253
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	ce 01       	movw	r24, r28
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	4c df       	rcall	.-360    	; 0x140 <enqueue>
	PORTC = head->e.itemCode;
 2a8:	e9 81       	ldd	r30, Y+1	; 0x01
 2aa:	fa 81       	ldd	r31, Y+2	; 0x02
 2ac:	80 81       	ld	r24, Z
	mTimer(2000); 
 2ae:	88 b9       	out	0x08, r24	; 8
 2b0:	80 ed       	ldi	r24, 0xD0	; 208
 2b2:	97 e0       	ldi	r25, 0x07	; 7
	PORTC = tail->e.stage;
 2b4:	90 df       	rcall	.-224    	; 0x1d6 <mTimer>
 2b6:	eb 81       	ldd	r30, Y+3	; 0x03
 2b8:	fc 81       	ldd	r31, Y+4	; 0x04
	mTimer(2000);
 2ba:	81 81       	ldd	r24, Z+1	; 0x01
 2bc:	88 b9       	out	0x08, r24	; 8
 2be:	80 ed       	ldi	r24, 0xD0	; 208
 2c0:	97 e0       	ldi	r25, 0x07	; 7
	
	initLink(&newLink);
 2c2:	89 df       	rcall	.-238    	; 0x1d6 <mTimer>
 2c4:	ce 01       	movw	r24, r28
 2c6:	05 96       	adiw	r24, 0x05	; 5
 2c8:	2d df       	rcall	.-422    	; 0x124 <initLink>
	newLink->e.itemCode = 7;
 2ca:	ed 81       	ldd	r30, Y+5	; 0x05
 2cc:	fe 81       	ldd	r31, Y+6	; 0x06
 2ce:	87 e0       	ldi	r24, 0x07	; 7
 2d0:	80 83       	st	Z, r24
	newLink->e.stage = 8;
 2d2:	ed 81       	ldd	r30, Y+5	; 0x05
 2d4:	fe 81       	ldd	r31, Y+6	; 0x06
 2d6:	88 e0       	ldi	r24, 0x08	; 8
	enqueue(&head, &tail, &newLink);
 2d8:	81 83       	std	Z+1, r24	; 0x01
 2da:	ae 01       	movw	r20, r28
 2dc:	4b 5f       	subi	r20, 0xFB	; 251
 2de:	5f 4f       	sbci	r21, 0xFF	; 255
 2e0:	be 01       	movw	r22, r28
 2e2:	6d 5f       	subi	r22, 0xFD	; 253
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
	PORTC = head->e.itemCode;
 2ea:	2a df       	rcall	.-428    	; 0x140 <enqueue>
 2ec:	e9 81       	ldd	r30, Y+1	; 0x01
 2ee:	fa 81       	ldd	r31, Y+2	; 0x02
	mTimer(2000);
 2f0:	80 81       	ld	r24, Z
 2f2:	88 b9       	out	0x08, r24	; 8
 2f4:	80 ed       	ldi	r24, 0xD0	; 208
 2f6:	97 e0       	ldi	r25, 0x07	; 7
	PORTC = tail->e.stage;
 2f8:	6e df       	rcall	.-292    	; 0x1d6 <mTimer>
 2fa:	eb 81       	ldd	r30, Y+3	; 0x03
 2fc:	fc 81       	ldd	r31, Y+4	; 0x04
 2fe:	81 81       	ldd	r24, Z+1	; 0x01
	mTimer(2000);
 300:	88 b9       	out	0x08, r24	; 8
 302:	80 ed       	ldi	r24, 0xD0	; 208
 304:	97 e0       	ldi	r25, 0x07	; 7

	PORTC = 0x00;
 306:	67 df       	rcall	.-306    	; 0x1d6 <mTimer>
* INPUT: The head pointer
* RETURNS: The element contained within the queue
*/
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
	return((*h)->e);
 308:	18 b8       	out	0x08, r1	; 8
 30a:	e9 81       	ldd	r30, Y+1	; 0x01
 30c:	fa 81       	ldd	r31, Y+2	; 0x02

	PORTC = 0x00;

	/* Tests to see if firstValue works */
	eTest = firstValue(&head);
	PORTC = eTest.itemCode;
 30e:	80 81       	ld	r24, Z
	PORTC = 0x00;
 310:	88 b9       	out	0x08, r24	; 8

	/* Tests if Size works */
	PORTC = size(&head, &tail);
 312:	18 b8       	out	0x08, r1	; 8
 314:	be 01       	movw	r22, r28
 316:	6d 5f       	subi	r22, 0xFD	; 253
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	ce 01       	movw	r24, r28
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	4a df       	rcall	.-364    	; 0x1b4 <size>
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 320:	88 b9       	out	0x08, r24	; 8
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	29 81       	ldd	r18, Y+1	; 0x01
 326:	3a 81       	ldd	r19, Y+2	; 0x02
 328:	23 2b       	or	r18, r19
	//dequeue(&head, &rtnLink); /* remove the item at the head of the list */
	//PORTC = rtnLink->e.itemCode;
	//mTimer(2000);
	
	/* Tests is empty */
	PORTC = isEmpty(&head);
 32a:	09 f0       	breq	.+2      	; 0x32e <main+0x10e>

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	88 b9       	out	0x08, r24	; 8
 330:	be 01       	movw	r22, r28
 332:	6d 5f       	subi	r22, 0xFD	; 253
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	ce 01       	movw	r24, r28
 338:	01 96       	adiw	r24, 0x01	; 1
	PORTC = size(&head, &tail);
 33a:	20 df       	rcall	.-448    	; 0x17c <clearQueue>
 33c:	be 01       	movw	r22, r28
 33e:	6d 5f       	subi	r22, 0xFD	; 253
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	36 df       	rcall	.-404    	; 0x1b4 <size>
 348:	88 b9       	out	0x08, r24	; 8
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	3a 81       	ldd	r19, Y+2	; 0x02
 350:	23 2b       	or	r18, r19
 352:	09 f0       	breq	.+2      	; 0x356 <main+0x136>
 354:	80 e0       	ldi	r24, 0x00	; 0

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
	PORTC = size(&head, &tail);

	PORTC = isEmpty(&head);
 356:	88 b9       	out	0x08, r24	; 8


	return(0);
}/* main */
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	26 96       	adiw	r28, 0x06	; 6
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <malloc>:
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	91 05       	cpc	r25, r1
 37a:	10 f4       	brcc	.+4      	; 0x380 <malloc+0x12>
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__flp>
 384:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__flp+0x1>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	a0 e0       	ldi	r26, 0x00	; 0
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	30 97       	sbiw	r30, 0x00	; 0
 392:	19 f1       	breq	.+70     	; 0x3da <malloc+0x6c>
 394:	40 81       	ld	r20, Z
 396:	51 81       	ldd	r21, Z+1	; 0x01
 398:	02 81       	ldd	r16, Z+2	; 0x02
 39a:	13 81       	ldd	r17, Z+3	; 0x03
 39c:	48 17       	cp	r20, r24
 39e:	59 07       	cpc	r21, r25
 3a0:	c8 f0       	brcs	.+50     	; 0x3d4 <malloc+0x66>
 3a2:	84 17       	cp	r24, r20
 3a4:	95 07       	cpc	r25, r21
 3a6:	69 f4       	brne	.+26     	; 0x3c2 <malloc+0x54>
 3a8:	10 97       	sbiw	r26, 0x00	; 0
 3aa:	31 f0       	breq	.+12     	; 0x3b8 <malloc+0x4a>
 3ac:	12 96       	adiw	r26, 0x02	; 2
 3ae:	0c 93       	st	X, r16
 3b0:	12 97       	sbiw	r26, 0x02	; 2
 3b2:	13 96       	adiw	r26, 0x03	; 3
 3b4:	1c 93       	st	X, r17
 3b6:	27 c0       	rjmp	.+78     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3b8:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <__flp>
 3bc:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <__flp+0x1>
 3c0:	22 c0       	rjmp	.+68     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3c2:	21 15       	cp	r18, r1
 3c4:	31 05       	cpc	r19, r1
 3c6:	19 f0       	breq	.+6      	; 0x3ce <malloc+0x60>
 3c8:	42 17       	cp	r20, r18
 3ca:	53 07       	cpc	r21, r19
 3cc:	18 f4       	brcc	.+6      	; 0x3d4 <malloc+0x66>
 3ce:	9a 01       	movw	r18, r20
 3d0:	bd 01       	movw	r22, r26
 3d2:	ef 01       	movw	r28, r30
 3d4:	df 01       	movw	r26, r30
 3d6:	f8 01       	movw	r30, r16
 3d8:	db cf       	rjmp	.-74     	; 0x390 <malloc+0x22>
 3da:	21 15       	cp	r18, r1
 3dc:	31 05       	cpc	r19, r1
 3de:	f9 f0       	breq	.+62     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e0:	28 1b       	sub	r18, r24
 3e2:	39 0b       	sbc	r19, r25
 3e4:	24 30       	cpi	r18, 0x04	; 4
 3e6:	31 05       	cpc	r19, r1
 3e8:	80 f4       	brcc	.+32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	9b 81       	ldd	r25, Y+3	; 0x03
 3ee:	61 15       	cp	r22, r1
 3f0:	71 05       	cpc	r23, r1
 3f2:	21 f0       	breq	.+8      	; 0x3fc <malloc+0x8e>
 3f4:	fb 01       	movw	r30, r22
 3f6:	93 83       	std	Z+3, r25	; 0x03
 3f8:	82 83       	std	Z+2, r24	; 0x02
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__flp+0x1>
 400:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__flp>
 404:	fe 01       	movw	r30, r28
 406:	32 96       	adiw	r30, 0x02	; 2
 408:	44 c0       	rjmp	.+136    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 40a:	fe 01       	movw	r30, r28
 40c:	e2 0f       	add	r30, r18
 40e:	f3 1f       	adc	r31, r19
 410:	81 93       	st	Z+, r24
 412:	91 93       	st	Z+, r25
 414:	22 50       	subi	r18, 0x02	; 2
 416:	31 09       	sbc	r19, r1
 418:	39 83       	std	Y+1, r19	; 0x01
 41a:	28 83       	st	Y, r18
 41c:	3a c0       	rjmp	.+116    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 41e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 422:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 426:	23 2b       	or	r18, r19
 428:	41 f4       	brne	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 42e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 432:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 436:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 43a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 43e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 442:	21 15       	cp	r18, r1
 444:	31 05       	cpc	r19, r1
 446:	41 f4       	brne	.+16     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 448:	2d b7       	in	r18, 0x3d	; 61
 44a:	3e b7       	in	r19, 0x3e	; 62
 44c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 450:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 454:	24 1b       	sub	r18, r20
 456:	35 0b       	sbc	r19, r21
 458:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 45c:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 460:	e2 17       	cp	r30, r18
 462:	f3 07       	cpc	r31, r19
 464:	a0 f4       	brcc	.+40     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 466:	2e 1b       	sub	r18, r30
 468:	3f 0b       	sbc	r19, r31
 46a:	28 17       	cp	r18, r24
 46c:	39 07       	cpc	r19, r25
 46e:	78 f0       	brcs	.+30     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 470:	ac 01       	movw	r20, r24
 472:	4e 5f       	subi	r20, 0xFE	; 254
 474:	5f 4f       	sbci	r21, 0xFF	; 255
 476:	24 17       	cp	r18, r20
 478:	35 07       	cpc	r19, r21
 47a:	48 f0       	brcs	.+18     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 47c:	4e 0f       	add	r20, r30
 47e:	5f 1f       	adc	r21, r31
 480:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
 484:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
 488:	81 93       	st	Z+, r24
 48a:	91 93       	st	Z+, r25
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48e:	e0 e0       	ldi	r30, 0x00	; 0
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	cf 01       	movw	r24, r30
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	08 95       	ret

0000049e <free>:
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <free+0xa>
 4a6:	81 c0       	rjmp	.+258    	; 0x5aa <free+0x10c>
 4a8:	fc 01       	movw	r30, r24
 4aa:	32 97       	sbiw	r30, 0x02	; 2
 4ac:	13 82       	std	Z+3, r1	; 0x03
 4ae:	12 82       	std	Z+2, r1	; 0x02
 4b0:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 4b4:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 4b8:	10 97       	sbiw	r26, 0x00	; 0
 4ba:	81 f4       	brne	.+32     	; 0x4dc <free+0x3e>
 4bc:	20 81       	ld	r18, Z
 4be:	31 81       	ldd	r19, Z+1	; 0x01
 4c0:	82 0f       	add	r24, r18
 4c2:	93 1f       	adc	r25, r19
 4c4:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 4c8:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 4cc:	28 17       	cp	r18, r24
 4ce:	39 07       	cpc	r19, r25
 4d0:	51 f5       	brne	.+84     	; 0x526 <free+0x88>
 4d2:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 4d6:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 4da:	67 c0       	rjmp	.+206    	; 0x5aa <free+0x10c>
 4dc:	ed 01       	movw	r28, r26
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	ce 17       	cp	r28, r30
 4e4:	df 07       	cpc	r29, r31
 4e6:	40 f4       	brcc	.+16     	; 0x4f8 <free+0x5a>
 4e8:	4a 81       	ldd	r20, Y+2	; 0x02
 4ea:	5b 81       	ldd	r21, Y+3	; 0x03
 4ec:	9e 01       	movw	r18, r28
 4ee:	41 15       	cp	r20, r1
 4f0:	51 05       	cpc	r21, r1
 4f2:	f1 f0       	breq	.+60     	; 0x530 <free+0x92>
 4f4:	ea 01       	movw	r28, r20
 4f6:	f5 cf       	rjmp	.-22     	; 0x4e2 <free+0x44>
 4f8:	d3 83       	std	Z+3, r29	; 0x03
 4fa:	c2 83       	std	Z+2, r28	; 0x02
 4fc:	40 81       	ld	r20, Z
 4fe:	51 81       	ldd	r21, Z+1	; 0x01
 500:	84 0f       	add	r24, r20
 502:	95 1f       	adc	r25, r21
 504:	c8 17       	cp	r28, r24
 506:	d9 07       	cpc	r29, r25
 508:	59 f4       	brne	.+22     	; 0x520 <free+0x82>
 50a:	88 81       	ld	r24, Y
 50c:	99 81       	ldd	r25, Y+1	; 0x01
 50e:	84 0f       	add	r24, r20
 510:	95 1f       	adc	r25, r21
 512:	02 96       	adiw	r24, 0x02	; 2
 514:	91 83       	std	Z+1, r25	; 0x01
 516:	80 83       	st	Z, r24
 518:	8a 81       	ldd	r24, Y+2	; 0x02
 51a:	9b 81       	ldd	r25, Y+3	; 0x03
 51c:	93 83       	std	Z+3, r25	; 0x03
 51e:	82 83       	std	Z+2, r24	; 0x02
 520:	21 15       	cp	r18, r1
 522:	31 05       	cpc	r19, r1
 524:	29 f4       	brne	.+10     	; 0x530 <free+0x92>
 526:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 52a:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 52e:	3d c0       	rjmp	.+122    	; 0x5aa <free+0x10c>
 530:	e9 01       	movw	r28, r18
 532:	fb 83       	std	Y+3, r31	; 0x03
 534:	ea 83       	std	Y+2, r30	; 0x02
 536:	49 91       	ld	r20, Y+
 538:	59 91       	ld	r21, Y+
 53a:	c4 0f       	add	r28, r20
 53c:	d5 1f       	adc	r29, r21
 53e:	ec 17       	cp	r30, r28
 540:	fd 07       	cpc	r31, r29
 542:	61 f4       	brne	.+24     	; 0x55c <free+0xbe>
 544:	80 81       	ld	r24, Z
 546:	91 81       	ldd	r25, Z+1	; 0x01
 548:	84 0f       	add	r24, r20
 54a:	95 1f       	adc	r25, r21
 54c:	02 96       	adiw	r24, 0x02	; 2
 54e:	e9 01       	movw	r28, r18
 550:	99 83       	std	Y+1, r25	; 0x01
 552:	88 83       	st	Y, r24
 554:	82 81       	ldd	r24, Z+2	; 0x02
 556:	93 81       	ldd	r25, Z+3	; 0x03
 558:	9b 83       	std	Y+3, r25	; 0x03
 55a:	8a 83       	std	Y+2, r24	; 0x02
 55c:	e0 e0       	ldi	r30, 0x00	; 0
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	12 96       	adiw	r26, 0x02	; 2
 562:	8d 91       	ld	r24, X+
 564:	9c 91       	ld	r25, X
 566:	13 97       	sbiw	r26, 0x03	; 3
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	19 f0       	breq	.+6      	; 0x572 <free+0xd4>
 56c:	fd 01       	movw	r30, r26
 56e:	dc 01       	movw	r26, r24
 570:	f7 cf       	rjmp	.-18     	; 0x560 <free+0xc2>
 572:	8d 91       	ld	r24, X+
 574:	9c 91       	ld	r25, X
 576:	11 97       	sbiw	r26, 0x01	; 1
 578:	9d 01       	movw	r18, r26
 57a:	2e 5f       	subi	r18, 0xFE	; 254
 57c:	3f 4f       	sbci	r19, 0xFF	; 255
 57e:	82 0f       	add	r24, r18
 580:	93 1f       	adc	r25, r19
 582:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 586:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 58a:	28 17       	cp	r18, r24
 58c:	39 07       	cpc	r19, r25
 58e:	69 f4       	brne	.+26     	; 0x5aa <free+0x10c>
 590:	30 97       	sbiw	r30, 0x00	; 0
 592:	29 f4       	brne	.+10     	; 0x59e <free+0x100>
 594:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__flp+0x1>
 598:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__flp>
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <free+0x104>
 59e:	13 82       	std	Z+3, r1	; 0x03
 5a0:	12 82       	std	Z+2, r1	; 0x02
 5a2:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x1>
 5a6:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end>
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
