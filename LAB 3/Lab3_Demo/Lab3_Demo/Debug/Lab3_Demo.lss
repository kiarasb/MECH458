
Lab3_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000504  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800206  00800206  0000059e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001124  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9d  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056d  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000617  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039f  00000000  00000000  000031bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000355a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e0       	ldi	r30, 0x04	; 4
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	64 d0       	rcall	.+200    	; 0x1e8 <main>
 120:	ef c1       	rjmp	.+990    	; 0x500 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initLink>:
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	c7 d0       	rcall	.+398    	; 0x2be <malloc>
 130:	99 83       	std	Y+1, r25	; 0x01
 132:	88 83       	st	Y, r24
 134:	fc 01       	movw	r30, r24
 136:	13 82       	std	Z+3, r1	; 0x03
 138:	12 82       	std	Z+2, r1	; 0x02
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <enqueue>:
 140:	db 01       	movw	r26, r22
 142:	ed 91       	ld	r30, X+
 144:	fc 91       	ld	r31, X
 146:	30 97       	sbiw	r30, 0x00	; 0
 148:	61 f0       	breq	.+24     	; 0x162 <enqueue+0x22>
 14a:	da 01       	movw	r26, r20
 14c:	8d 91       	ld	r24, X+
 14e:	9c 91       	ld	r25, X
 150:	11 97       	sbiw	r26, 0x01	; 1
 152:	93 83       	std	Z+3, r25	; 0x03
 154:	82 83       	std	Z+2, r24	; 0x02
 156:	8d 91       	ld	r24, X+
 158:	9c 91       	ld	r25, X
 15a:	fb 01       	movw	r30, r22
 15c:	91 83       	std	Z+1, r25	; 0x01
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret
 162:	da 01       	movw	r26, r20
 164:	2d 91       	ld	r18, X+
 166:	3c 91       	ld	r19, X
 168:	11 97       	sbiw	r26, 0x01	; 1
 16a:	fc 01       	movw	r30, r24
 16c:	31 83       	std	Z+1, r19	; 0x01
 16e:	20 83       	st	Z, r18
 170:	8d 91       	ld	r24, X+
 172:	9c 91       	ld	r25, X
 174:	db 01       	movw	r26, r22
 176:	8d 93       	st	X+, r24
 178:	9c 93       	st	X, r25
 17a:	08 95       	ret

0000017c <dequeue>:
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	db 01       	movw	r26, r22
 184:	8d 93       	st	X+, r24
 186:	9c 93       	st	X, r25
 188:	a0 81       	ld	r26, Z
 18a:	b1 81       	ldd	r27, Z+1	; 0x01
 18c:	10 97       	sbiw	r26, 0x00	; 0
 18e:	31 f0       	breq	.+12     	; 0x19c <dequeue+0x20>
 190:	12 96       	adiw	r26, 0x02	; 2
 192:	8d 91       	ld	r24, X+
 194:	9c 91       	ld	r25, X
 196:	13 97       	sbiw	r26, 0x03	; 3
 198:	91 83       	std	Z+1, r25	; 0x01
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <mTimer>:

void mTimer (int count){
 19e:	ac 01       	movw	r20, r24
   i = 0;

   //TCCR1B |= _BV (CS11);  // Set prescaler (/8) clock 16MHz/8 -> 2MHz
   /* Set the Waveform gen. mode bit description to clear
     on compare mode only */
   TCCR1B |= _BV(WGM12);
 1a0:	e1 e8       	ldi	r30, 0x81	; 129
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	98 60       	ori	r25, 0x08	; 8
 1a8:	90 83       	st	Z, r25

   /* Set output compare register for 1000 cycles, 1ms */
   OCR1A = 0x03E8;
 1aa:	88 ee       	ldi	r24, 0xE8	; 232
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 
   /* Initialize Timer1 to zero */
   TCNT1 = 0x0000;
 1b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 1ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

   /* Enable the output compare interrupt */
   TIMSK1 = TIMSK1 | 0b00000010;
 1be:	ef e6       	ldi	r30, 0x6F	; 111
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	92 60       	ori	r25, 0x02	; 2
 1c6:	90 83       	st	Z, r25

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);
 1c8:	b1 9a       	sbi	0x16, 1	; 22
	  Using polling method not Interrupt Driven
   ***/
	  
   int i;

   i = 0;
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <mTimer+0x3c>
      if((TIFR1 & 0x02) == 0x02){
 1d0:	b1 9b       	sbis	0x16, 1	; 22
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <mTimer+0x32>
	
	   /* Clear the interrupt flag by WRITING a ONE to the bit */
	   TIFR1 |= _BV(OCF1A);
 1d4:	b1 9a       	sbi	0x16, 1	; 22
	   i++;
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	3f 4f       	sbci	r19, 0xFF	; 255

   /* Clear the Timer1 interrupt flag and begin timing */
   TIFR1 |= _BV(OCF1A);

   /* Poll the timer to determine when the timer has reached 1ms */
   while (i < count){
 1da:	24 17       	cp	r18, r20
 1dc:	35 07       	cpc	r19, r21
 1de:	1c f4       	brge	.+6      	; 0x1e6 <mTimer+0x48>
      if((TIFR1 & 0x02) == 0x02){
 1e0:	b1 9b       	sbis	0x16, 1	; 22
 1e2:	f6 cf       	rjmp	.-20     	; 0x1d0 <mTimer+0x32>
 1e4:	f7 cf       	rjmp	.-18     	; 0x1d4 <mTimer+0x36>
 1e6:	08 95       	ret

000001e8 <main>:
/* main routine 
   You need to add the mtimer function to this project.    */
void mTimer(int count);
int debug(char input);

int main(int argc, char *argv[]){	
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	28 97       	sbiw	r28, 0x08	; 8
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
	CLKPR = 0x80;
 1fc:	e1 e6       	ldi	r30, 0x61	; 97
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 e8       	ldi	r24, 0x80	; 128
 202:	80 83       	st	Z, r24
	CLKPR = 0x01;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 83       	st	Z, r24
	
	TCCR1B = _BV(CS11);
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	element eTest;		/* A variable to hold the aggregate data type known as element */

	DDRC = 0xFF; 		/* Used for debugging purposes only LEDs on PORTC */
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	87 b9       	out	0x07, r24	; 7
	//DDRD = 0xFF;
	DDRA = 0x00; // sets port A to input
 212:	11 b8       	out	0x01, r1	; 1
	DDRC = 0xFF; //sets port C to output bits for red LEDs
 214:	87 b9       	out	0x07, r24	; 7
	
	while(1){
		rtnLink = NULL;
 216:	18 86       	std	Y+8, r1	; 0x08
 218:	1f 82       	std	Y+7, r1	; 0x07
		newLink = NULL;
 21a:	1e 82       	std	Y+6, r1	; 0x06
 21c:	1d 82       	std	Y+5, r1	; 0x05
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 21e:	1a 82       	std	Y+2, r1	; 0x02
 220:	19 82       	std	Y+1, r1	; 0x01
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 222:	1c 82       	std	Y+4, r1	; 0x04
 224:	1b 82       	std	Y+3, r1	; 0x03
 226:	03 e0       	ldi	r16, 0x03	; 3
 228:	10 e0       	ldi	r17, 0x00	; 0
		rtnLink = NULL;
		newLink = NULL;
		setup(&head, &tail);
		for(int i = 0; i<3; i++){
			//check button
			while((PINA&0x04)==0x04); //checking if button is HIGH ie pushed
 22a:	02 99       	sbic	0x00, 2	; 0
 22c:	fe cf       	rjmp	.-4      	; 0x22a <main+0x42>
			mTimer(20); //debounce
 22e:	84 e1       	ldi	r24, 0x14	; 20
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	b5 df       	rcall	.-150    	; 0x19e <mTimer>
			initLink(&newLink);
 234:	ce 01       	movw	r24, r28
 236:	05 96       	adiw	r24, 0x05	; 5
 238:	75 df       	rcall	.-278    	; 0x124 <initLink>
			newLink->e.itemCode = (PINA&0x03);
 23a:	ed 81       	ldd	r30, Y+5	; 0x05
 23c:	fe 81       	ldd	r31, Y+6	; 0x06
 23e:	80 b1       	in	r24, 0x00	; 0
 240:	83 70       	andi	r24, 0x03	; 3
 242:	80 83       	st	Z, r24
			enqueue(&head, &tail, &newLink);
 244:	ae 01       	movw	r20, r28
 246:	4b 5f       	subi	r20, 0xFB	; 251
 248:	5f 4f       	sbci	r21, 0xFF	; 255
 24a:	be 01       	movw	r22, r28
 24c:	6d 5f       	subi	r22, 0xFD	; 253
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	75 df       	rcall	.-278    	; 0x140 <enqueue>
			//check button
			while((PINA&0x04)==0x00); //checking if button is LOW ie not pushed
 256:	02 9b       	sbis	0x00, 2	; 0
			mTimer(20); //debounce
 258:	fe cf       	rjmp	.-4      	; 0x256 <main+0x6e>
 25a:	84 e1       	ldi	r24, 0x14	; 20
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	9f df       	rcall	.-194    	; 0x19e <mTimer>
 260:	01 50       	subi	r16, 0x01	; 1
 262:	11 09       	sbc	r17, r1
	
	while(1){
		rtnLink = NULL;
		newLink = NULL;
		setup(&head, &tail);
		for(int i = 0; i<3; i++){
 264:	11 f7       	brne	.-60     	; 0x22a <main+0x42>
			//check button
			while((PINA&0x04)==0x00); //checking if button is LOW ie not pushed
			mTimer(20); //debounce
		}
		int i = 0;
		while(isEmpty(&head)!=1){
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	9a 81       	ldd	r25, Y+2	; 0x02
 26a:	89 2b       	or	r24, r25
 26c:	e1 f0       	breq	.+56     	; 0x2a6 <main+0xbe>
 26e:	00 e0       	ldi	r16, 0x00	; 0
 270:	10 e0       	ldi	r17, 0x00	; 0
			dequeue(&head, &rtnLink); //remove the item at the head of the list 
 272:	be 01       	movw	r22, r28
 274:	69 5f       	subi	r22, 0xF9	; 249
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	7f df       	rcall	.-258    	; 0x17c <dequeue>
			PORTC = rtnLink->e.itemCode<<i;
 27e:	ef 81       	ldd	r30, Y+7	; 0x07
 280:	f8 85       	ldd	r31, Y+8	; 0x08
 282:	80 81       	ld	r24, Z
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	00 2e       	mov	r0, r16
 288:	02 c0       	rjmp	.+4      	; 0x28e <main+0xa6>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <main+0xa2>
			mTimer(2000);
 292:	88 b9       	out	0x08, r24	; 8
 294:	80 ed       	ldi	r24, 0xD0	; 208
 296:	97 e0       	ldi	r25, 0x07	; 7
 298:	82 df       	rcall	.-252    	; 0x19e <mTimer>
			i= i+2;
 29a:	0e 5f       	subi	r16, 0xFE	; 254
 29c:	1f 4f       	sbci	r17, 0xFF	; 255
			//check button
			while((PINA&0x04)==0x00); //checking if button is LOW ie not pushed
			mTimer(20); //debounce
		}
		int i = 0;
		while(isEmpty(&head)!=1){
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	9a 81       	ldd	r25, Y+2	; 0x02
 2a2:	89 2b       	or	r24, r25
		mTimer(2000);
		dequeue(&head, &rtnLink); //remove the item at the head of the list
		PORTC = rtnLink->e.itemCode<<4;
		mTimer(2000);*/
		
		while((PINA&0x04)==0x04);
 2a4:	31 f7       	brne	.-52     	; 0x272 <main+0x8a>
 2a6:	02 99       	sbic	0x00, 2	; 0
		mTimer(20); //debounce
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <main+0xbe>
 2aa:	84 e1       	ldi	r24, 0x14	; 20
 2ac:	90 e0       	ldi	r25, 0x00	; 0
		PORTC = 0;
 2ae:	77 df       	rcall	.-274    	; 0x19e <mTimer>
		while((PINA&0x04)==0x00); //checking if button is LOW ie not pushed
 2b0:	18 b8       	out	0x08, r1	; 8
 2b2:	02 9b       	sbis	0x00, 2	; 0
		mTimer(20); //debounce
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <main+0xca>
 2b6:	84 e1       	ldi	r24, 0x14	; 20
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	71 df       	rcall	.-286    	; 0x19e <mTimer>
	}
 2bc:	ac cf       	rjmp	.-168    	; 0x216 <main+0x2e>

000002be <malloc>:
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	91 05       	cpc	r25, r1
 2ca:	10 f4       	brcc	.+4      	; 0x2d0 <malloc+0x12>
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__flp>
 2d4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__flp+0x1>
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	a0 e0       	ldi	r26, 0x00	; 0
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	30 97       	sbiw	r30, 0x00	; 0
 2e2:	19 f1       	breq	.+70     	; 0x32a <malloc+0x6c>
 2e4:	40 81       	ld	r20, Z
 2e6:	51 81       	ldd	r21, Z+1	; 0x01
 2e8:	02 81       	ldd	r16, Z+2	; 0x02
 2ea:	13 81       	ldd	r17, Z+3	; 0x03
 2ec:	48 17       	cp	r20, r24
 2ee:	59 07       	cpc	r21, r25
 2f0:	c8 f0       	brcs	.+50     	; 0x324 <malloc+0x66>
 2f2:	84 17       	cp	r24, r20
 2f4:	95 07       	cpc	r25, r21
 2f6:	69 f4       	brne	.+26     	; 0x312 <malloc+0x54>
 2f8:	10 97       	sbiw	r26, 0x00	; 0
 2fa:	31 f0       	breq	.+12     	; 0x308 <malloc+0x4a>
 2fc:	12 96       	adiw	r26, 0x02	; 2
 2fe:	0c 93       	st	X, r16
 300:	12 97       	sbiw	r26, 0x02	; 2
 302:	13 96       	adiw	r26, 0x03	; 3
 304:	1c 93       	st	X, r17
 306:	27 c0       	rjmp	.+78     	; 0x356 <malloc+0x98>
 308:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <__flp>
 30c:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <__flp+0x1>
 310:	22 c0       	rjmp	.+68     	; 0x356 <malloc+0x98>
 312:	21 15       	cp	r18, r1
 314:	31 05       	cpc	r19, r1
 316:	19 f0       	breq	.+6      	; 0x31e <malloc+0x60>
 318:	42 17       	cp	r20, r18
 31a:	53 07       	cpc	r21, r19
 31c:	18 f4       	brcc	.+6      	; 0x324 <malloc+0x66>
 31e:	9a 01       	movw	r18, r20
 320:	bd 01       	movw	r22, r26
 322:	ef 01       	movw	r28, r30
 324:	df 01       	movw	r26, r30
 326:	f8 01       	movw	r30, r16
 328:	db cf       	rjmp	.-74     	; 0x2e0 <malloc+0x22>
 32a:	21 15       	cp	r18, r1
 32c:	31 05       	cpc	r19, r1
 32e:	f9 f0       	breq	.+62     	; 0x36e <malloc+0xb0>
 330:	28 1b       	sub	r18, r24
 332:	39 0b       	sbc	r19, r25
 334:	24 30       	cpi	r18, 0x04	; 4
 336:	31 05       	cpc	r19, r1
 338:	80 f4       	brcc	.+32     	; 0x35a <malloc+0x9c>
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	9b 81       	ldd	r25, Y+3	; 0x03
 33e:	61 15       	cp	r22, r1
 340:	71 05       	cpc	r23, r1
 342:	21 f0       	breq	.+8      	; 0x34c <malloc+0x8e>
 344:	fb 01       	movw	r30, r22
 346:	93 83       	std	Z+3, r25	; 0x03
 348:	82 83       	std	Z+2, r24	; 0x02
 34a:	04 c0       	rjmp	.+8      	; 0x354 <malloc+0x96>
 34c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__flp+0x1>
 350:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__flp>
 354:	fe 01       	movw	r30, r28
 356:	32 96       	adiw	r30, 0x02	; 2
 358:	44 c0       	rjmp	.+136    	; 0x3e2 <malloc+0x124>
 35a:	fe 01       	movw	r30, r28
 35c:	e2 0f       	add	r30, r18
 35e:	f3 1f       	adc	r31, r19
 360:	81 93       	st	Z+, r24
 362:	91 93       	st	Z+, r25
 364:	22 50       	subi	r18, 0x02	; 2
 366:	31 09       	sbc	r19, r1
 368:	39 83       	std	Y+1, r19	; 0x01
 36a:	28 83       	st	Y, r18
 36c:	3a c0       	rjmp	.+116    	; 0x3e2 <malloc+0x124>
 36e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 372:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 376:	23 2b       	or	r18, r19
 378:	41 f4       	brne	.+16     	; 0x38a <malloc+0xcc>
 37a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 37e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 382:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 386:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 38a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 38e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 392:	21 15       	cp	r18, r1
 394:	31 05       	cpc	r19, r1
 396:	41 f4       	brne	.+16     	; 0x3a8 <malloc+0xea>
 398:	2d b7       	in	r18, 0x3d	; 61
 39a:	3e b7       	in	r19, 0x3e	; 62
 39c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 3a0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 3a4:	24 1b       	sub	r18, r20
 3a6:	35 0b       	sbc	r19, r21
 3a8:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 3ac:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 3b0:	e2 17       	cp	r30, r18
 3b2:	f3 07       	cpc	r31, r19
 3b4:	a0 f4       	brcc	.+40     	; 0x3de <malloc+0x120>
 3b6:	2e 1b       	sub	r18, r30
 3b8:	3f 0b       	sbc	r19, r31
 3ba:	28 17       	cp	r18, r24
 3bc:	39 07       	cpc	r19, r25
 3be:	78 f0       	brcs	.+30     	; 0x3de <malloc+0x120>
 3c0:	ac 01       	movw	r20, r24
 3c2:	4e 5f       	subi	r20, 0xFE	; 254
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	24 17       	cp	r18, r20
 3c8:	35 07       	cpc	r19, r21
 3ca:	48 f0       	brcs	.+18     	; 0x3de <malloc+0x120>
 3cc:	4e 0f       	add	r20, r30
 3ce:	5f 1f       	adc	r21, r31
 3d0:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
 3d4:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
 3d8:	81 93       	st	Z+, r24
 3da:	91 93       	st	Z+, r25
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <malloc+0x124>
 3de:	e0 e0       	ldi	r30, 0x00	; 0
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	cf 01       	movw	r24, r30
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <free>:
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <free+0xa>
 3f6:	81 c0       	rjmp	.+258    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 3f8:	fc 01       	movw	r30, r24
 3fa:	32 97       	sbiw	r30, 0x02	; 2
 3fc:	13 82       	std	Z+3, r1	; 0x03
 3fe:	12 82       	std	Z+2, r1	; 0x02
 400:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 404:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 408:	10 97       	sbiw	r26, 0x00	; 0
 40a:	81 f4       	brne	.+32     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40c:	20 81       	ld	r18, Z
 40e:	31 81       	ldd	r19, Z+1	; 0x01
 410:	82 0f       	add	r24, r18
 412:	93 1f       	adc	r25, r19
 414:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 418:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 41c:	28 17       	cp	r18, r24
 41e:	39 07       	cpc	r19, r25
 420:	51 f5       	brne	.+84     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 422:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 426:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 42a:	67 c0       	rjmp	.+206    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 42c:	ed 01       	movw	r28, r26
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	ce 17       	cp	r28, r30
 434:	df 07       	cpc	r29, r31
 436:	40 f4       	brcc	.+16     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 438:	4a 81       	ldd	r20, Y+2	; 0x02
 43a:	5b 81       	ldd	r21, Y+3	; 0x03
 43c:	9e 01       	movw	r18, r28
 43e:	41 15       	cp	r20, r1
 440:	51 05       	cpc	r21, r1
 442:	f1 f0       	breq	.+60     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 444:	ea 01       	movw	r28, r20
 446:	f5 cf       	rjmp	.-22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 448:	d3 83       	std	Z+3, r29	; 0x03
 44a:	c2 83       	std	Z+2, r28	; 0x02
 44c:	40 81       	ld	r20, Z
 44e:	51 81       	ldd	r21, Z+1	; 0x01
 450:	84 0f       	add	r24, r20
 452:	95 1f       	adc	r25, r21
 454:	c8 17       	cp	r28, r24
 456:	d9 07       	cpc	r29, r25
 458:	59 f4       	brne	.+22     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 45a:	88 81       	ld	r24, Y
 45c:	99 81       	ldd	r25, Y+1	; 0x01
 45e:	84 0f       	add	r24, r20
 460:	95 1f       	adc	r25, r21
 462:	02 96       	adiw	r24, 0x02	; 2
 464:	91 83       	std	Z+1, r25	; 0x01
 466:	80 83       	st	Z, r24
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	9b 81       	ldd	r25, Y+3	; 0x03
 46c:	93 83       	std	Z+3, r25	; 0x03
 46e:	82 83       	std	Z+2, r24	; 0x02
 470:	21 15       	cp	r18, r1
 472:	31 05       	cpc	r19, r1
 474:	29 f4       	brne	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 476:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 47a:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 47e:	3d c0       	rjmp	.+122    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 480:	e9 01       	movw	r28, r18
 482:	fb 83       	std	Y+3, r31	; 0x03
 484:	ea 83       	std	Y+2, r30	; 0x02
 486:	49 91       	ld	r20, Y+
 488:	59 91       	ld	r21, Y+
 48a:	c4 0f       	add	r28, r20
 48c:	d5 1f       	adc	r29, r21
 48e:	ec 17       	cp	r30, r28
 490:	fd 07       	cpc	r31, r29
 492:	61 f4       	brne	.+24     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 494:	80 81       	ld	r24, Z
 496:	91 81       	ldd	r25, Z+1	; 0x01
 498:	84 0f       	add	r24, r20
 49a:	95 1f       	adc	r25, r21
 49c:	02 96       	adiw	r24, 0x02	; 2
 49e:	e9 01       	movw	r28, r18
 4a0:	99 83       	std	Y+1, r25	; 0x01
 4a2:	88 83       	st	Y, r24
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	93 81       	ldd	r25, Z+3	; 0x03
 4a8:	9b 83       	std	Y+3, r25	; 0x03
 4aa:	8a 83       	std	Y+2, r24	; 0x02
 4ac:	e0 e0       	ldi	r30, 0x00	; 0
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	12 96       	adiw	r26, 0x02	; 2
 4b2:	8d 91       	ld	r24, X+
 4b4:	9c 91       	ld	r25, X
 4b6:	13 97       	sbiw	r26, 0x03	; 3
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	19 f0       	breq	.+6      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4bc:	fd 01       	movw	r30, r26
 4be:	dc 01       	movw	r26, r24
 4c0:	f7 cf       	rjmp	.-18     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4c2:	8d 91       	ld	r24, X+
 4c4:	9c 91       	ld	r25, X
 4c6:	11 97       	sbiw	r26, 0x01	; 1
 4c8:	9d 01       	movw	r18, r26
 4ca:	2e 5f       	subi	r18, 0xFE	; 254
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	82 0f       	add	r24, r18
 4d0:	93 1f       	adc	r25, r19
 4d2:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 4d6:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 4da:	28 17       	cp	r18, r24
 4dc:	39 07       	cpc	r19, r25
 4de:	69 f4       	brne	.+26     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4e0:	30 97       	sbiw	r30, 0x00	; 0
 4e2:	29 f4       	brne	.+10     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4e4:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__flp+0x1>
 4e8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__flp>
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ee:	13 82       	std	Z+3, r1	; 0x03
 4f0:	12 82       	std	Z+2, r1	; 0x02
 4f2:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x1>
 4f6:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end>
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
